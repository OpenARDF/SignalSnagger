
SignalSnagger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00804000  0000344e  00003502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000344e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ec  00804032  00804032  00003534  2**0
                  ALLOC
  3 .eeprom       00000112  00810000  00810000  00003534  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036a4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005f8  00000000  00000000  000036e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dc63  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000533a  00000000  00000000  00011943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000047e6  00000000  00000000  00016c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010cc  00000000  00000000  0001b464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000576c  00000000  00000000  0001c530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005703  00000000  00000000  00021c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b0  00000000  00000000  0002739f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__dtors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_6>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_12>
      34:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_13>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      60:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_24>
      64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      68:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      6c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      70:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      74:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      78:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__vector_30>
      7c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      80:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      84:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_34>
      8c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      90:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      94:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      98:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      9c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      a0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      a4:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_41>
      a8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      ac:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      bc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      cc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      dc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      e0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      e4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

000000e8 <__ctors_start>:
      e8:	cc 04       	cpc	r12, r12
      ea:	f8 05       	cpc	r31, r8

000000ec <__ctors_end>:
      ec:	db 04       	cpc	r13, r11
      ee:	09 06       	cpc	r0, r25

000000f0 <__dtors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df e7       	ldi	r29, 0x7F	; 127
      fa:	de bf       	out	0x3e, r29	; 62

000000fc <__do_copy_data>:
      fc:	10 e4       	ldi	r17, 0x40	; 64
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e4       	ldi	r27, 0x40	; 64
     102:	ee e4       	ldi	r30, 0x4E	; 78
     104:	f4 e3       	ldi	r31, 0x34	; 52
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a2 33       	cpi	r26, 0x32	; 50
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	21 e4       	ldi	r18, 0x41	; 65
     118:	a2 e3       	ldi	r26, 0x32	; 50
     11a:	b0 e4       	ldi	r27, 0x40	; 64
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	ae 31       	cpi	r26, 0x1E	; 30
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	c6 e7       	ldi	r28, 0x76	; 118
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_global_ctors+0x10>
     12e:	21 97       	sbiw	r28, 0x01	; 1
     130:	fe 01       	movw	r30, r28
     132:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__tablejump2__>
     136:	c4 37       	cpi	r28, 0x74	; 116
     138:	d1 07       	cpc	r29, r17
     13a:	c9 f7       	brne	.-14     	; 0x12e <__do_global_ctors+0x8>
     13c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
     140:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__do_global_dtors>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     148:	0e 94 74 07 	call	0xee8	; 0xee8 <system_init>
}
     14c:	08 95       	ret

0000014e <__vector_34>:
			str[5] = '\0';
			return str;
		}
	}
				
	return str;
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	8f 93       	push	r24
     15a:	8f b1       	in	r24, 0x0f	; 15
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	8f b9       	out	0x0f, r24	; 15
     160:	8f 91       	pop	r24
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <__vector_12>:
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	0b b6       	in	r0, 0x3b	; 59
     178:	0f 92       	push	r0
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	2f 93       	push	r18
     180:	3f 93       	push	r19
     182:	4f 93       	push	r20
     184:	5f 93       	push	r21
     186:	6f 93       	push	r22
     188:	7f 93       	push	r23
     18a:	8f 93       	push	r24
     18c:	9f 93       	push	r25
     18e:	af 93       	push	r26
     190:	bf 93       	push	r27
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	ef 93       	push	r30
     198:	ff 93       	push	r31
     19a:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     19e:	80 ff       	sbrs	r24, 0
     1a0:	1f c2       	rjmp	.+1086   	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     1a2:	20 91 09 40 	lds	r18, 0x4009	; 0x804009 <_ZZ11__vector_12E7fiftyMS>
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	20 93 09 40 	sts	0x4009, r18	; 0x804009 <_ZZ11__vector_12E7fiftyMS>
     1ac:	8b ea       	ldi	r24, 0xAB	; 171
     1ae:	28 9f       	mul	r18, r24
     1b0:	81 2d       	mov	r24, r1
     1b2:	11 24       	eor	r1, r1
     1b4:	86 95       	lsr	r24
     1b6:	86 95       	lsr	r24
     1b8:	98 2f       	mov	r25, r24
     1ba:	99 0f       	add	r25, r25
     1bc:	89 0f       	add	r24, r25
     1be:	88 0f       	add	r24, r24
     1c0:	28 17       	cp	r18, r24
     1c2:	59 f0       	breq	.+22     	; 0x1da <__vector_12+0x6e>
     1c4:	80 91 3c 40 	lds	r24, 0x403C	; 0x80403c <_ZZ11__vector_12E19conversionInProcess>
     1c8:	81 11       	cpse	r24, r1
     1ca:	3e c2       	rjmp	.+1148   	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	80 93 3b 40 	sts	0x403B, r24	; 0x80403b <_ZZ11__vector_12E24indexConversionInProcess>
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	2f ef       	ldi	r18, 0xFF	; 255
     1d8:	df c1       	rjmp	.+958    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     1da:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z18portAdebouncedValsv>
     1de:	c8 2f       	mov	r28, r24
     1e0:	d8 2f       	mov	r29, r24
     1e2:	d7 70       	andi	r29, 0x07	; 7
     1e4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_Z8debouncev>
     1e8:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z18portAdebouncedValsv>
     1ec:	98 2f       	mov	r25, r24
     1ee:	97 70       	andi	r25, 0x07	; 7
     1f0:	d9 17       	cp	r29, r25
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <__vector_12+0x8a>
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     1f6:	9d 2f       	mov	r25, r29
     1f8:	92 70       	andi	r25, 0x02	; 2
     1fa:	0d 2f       	mov	r16, r29
     1fc:	01 70       	andi	r16, 0x01	; 1
     1fe:	d4 70       	andi	r29, 0x04	; 4
     200:	c8 27       	eor	r28, r24
     202:	1c 2f       	mov	r17, r28
     204:	17 70       	andi	r17, 0x07	; 7
     206:	c1 ff       	sbrs	r28, 1
     208:	42 c0       	rjmp	.+132    	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
     20a:	99 23       	and	r25, r25
     20c:	a9 f0       	breq	.+42     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
     20e:	88 e4       	ldi	r24, 0x48	; 72
     210:	90 e4       	ldi	r25, 0x40	; 64
     212:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     216:	88 23       	and	r24, r24
     218:	61 f0       	breq	.+24     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
     21a:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     21e:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	80 93 50 40 	sts	0x4050, r24	; 0x804050 <g_leftsense_presses_count>
     228:	90 93 51 40 	sts	0x4051, r25	; 0x804051 <g_leftsense_presses_count+0x1>
     22c:	10 92 34 40 	sts	0x4034, r1	; 0x804034 <_ZZ11__vector_12E17leftsenseReleased>
     230:	13 c0       	rjmp	.+38     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     232:	10 92 08 40 	sts	0x4008, r1	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     236:	10 c0       	rjmp	.+32     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     238:	88 e4       	ldi	r24, 0x48	; 72
     23a:	90 e4       	ldi	r25, 0x40	; 64
     23c:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     240:	88 23       	and	r24, r24
     242:	01 f1       	breq	.+64     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
     244:	10 92 5c 40 	sts	0x405C, r1	; 0x80405c <g_leftsense_closed_time>
     248:	10 92 5d 40 	sts	0x405D, r1	; 0x80405d <g_leftsense_closed_time+0x1>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <_ZZ11__vector_12E17leftsenseReleased>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 08 40 	sts	0x4008, r24	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     258:	10 ff       	sbrs	r17, 0
     25a:	6c c0       	rjmp	.+216    	; 0x334 <__EEPROM_REGION_LENGTH__+0x134>
     25c:	00 23       	and	r16, r16
     25e:	f1 f1       	breq	.+124    	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
     260:	88 e4       	ldi	r24, 0x48	; 72
     262:	90 e4       	ldi	r25, 0x40	; 64
     264:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     268:	88 23       	and	r24, r24
     26a:	a9 f1       	breq	.+106    	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
     26c:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     270:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	80 93 4e 40 	sts	0x404E, r24	; 0x80404e <g_rightsense_presses_count>
     27a:	90 93 4f 40 	sts	0x404F, r25	; 0x80404f <g_rightsense_presses_count+0x1>
     27e:	10 92 33 40 	sts	0x4033, r1	; 0x804033 <_ZZ11__vector_12E18rightsenseReleased>
     282:	3c c0       	rjmp	.+120    	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     284:	88 e4       	ldi	r24, 0x48	; 72
     286:	90 e4       	ldi	r25, 0x40	; 64
     288:	0e 94 8e 0c 	call	0x191c	; 0x191c <_ZN4leds4initEv>
     28c:	e2 cf       	rjmp	.-60     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
     28e:	91 11       	cpse	r25, r1
     290:	e3 cf       	rjmp	.-58     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     292:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <g_long_leftsense_press>
     296:	81 11       	cpse	r24, r1
     298:	df cf       	rjmp	.-66     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     29a:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     29e:	88 23       	and	r24, r24
     2a0:	d9 f2       	breq	.-74     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     2a2:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <g_leftsense_closed_time>
     2a6:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <g_leftsense_closed_time+0x1>
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	80 93 5c 40 	sts	0x405C, r24	; 0x80405c <g_leftsense_closed_time>
     2b0:	90 93 5d 40 	sts	0x405D, r25	; 0x80405d <g_leftsense_closed_time+0x1>
     2b4:	88 3c       	cpi	r24, 0xC8	; 200
     2b6:	91 05       	cpc	r25, r1
     2b8:	78 f2       	brcs	.-98     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 4b 40 	sts	0x404B, r24	; 0x80404b <g_long_leftsense_press>
     2c0:	10 92 5c 40 	sts	0x405C, r1	; 0x80405c <g_leftsense_closed_time>
     2c4:	10 92 5d 40 	sts	0x405D, r1	; 0x80405d <g_leftsense_closed_time+0x1>
     2c8:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_leftsense_presses_count>
     2cc:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_leftsense_presses_count+0x1>
     2d0:	10 92 08 40 	sts	0x4008, r1	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     2d4:	c1 cf       	rjmp	.-126    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
     2d6:	10 92 07 40 	sts	0x4007, r1	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     2da:	10 c0       	rjmp	.+32     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     2dc:	88 e4       	ldi	r24, 0x48	; 72
     2de:	90 e4       	ldi	r25, 0x40	; 64
     2e0:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     2e4:	88 23       	and	r24, r24
     2e6:	09 f1       	breq	.+66     	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
     2e8:	10 92 5a 40 	sts	0x405A, r1	; 0x80405a <g_rightsense_closed_time>
     2ec:	10 92 5b 40 	sts	0x405B, r1	; 0x80405b <g_rightsense_closed_time+0x1>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 33 40 	sts	0x4033, r24	; 0x804033 <_ZZ11__vector_12E18rightsenseReleased>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     2fc:	14 70       	andi	r17, 0x04	; 4
     2fe:	09 f4       	brne	.+2      	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
     300:	ca c0       	rjmp	.+404    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     302:	dd 23       	and	r29, r29
     304:	f1 f1       	breq	.+124    	; 0x382 <__EEPROM_REGION_LENGTH__+0x182>
     306:	88 e4       	ldi	r24, 0x48	; 72
     308:	90 e4       	ldi	r25, 0x40	; 64
     30a:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     30e:	88 23       	and	r24, r24
     310:	a9 f1       	breq	.+106    	; 0x37c <__EEPROM_REGION_LENGTH__+0x17c>
     312:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     316:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	80 93 4c 40 	sts	0x404C, r24	; 0x80404c <g_encoder_presses_count>
     320:	90 93 4d 40 	sts	0x404D, r25	; 0x80404d <g_encoder_presses_count+0x1>
     324:	10 92 32 40 	sts	0x4032, r1	; 0x804032 <__data_end>
     328:	3d c0       	rjmp	.+122    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     32a:	88 e4       	ldi	r24, 0x48	; 72
     32c:	90 e4       	ldi	r25, 0x40	; 64
     32e:	0e 94 8e 0c 	call	0x191c	; 0x191c <_ZN4leds4initEv>
     332:	e1 cf       	rjmp	.-62     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
     334:	01 11       	cpse	r16, r1
     336:	e2 cf       	rjmp	.-60     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     338:	80 91 4a 40 	lds	r24, 0x404A	; 0x80404a <g_long_rightsense_press>
     33c:	81 11       	cpse	r24, r1
     33e:	de cf       	rjmp	.-68     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     340:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     344:	88 23       	and	r24, r24
     346:	d1 f2       	breq	.-76     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     348:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <g_rightsense_closed_time>
     34c:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <g_rightsense_closed_time+0x1>
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	80 93 5a 40 	sts	0x405A, r24	; 0x80405a <g_rightsense_closed_time>
     356:	90 93 5b 40 	sts	0x405B, r25	; 0x80405b <g_rightsense_closed_time+0x1>
     35a:	88 3c       	cpi	r24, 0xC8	; 200
     35c:	91 05       	cpc	r25, r1
     35e:	70 f2       	brcs	.-100    	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 4a 40 	sts	0x404A, r24	; 0x80404a <g_long_rightsense_press>
     366:	10 92 5a 40 	sts	0x405A, r1	; 0x80405a <g_rightsense_closed_time>
     36a:	10 92 5b 40 	sts	0x405B, r1	; 0x80405b <g_rightsense_closed_time+0x1>
     36e:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_rightsense_presses_count>
     372:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_rightsense_presses_count+0x1>
     376:	10 92 07 40 	sts	0x4007, r1	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     37a:	c0 cf       	rjmp	.-128    	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
     37c:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     380:	11 c0       	rjmp	.+34     	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     382:	88 e4       	ldi	r24, 0x48	; 72
     384:	90 e4       	ldi	r25, 0x40	; 64
     386:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN4leds6activeEv>
     38a:	88 23       	and	r24, r24
     38c:	09 f4       	brne	.+2      	; 0x390 <__EEPROM_REGION_LENGTH__+0x190>
     38e:	7e c0       	rjmp	.+252    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     390:	10 92 58 40 	sts	0x4058, r1	; 0x804058 <g_encoder_closed_time>
     394:	10 92 59 40 	sts	0x4059, r1	; 0x804059 <g_encoder_closed_time+0x1>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <__data_end>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     3a4:	80 91 39 40 	lds	r24, 0x4039	; 0x804039 <_ZZ11__vector_12E31leftsense_closures_count_period>
     3a8:	90 91 3a 40 	lds	r25, 0x403A	; 0x80403a <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     3b0:	98 c0       	rjmp	.+304    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	80 93 39 40 	sts	0x4039, r24	; 0x804039 <_ZZ11__vector_12E31leftsense_closures_count_period>
     3b8:	90 93 3a 40 	sts	0x403A, r25	; 0x80403a <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     3bc:	89 2b       	or	r24, r25
     3be:	c1 f4       	brne	.+48     	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     3c0:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     3c4:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     3c8:	89 2b       	or	r24, r25
     3ca:	71 f0       	breq	.+28     	; 0x3e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     3cc:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     3d0:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     3d4:	03 97       	sbiw	r24, 0x03	; 3
     3d6:	40 f4       	brcc	.+16     	; 0x3e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     3d8:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     3dc:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     3e0:	80 93 56 40 	sts	0x4056, r24	; 0x804056 <g_handle_counted_leftsense_presses>
     3e4:	90 93 57 40 	sts	0x4057, r25	; 0x804057 <g_handle_counted_leftsense_presses+0x1>
     3e8:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_leftsense_presses_count>
     3ec:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_leftsense_presses_count+0x1>
     3f0:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <_ZZ11__vector_12E32rightsense_closures_count_period>
     3f4:	90 91 38 40 	lds	r25, 0x4038	; 0x804038 <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	09 f4       	brne	.+2      	; 0x3fe <__EEPROM_REGION_LENGTH__+0x1fe>
     3fc:	8f c0       	rjmp	.+286    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <_ZZ11__vector_12E32rightsense_closures_count_period>
     404:	90 93 38 40 	sts	0x4038, r25	; 0x804038 <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     408:	89 2b       	or	r24, r25
     40a:	c1 f4       	brne	.+48     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     40c:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     410:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     414:	89 2b       	or	r24, r25
     416:	71 f0       	breq	.+28     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     418:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     41c:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     420:	03 97       	sbiw	r24, 0x03	; 3
     422:	40 f4       	brcc	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     424:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     428:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     42c:	80 93 54 40 	sts	0x4054, r24	; 0x804054 <g_handle_counted_rightsense_presses>
     430:	90 93 55 40 	sts	0x4055, r25	; 0x804055 <g_handle_counted_rightsense_presses+0x1>
     434:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_rightsense_presses_count>
     438:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_rightsense_presses_count+0x1>
     43c:	80 91 35 40 	lds	r24, 0x4035	; 0x804035 <_ZZ11__vector_12E29encoder_closures_count_period>
     440:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     444:	00 97       	sbiw	r24, 0x00	; 0
     446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	86 c0       	rjmp	.+268    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <_ZZ11__vector_12E29encoder_closures_count_period>
     450:	90 93 36 40 	sts	0x4036, r25	; 0x804036 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     454:	89 2b       	or	r24, r25
     456:	09 f0       	breq	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	b5 ce       	rjmp	.-662    	; 0x1c4 <__vector_12+0x58>
     45a:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     45e:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     462:	89 2b       	or	r24, r25
     464:	71 f0       	breq	.+28     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     466:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     46a:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     46e:	03 97       	sbiw	r24, 0x03	; 3
     470:	40 f4       	brcc	.+16     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     472:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     476:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     47a:	80 93 52 40 	sts	0x4052, r24	; 0x804052 <g_handle_counted_encoder_presses>
     47e:	90 93 53 40 	sts	0x4053, r25	; 0x804053 <g_handle_counted_encoder_presses+0x1>
     482:	10 92 4c 40 	sts	0x404C, r1	; 0x80404c <g_encoder_presses_count>
     486:	10 92 4d 40 	sts	0x404D, r1	; 0x80404d <g_encoder_presses_count+0x1>
     48a:	9c ce       	rjmp	.-712    	; 0x1c4 <__vector_12+0x58>
     48c:	88 e4       	ldi	r24, 0x48	; 72
     48e:	90 e4       	ldi	r25, 0x40	; 64
     490:	0e 94 8e 0c 	call	0x191c	; 0x191c <_ZN4leds4initEv>
     494:	84 cf       	rjmp	.-248    	; 0x39e <__EEPROM_REGION_LENGTH__+0x19e>
     496:	d1 11       	cpse	r29, r1
     498:	85 cf       	rjmp	.-246    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     49a:	80 91 49 40 	lds	r24, 0x4049	; 0x804049 <g_long_encoder_press>
     49e:	81 11       	cpse	r24, r1
     4a0:	81 cf       	rjmp	.-254    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     4a2:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	7c cf       	rjmp	.-264    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     4ac:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <g_encoder_closed_time>
     4b0:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <g_encoder_closed_time+0x1>
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <g_encoder_closed_time>
     4ba:	90 93 59 40 	sts	0x4059, r25	; 0x804059 <g_encoder_closed_time+0x1>
     4be:	88 3c       	cpi	r24, 0xC8	; 200
     4c0:	91 05       	cpc	r25, r1
     4c2:	08 f4       	brcc	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	6f cf       	rjmp	.-290    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 49 40 	sts	0x4049, r24	; 0x804049 <g_long_encoder_press>
     4cc:	10 92 58 40 	sts	0x4058, r1	; 0x804058 <g_encoder_closed_time>
     4d0:	10 92 59 40 	sts	0x4059, r1	; 0x804059 <g_encoder_closed_time+0x1>
     4d4:	10 92 4c 40 	sts	0x404C, r1	; 0x80404c <g_encoder_presses_count>
     4d8:	10 92 4d 40 	sts	0x404D, r1	; 0x80404d <g_encoder_presses_count+0x1>
     4dc:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     4e0:	61 cf       	rjmp	.-318    	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     4e2:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     4e6:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	61 f0       	breq	.+24     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     4ee:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_leftsense_presses_count>
     4f2:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_leftsense_presses_count+0x1>
     4f6:	03 97       	sbiw	r24, 0x03	; 3
     4f8:	08 f4       	brcc	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	7a cf       	rjmp	.-268    	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     4fc:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_leftsense_presses_count>
     500:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_leftsense_presses_count+0x1>
     504:	75 cf       	rjmp	.-278    	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     506:	80 91 34 40 	lds	r24, 0x4034	; 0x804034 <_ZZ11__vector_12E17leftsenseReleased>
     50a:	88 23       	and	r24, r24
     50c:	81 f3       	breq	.-32     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     50e:	82 e3       	ldi	r24, 0x32	; 50
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	80 93 39 40 	sts	0x4039, r24	; 0x804039 <_ZZ11__vector_12E31leftsense_closures_count_period>
     516:	90 93 3a 40 	sts	0x403A, r25	; 0x80403a <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     51a:	6a cf       	rjmp	.-300    	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     51c:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     520:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	61 f0       	breq	.+24     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     528:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_rightsense_presses_count>
     52c:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_rightsense_presses_count+0x1>
     530:	03 97       	sbiw	r24, 0x03	; 3
     532:	08 f4       	brcc	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     534:	83 cf       	rjmp	.-250    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     536:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_rightsense_presses_count>
     53a:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_rightsense_presses_count+0x1>
     53e:	7e cf       	rjmp	.-260    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     540:	80 91 33 40 	lds	r24, 0x4033	; 0x804033 <_ZZ11__vector_12E18rightsenseReleased>
     544:	88 23       	and	r24, r24
     546:	81 f3       	breq	.-32     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     548:	82 e3       	ldi	r24, 0x32	; 50
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <_ZZ11__vector_12E32rightsense_closures_count_period>
     550:	90 93 38 40 	sts	0x4038, r25	; 0x804038 <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     554:	73 cf       	rjmp	.-282    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     556:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     55a:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	61 f0       	breq	.+24     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     562:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_encoder_presses_count>
     566:	90 91 4d 40 	lds	r25, 0x404D	; 0x80404d <g_encoder_presses_count+0x1>
     56a:	03 97       	sbiw	r24, 0x03	; 3
     56c:	08 f4       	brcc	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	2a ce       	rjmp	.-940    	; 0x1c4 <__vector_12+0x58>
     570:	10 92 4c 40 	sts	0x404C, r1	; 0x80404c <g_encoder_presses_count>
     574:	10 92 4d 40 	sts	0x404D, r1	; 0x80404d <g_encoder_presses_count+0x1>
     578:	25 ce       	rjmp	.-950    	; 0x1c4 <__vector_12+0x58>
     57a:	80 91 32 40 	lds	r24, 0x4032	; 0x804032 <__data_end>
     57e:	88 23       	and	r24, r24
     580:	81 f3       	breq	.-32     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     582:	82 e3       	ldi	r24, 0x32	; 50
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <_ZZ11__vector_12E29encoder_closures_count_period>
     58a:	90 93 36 40 	sts	0x4036, r25	; 0x804036 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     58e:	1a ce       	rjmp	.-972    	; 0x1c4 <__vector_12+0x58>
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	83 30       	cpi	r24, 0x03	; 3
     594:	91 05       	cpc	r25, r1
     596:	01 f1       	breq	.+64     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     598:	fc 01       	movw	r30, r24
     59a:	dc 01       	movw	r26, r24
     59c:	aa 0f       	add	r26, r26
     59e:	bb 1f       	adc	r27, r27
     5a0:	a6 5f       	subi	r26, 0xF6	; 246
     5a2:	bf 4b       	sbci	r27, 0xBF	; 191
     5a4:	4d 91       	ld	r20, X+
     5a6:	5c 91       	ld	r21, X
     5a8:	45 2b       	or	r20, r21
     5aa:	61 f0       	breq	.+24     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5ac:	dc 01       	movw	r26, r24
     5ae:	aa 0f       	add	r26, r26
     5b0:	bb 1f       	adc	r27, r27
     5b2:	a6 5f       	subi	r26, 0xF6	; 246
     5b4:	bf 4b       	sbci	r27, 0xBF	; 191
     5b6:	4d 91       	ld	r20, X+
     5b8:	5c 91       	ld	r21, X
     5ba:	11 97       	sbiw	r26, 0x01	; 1
     5bc:	41 50       	subi	r20, 0x01	; 1
     5be:	51 09       	sbc	r21, r1
     5c0:	4d 93       	st	X+, r20
     5c2:	5c 93       	st	X, r21
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e6 5f       	subi	r30, 0xF6	; 246
     5ca:	ff 4b       	sbci	r31, 0xBF	; 191
     5cc:	40 81       	ld	r20, Z
     5ce:	51 81       	ldd	r21, Z+1	; 0x01
     5d0:	45 2b       	or	r20, r21
     5d2:	f1 f6       	brne	.-68     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     5d4:	28 2f       	mov	r18, r24
     5d6:	dc cf       	rjmp	.-72     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     5d8:	20 93 3b 40 	sts	0x403B, r18	; 0x80403b <_ZZ11__vector_12E24indexConversionInProcess>
     5dc:	22 23       	and	r18, r18
     5de:	d4 f4       	brge	.+52     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti
     614:	82 2f       	mov	r24, r18
     616:	88 0f       	add	r24, r24
     618:	99 0b       	sbc	r25, r25
     61a:	fc 01       	movw	r30, r24
     61c:	eb 5d       	subi	r30, 0xDB	; 219
     61e:	ff 4b       	sbci	r31, 0xBF	; 191
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
     624:	fc 01       	movw	r30, r24
     626:	e6 5f       	subi	r30, 0xF6	; 246
     628:	ff 4b       	sbci	r31, 0xBF	; 191
     62a:	20 83       	st	Z, r18
     62c:	31 83       	std	Z+1, r19	; 0x01
     62e:	85 5d       	subi	r24, 0xD5	; 213
     630:	9f 4b       	sbci	r25, 0xBF	; 191
     632:	dc 01       	movw	r26, r24
     634:	8d 91       	ld	r24, X+
     636:	9c 91       	ld	r25, X
     638:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
     63c:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z20ADC0_startConversionv>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 3c 40 	sts	0x403C, r24	; 0x80403c <_ZZ11__vector_12E19conversionInProcess>
     646:	cc cf       	rjmp	.-104    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     648:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z19ADC0_conversionDonev>
     64c:	88 23       	and	r24, r24
     64e:	41 f2       	breq	.-112    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     650:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9ADC0_readv>
     654:	9c 01       	movw	r18, r24
     656:	2b 50       	subi	r18, 0x0B	; 11
     658:	31 09       	sbc	r19, r1
     65a:	2f 3e       	cpi	r18, 0xEF	; 239
     65c:	3f 40       	sbci	r19, 0x0F	; 15
     65e:	b0 f4       	brcc	.+44     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     660:	20 91 3b 40 	lds	r18, 0x403B	; 0x80403b <_ZZ11__vector_12E24indexConversionInProcess>
     664:	02 2e       	mov	r0, r18
     666:	00 0c       	add	r0, r0
     668:	33 0b       	sbc	r19, r19
     66a:	f9 01       	movw	r30, r18
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	e2 5a       	subi	r30, 0xA2	; 162
     672:	ff 4b       	sbci	r31, 0xBF	; 191
     674:	40 81       	ld	r20, Z
     676:	51 81       	ldd	r21, Z+1	; 0x01
     678:	2c 59       	subi	r18, 0x9C	; 156
     67a:	3f 4b       	sbci	r19, 0xBF	; 191
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	d9 01       	movw	r26, r18
     680:	4c 93       	st	X, r20
     682:	80 83       	st	Z, r24
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	10 92 3c 40 	sts	0x403C, r1	; 0x80403c <_ZZ11__vector_12E19conversionInProcess>
     68a:	aa cf       	rjmp	.-172    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     68c:	e0 91 3b 40 	lds	r30, 0x403B	; 0x80403b <_ZZ11__vector_12E24indexConversionInProcess>
     690:	ee 0f       	add	r30, r30
     692:	ff 0b       	sbc	r31, r31
     694:	e2 5a       	subi	r30, 0xA2	; 162
     696:	ff 4b       	sbci	r31, 0xBF	; 191
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	f4 cf       	rjmp	.-24     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>

0000069e <__vector_6>:
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	8f 93       	push	r24
     6aa:	8f ef       	ldi	r24, 0xFF	; 255
     6ac:	83 b9       	out	0x03, r24	; 3
     6ae:	8f 91       	pop	r24
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <_Z11powerDown5Vv>:
     6ba:	0b 98       	cbi	0x01, 3	; 1
     6bc:	08 95       	ret

000006be <_Z9powerUp5Vv>:
     6be:	0b 9a       	sbi	0x01, 3	; 1
     6c0:	08 95       	ret

000006c2 <main>:
     6c2:	0e 94 a4 00 	call	0x148	; 0x148 <atmel_start_init>
     6c6:	60 e5       	ldi	r22, 0x50	; 80
     6c8:	79 e7       	ldi	r23, 0x79	; 121
     6ca:	86 e3       	ldi	r24, 0x36	; 54
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_Z13init_receiverm>
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f2 e2       	ldi	r31, 0x22	; 34
     6d6:	ef 2e       	mov	r14, r31
     6d8:	f0 e4       	ldi	r31, 0x40	; 64
     6da:	ff 2e       	mov	r15, r31
     6dc:	f0 2d       	mov	r31, r0
     6de:	0d e6       	ldi	r16, 0x6D	; 109
     6e0:	10 e4       	ldi	r17, 0x40	; 64
     6e2:	c0 e5       	ldi	r28, 0x50	; 80
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	0f 2e       	mov	r0, r31
     6e8:	fd ee       	ldi	r31, 0xED	; 237
     6ea:	cf 2e       	mov	r12, r31
     6ec:	d1 2c       	mov	r13, r1
     6ee:	f0 2d       	mov	r31, r0
     6f0:	72 c0       	rjmp	.+228    	; 0x7d6 <main+0x114>
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	65 e0       	ldi	r22, 0x05	; 5
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	88 e4       	ldi	r24, 0x48	; 72
     6fa:	90 e4       	ldi	r25, 0x40	; 64
     6fc:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN4leds5blinkE7Blink_tb>
     700:	7e c0       	rjmp	.+252    	; 0x7fe <main+0x13c>
     702:	66 e0       	ldi	r22, 0x06	; 6
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	88 e4       	ldi	r24, 0x48	; 72
     708:	90 e4       	ldi	r25, 0x40	; 64
     70a:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     70e:	77 c0       	rjmp	.+238    	; 0x7fe <main+0x13c>
     710:	68 e0       	ldi	r22, 0x08	; 8
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	88 e4       	ldi	r24, 0x48	; 72
     716:	90 e4       	ldi	r25, 0x40	; 64
     718:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     71c:	67 e0       	ldi	r22, 0x07	; 7
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	88 e4       	ldi	r24, 0x48	; 72
     722:	90 e4       	ldi	r25, 0x40	; 64
     724:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     728:	76 c0       	rjmp	.+236    	; 0x816 <main+0x154>
     72a:	10 92 4b 40 	sts	0x404B, r1	; 0x80404b <g_long_leftsense_press>
     72e:	68 e0       	ldi	r22, 0x08	; 8
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	88 e4       	ldi	r24, 0x48	; 72
     734:	90 e4       	ldi	r25, 0x40	; 64
     736:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN4leds4initE7Blink_t>
     73a:	71 c0       	rjmp	.+226    	; 0x81e <main+0x15c>
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	63 e0       	ldi	r22, 0x03	; 3
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	88 e4       	ldi	r24, 0x48	; 72
     744:	90 e4       	ldi	r25, 0x40	; 64
     746:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN4leds5blinkE7Blink_tb>
     74a:	7d c0       	rjmp	.+250    	; 0x846 <main+0x184>
     74c:	64 e0       	ldi	r22, 0x04	; 4
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	88 e4       	ldi	r24, 0x48	; 72
     752:	90 e4       	ldi	r25, 0x40	; 64
     754:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     758:	76 c0       	rjmp	.+236    	; 0x846 <main+0x184>
     75a:	68 e0       	ldi	r22, 0x08	; 8
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	88 e4       	ldi	r24, 0x48	; 72
     760:	90 e4       	ldi	r25, 0x40	; 64
     762:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     766:	67 e0       	ldi	r22, 0x07	; 7
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	88 e4       	ldi	r24, 0x48	; 72
     76c:	90 e4       	ldi	r25, 0x40	; 64
     76e:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     772:	75 c0       	rjmp	.+234    	; 0x85e <main+0x19c>
     774:	10 92 4a 40 	sts	0x404A, r1	; 0x80404a <g_long_rightsense_press>
     778:	68 e0       	ldi	r22, 0x08	; 8
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	88 e4       	ldi	r24, 0x48	; 72
     77e:	90 e4       	ldi	r25, 0x40	; 64
     780:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN4leds4initE7Blink_t>
     784:	70 c0       	rjmp	.+224    	; 0x866 <main+0x1a4>
     786:	6b e0       	ldi	r22, 0x0B	; 11
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	88 e4       	ldi	r24, 0x48	; 72
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     792:	10 92 52 40 	sts	0x4052, r1	; 0x804052 <g_handle_counted_encoder_presses>
     796:	10 92 53 40 	sts	0x4053, r1	; 0x804053 <g_handle_counted_encoder_presses+0x1>
     79a:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <g_encoder_closed_time>
     79e:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <g_encoder_closed_time+0x1>
     7a2:	88 3e       	cpi	r24, 0xE8	; 232
     7a4:	93 40       	sbci	r25, 0x03	; 3
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <main+0xe8>
     7a8:	7a c0       	rjmp	.+244    	; 0x89e <main+0x1dc>
     7aa:	80 91 49 40 	lds	r24, 0x4049	; 0x804049 <g_long_encoder_press>
     7ae:	81 11       	cpse	r24, r1
     7b0:	83 c0       	rjmp	.+262    	; 0x8b8 <main+0x1f6>
     7b2:	80 91 6b 40 	lds	r24, 0x406B	; 0x80406b <_ZL17g_last_error_code>
     7b6:	90 91 6c 40 	lds	r25, 0x406C	; 0x80406c <_ZL17g_last_error_code+0x1>
     7ba:	89 2b       	or	r24, r25
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <main+0xfe>
     7be:	85 c0       	rjmp	.+266    	; 0x8ca <main+0x208>
     7c0:	80 91 69 40 	lds	r24, 0x4069	; 0x804069 <_ZL18g_last_status_code>
     7c4:	90 91 6a 40 	lds	r25, 0x406A	; 0x80406a <_ZL18g_last_status_code+0x1>
     7c8:	89 2b       	or	r24, r25
     7ca:	09 f0       	breq	.+2      	; 0x7ce <main+0x10c>
     7cc:	95 c0       	rjmp	.+298    	; 0x8f8 <main+0x236>
     7ce:	80 91 68 40 	lds	r24, 0x4068	; 0x804068 <_ZL17g_go_to_sleep_now>
     7d2:	81 11       	cpse	r24, r1
     7d4:	a8 c0       	rjmp	.+336    	; 0x926 <main+0x264>
     7d6:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_leftsense_presses>
     7da:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_leftsense_presses+0x1>
     7de:	89 2b       	or	r24, r25
     7e0:	91 f0       	breq	.+36     	; 0x806 <main+0x144>
     7e2:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_leftsense_presses>
     7e6:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_leftsense_presses+0x1>
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <main+0x12e>
     7ee:	81 cf       	rjmp	.-254    	; 0x6f2 <main+0x30>
     7f0:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_leftsense_presses>
     7f4:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_leftsense_presses+0x1>
     7f8:	02 97       	sbiw	r24, 0x02	; 2
     7fa:	09 f4       	brne	.+2      	; 0x7fe <main+0x13c>
     7fc:	82 cf       	rjmp	.-252    	; 0x702 <main+0x40>
     7fe:	10 92 56 40 	sts	0x4056, r1	; 0x804056 <g_handle_counted_leftsense_presses>
     802:	10 92 57 40 	sts	0x4057, r1	; 0x804057 <g_handle_counted_leftsense_presses+0x1>
     806:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <g_leftsense_closed_time>
     80a:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <g_leftsense_closed_time+0x1>
     80e:	88 3e       	cpi	r24, 0xE8	; 232
     810:	93 40       	sbci	r25, 0x03	; 3
     812:	08 f0       	brcs	.+2      	; 0x816 <main+0x154>
     814:	7d cf       	rjmp	.-262    	; 0x710 <main+0x4e>
     816:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <g_long_leftsense_press>
     81a:	81 11       	cpse	r24, r1
     81c:	86 cf       	rjmp	.-244    	; 0x72a <main+0x68>
     81e:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_rightsense_presses>
     822:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_rightsense_presses+0x1>
     826:	89 2b       	or	r24, r25
     828:	91 f0       	breq	.+36     	; 0x84e <main+0x18c>
     82a:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_rightsense_presses>
     82e:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_rightsense_presses+0x1>
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	09 f4       	brne	.+2      	; 0x838 <main+0x176>
     836:	82 cf       	rjmp	.-252    	; 0x73c <main+0x7a>
     838:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_rightsense_presses>
     83c:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_rightsense_presses+0x1>
     840:	02 97       	sbiw	r24, 0x02	; 2
     842:	09 f4       	brne	.+2      	; 0x846 <main+0x184>
     844:	83 cf       	rjmp	.-250    	; 0x74c <main+0x8a>
     846:	10 92 54 40 	sts	0x4054, r1	; 0x804054 <g_handle_counted_rightsense_presses>
     84a:	10 92 55 40 	sts	0x4055, r1	; 0x804055 <g_handle_counted_rightsense_presses+0x1>
     84e:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <g_rightsense_closed_time>
     852:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <g_rightsense_closed_time+0x1>
     856:	88 3e       	cpi	r24, 0xE8	; 232
     858:	93 40       	sbci	r25, 0x03	; 3
     85a:	08 f0       	brcs	.+2      	; 0x85e <main+0x19c>
     85c:	7e cf       	rjmp	.-260    	; 0x75a <main+0x98>
     85e:	80 91 4a 40 	lds	r24, 0x404A	; 0x80404a <g_long_rightsense_press>
     862:	81 11       	cpse	r24, r1
     864:	87 cf       	rjmp	.-242    	; 0x774 <main+0xb2>
     866:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_handle_counted_encoder_presses>
     86a:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_handle_counted_encoder_presses+0x1>
     86e:	89 2b       	or	r24, r25
     870:	09 f4       	brne	.+2      	; 0x874 <main+0x1b2>
     872:	93 cf       	rjmp	.-218    	; 0x79a <main+0xd8>
     874:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_handle_counted_encoder_presses>
     878:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_handle_counted_encoder_presses+0x1>
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	09 f4       	brne	.+2      	; 0x882 <main+0x1c0>
     880:	82 cf       	rjmp	.-252    	; 0x786 <main+0xc4>
     882:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_handle_counted_encoder_presses>
     886:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_handle_counted_encoder_presses+0x1>
     88a:	02 97       	sbiw	r24, 0x02	; 2
     88c:	09 f0       	breq	.+2      	; 0x890 <main+0x1ce>
     88e:	81 cf       	rjmp	.-254    	; 0x792 <main+0xd0>
     890:	6c e0       	ldi	r22, 0x0C	; 12
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	88 e4       	ldi	r24, 0x48	; 72
     896:	90 e4       	ldi	r25, 0x40	; 64
     898:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     89c:	7a cf       	rjmp	.-268    	; 0x792 <main+0xd0>
     89e:	68 e0       	ldi	r22, 0x08	; 8
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	88 e4       	ldi	r24, 0x48	; 72
     8a4:	90 e4       	ldi	r25, 0x40	; 64
     8a6:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     8aa:	67 e0       	ldi	r22, 0x07	; 7
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	88 e4       	ldi	r24, 0x48	; 72
     8b0:	90 e4       	ldi	r25, 0x40	; 64
     8b2:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
     8b6:	79 cf       	rjmp	.-270    	; 0x7aa <main+0xe8>
     8b8:	10 92 49 40 	sts	0x4049, r1	; 0x804049 <g_long_encoder_press>
     8bc:	68 e0       	ldi	r22, 0x08	; 8
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	88 e4       	ldi	r24, 0x48	; 72
     8c2:	90 e4       	ldi	r25, 0x40	; 64
     8c4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN4leds4initE7Blink_t>
     8c8:	74 cf       	rjmp	.-280    	; 0x7b2 <main+0xf0>
     8ca:	80 91 6b 40 	lds	r24, 0x406B	; 0x80406b <_ZL17g_last_error_code>
     8ce:	90 91 6c 40 	lds	r25, 0x406C	; 0x80406c <_ZL17g_last_error_code+0x1>
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	ff 92       	push	r15
     8d8:	ef 92       	push	r14
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <sprintf>
     8e2:	10 92 6b 40 	sts	0x406B, r1	; 0x80406b <_ZL17g_last_error_code>
     8e6:	10 92 6c 40 	sts	0x406C, r1	; 0x80406c <_ZL17g_last_error_code+0x1>
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	64 cf       	rjmp	.-312    	; 0x7c0 <main+0xfe>
     8f8:	80 91 69 40 	lds	r24, 0x4069	; 0x804069 <_ZL18g_last_status_code>
     8fc:	90 91 6a 40 	lds	r25, 0x406A	; 0x80406a <_ZL18g_last_status_code+0x1>
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	ff 92       	push	r15
     906:	ef 92       	push	r14
     908:	1f 93       	push	r17
     90a:	0f 93       	push	r16
     90c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <sprintf>
     910:	10 92 69 40 	sts	0x4069, r1	; 0x804069 <_ZL18g_last_status_code>
     914:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <_ZL18g_last_status_code+0x1>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	54 cf       	rjmp	.-344    	; 0x7ce <main+0x10c>
     926:	88 e4       	ldi	r24, 0x48	; 72
     928:	90 e4       	ldi	r25, 0x40	; 64
     92a:	0e 94 18 0a 	call	0x1430	; 0x1430 <_ZN4leds10deactivateEv>
     92e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z11powerDown5Vv>
     932:	0e 94 85 07 	call	0xf0a	; 0xf0a <system_sleep_settings>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 9d 13 	call	0x273a	; 0x273a <SLPCTRL_set_sleep_mode>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 67 40 	sts	0x4067, r24	; 0x804067 <_ZL10g_sleeping>
     944:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <_ZL12g_awakenedBy>
     948:	10 92 11 40 	sts	0x4011, r1	; 0x804011 <_ZL12g_awakenedBy+0x1>
     94c:	80 91 68 40 	lds	r24, 0x4068	; 0x804068 <_ZL17g_go_to_sleep_now>
     950:	88 23       	and	r24, r24
     952:	89 f0       	breq	.+34     	; 0x976 <main+0x2b4>
     954:	88 81       	ld	r24, Y
     956:	89 7f       	andi	r24, 0xF9	; 249
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	88 83       	st	Y, r24
     95c:	f8 94       	cli
     95e:	88 81       	ld	r24, Y
     960:	81 60       	ori	r24, 0x01	; 1
     962:	88 83       	st	Y, r24
     964:	78 94       	sei
     966:	88 95       	sleep
     968:	88 81       	ld	r24, Y
     96a:	8e 7f       	andi	r24, 0xFE	; 254
     96c:	88 83       	st	Y, r24
     96e:	80 91 68 40 	lds	r24, 0x4068	; 0x804068 <_ZL17g_go_to_sleep_now>
     972:	81 11       	cpse	r24, r1
     974:	ef cf       	rjmp	.-34     	; 0x954 <main+0x292>
     976:	10 92 67 40 	sts	0x4067, r1	; 0x804067 <_ZL10g_sleeping>
     97a:	0e 94 a4 00 	call	0x148	; 0x148 <atmel_start_init>
     97e:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z9powerUp5Vv>
     982:	0e 94 19 15 	call	0x2a32	; 0x2a32 <_Z13init_receiverv>
     986:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <_ZL12g_awakenedBy>
     98a:	90 91 11 40 	lds	r25, 0x4011	; 0x804011 <_ZL12g_awakenedBy+0x1>
     98e:	c0 92 69 40 	sts	0x4069, r12	; 0x804069 <_ZL18g_last_status_code>
     992:	d0 92 6a 40 	sts	0x406A, r13	; 0x80406a <_ZL18g_last_status_code+0x1>
     996:	1f cf       	rjmp	.-450    	; 0x7d6 <main+0x114>

00000998 <_GLOBAL__sub_I_g_antenna_connect_state>:

volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
     998:	88 e4       	ldi	r24, 0x48	; 72
     99a:	90 e4       	ldi	r25, 0x40	; 64
     99c:	0e 94 ef 08 	call	0x11de	; 0x11de <_ZN4ledsC1Ev>
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);
     9a0:	64 e6       	ldi	r22, 0x64	; 100
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	8e e3       	ldi	r24, 0x3E	; 62
     9a6:	90 e4       	ldi	r25, 0x40	; 64
     9a8:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN18CircularStringBuffC1Ej>

EepromManager g_ee_mgr;
     9ac:	8d e3       	ldi	r24, 0x3D	; 61
     9ae:	90 e4       	ldi	r25, 0x40	; 64
     9b0:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN13EepromManagerC1Ev>

  // Write new null terminator character
  end[1] = '\0';

  return str;
     9b4:	08 95       	ret

000009b6 <_GLOBAL__sub_D_g_antenna_connect_state>:
Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);

EepromManager g_ee_mgr;
     9b6:	8d e3       	ldi	r24, 0x3D	; 61
     9b8:	90 e4       	ldi	r25, 0x40	; 64
     9ba:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN13EepromManagerD1Ev>
volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);
     9be:	8e e3       	ldi	r24, 0x3E	; 62
     9c0:	90 e4       	ldi	r25, 0x40	; 64
     9c2:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN18CircularStringBuffD1Ev>

volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
     9c6:	88 e4       	ldi	r24, 0x48	; 72
     9c8:	90 e4       	ldi	r25, 0x40	; 64
     9ca:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN4ledsD1Ev>

  // Write new null terminator character
  end[1] = '\0';

  return str;
     9ce:	08 95       	ret

000009d0 <_ZL16ADC0_SYSTEM_initb>:
{
	uint16_t sigrow_offset = SIGROW.TEMPSENSE1; // Read unsigned value from signature row
	uint16_t sigrow_slope = SIGROW.TEMPSENSE0; // Read unsigned value from signature row
	static uint32_t wait = 10000;
	uint16_t adc_reading;
	int16_t temperature_in_C = -273.15;
     9d0:	e0 e6       	ldi	r30, 0x60	; 96
     9d2:	f4 e0       	ldi	r31, 0x04	; 4
     9d4:	92 89       	ldd	r25, Z+18	; 0x12
     9d6:	98 7f       	andi	r25, 0xF8	; 248
     9d8:	92 8b       	std	Z+18, r25	; 0x12
     9da:	92 89       	ldd	r25, Z+18	; 0x12
     9dc:	94 60       	ori	r25, 0x04	; 4
     9de:	92 8b       	std	Z+18, r25	; 0x12
     9e0:	93 89       	ldd	r25, Z+19	; 0x13
     9e2:	98 7f       	andi	r25, 0xF8	; 248
     9e4:	93 8b       	std	Z+19, r25	; 0x13
     9e6:	93 89       	ldd	r25, Z+19	; 0x13
     9e8:	94 60       	ori	r25, 0x04	; 4
     9ea:	93 8b       	std	Z+19, r25	; 0x13
     9ec:	94 89       	ldd	r25, Z+20	; 0x14
     9ee:	98 7f       	andi	r25, 0xF8	; 248
     9f0:	94 8b       	std	Z+20, r25	; 0x14
     9f2:	94 89       	ldd	r25, Z+20	; 0x14
     9f4:	94 60       	ori	r25, 0x04	; 4
     9f6:	94 8b       	std	Z+20, r25	; 0x14
     9f8:	95 89       	ldd	r25, Z+21	; 0x15
     9fa:	98 7f       	andi	r25, 0xF8	; 248
     9fc:	95 8b       	std	Z+21, r25	; 0x15
     9fe:	95 89       	ldd	r25, Z+21	; 0x15
     a00:	94 60       	ori	r25, 0x04	; 4
     a02:	95 8b       	std	Z+21, r25	; 0x15
     a04:	92 89       	ldd	r25, Z+18	; 0x12
     a06:	97 7f       	andi	r25, 0xF7	; 247
     a08:	92 8b       	std	Z+18, r25	; 0x12
     a0a:	93 89       	ldd	r25, Z+19	; 0x13
     a0c:	97 7f       	andi	r25, 0xF7	; 247
     a0e:	93 8b       	std	Z+19, r25	; 0x13
     a10:	94 89       	ldd	r25, Z+20	; 0x14
     a12:	97 7f       	andi	r25, 0xF7	; 247
     a14:	94 8b       	std	Z+20, r25	; 0x14
     a16:	95 89       	ldd	r25, Z+21	; 0x15
     a18:	97 7f       	andi	r25, 0xF7	; 247
     a1a:	95 8b       	std	Z+21, r25	; 0x15
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     a22:	9a e0       	ldi	r25, 0x0A	; 10
     a24:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
     a28:	81 11       	cpse	r24, r1
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <_ZL16ADC0_SYSTEM_initb+0x74>
     a2c:	e0 e0       	ldi	r30, 0x00	; 0
     a2e:	f6 e0       	ldi	r31, 0x06	; 6
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 83       	st	Z, r24
     a34:	14 86       	std	Z+12, r1	; 0x0c
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	80 93 d1 40 	sts	0x40D1, r24	; 0x8040d1 <_ZL20g_adc_initialization>
     a3e:	90 93 d2 40 	sts	0x40D2, r25	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     a42:	08 95       	ret
     a44:	e0 e0       	ldi	r30, 0x00	; 0
     a46:	f6 e0       	ldi	r31, 0x06	; 6
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	80 83       	st	Z, r24
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	84 87       	std	Z+12, r24	; 0x0c
     a50:	82 87       	std	Z+10, r24	; 0x0a
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	80 93 d1 40 	sts	0x40D1, r24	; 0x8040d1 <_ZL20g_adc_initialization>
     a5a:	90 93 d2 40 	sts	0x40D2, r25	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     a5e:	08 95       	ret

00000a60 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
     a60:	89 30       	cpi	r24, 0x09	; 9
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x8>
     a66:	75 c0       	rjmp	.+234    	; 0xb52 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xf2>
     a68:	fc 01       	movw	r30, r24
     a6a:	e7 5c       	subi	r30, 0xC7	; 199
     a6c:	fa 4f       	sbci	r31, 0xFA	; 250
     a6e:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__tablejump2__>
     a72:	42 05       	cpc	r20, r2
     a74:	4e 05       	cpc	r20, r14
     a76:	5b 05       	cpc	r21, r11
     a78:	68 05       	cpc	r22, r8
     a7a:	75 05       	cpc	r23, r5
     a7c:	82 05       	cpc	r24, r2
     a7e:	a9 05       	cpc	r26, r9
     a80:	8f 05       	cpc	r24, r15
     a82:	9c 05       	cpc	r25, r12
     a84:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     a88:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	19 f0       	breq	.+6      	; 0xa96 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     a96:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     a9a:	08 95       	ret
     a9c:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     aa0:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	19 f0       	breq	.+6      	; 0xaae <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x4e>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     ab4:	08 95       	ret
     ab6:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     aba:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	19 f0       	breq	.+6      	; 0xac8 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x68>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     ace:	08 95       	ret
     ad0:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     ad4:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	19 f0       	breq	.+6      	; 0xae2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x82>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     ae8:	08 95       	ret
     aea:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     aee:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     af2:	02 97       	sbiw	r24, 0x02	; 2
     af4:	19 f0       	breq	.+6      	; 0xafc <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x9c>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b02:	08 95       	ret
     b04:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     b08:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     b0c:	02 97       	sbiw	r24, 0x02	; 2
     b0e:	19 f0       	breq	.+6      	; 0xb16 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xb6>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b1c:	08 95       	ret
     b1e:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     b22:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     b26:	02 97       	sbiw	r24, 0x02	; 2
     b28:	19 f0       	breq	.+6      	; 0xb30 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xd0>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b36:	08 95       	ret
     b38:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     b3c:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     b40:	02 97       	sbiw	r24, 0x02	; 2
     b42:	19 f0       	breq	.+6      	; 0xb4a <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xea>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZL16ADC0_SYSTEM_initb>
     b4a:	82 e4       	ldi	r24, 0x42	; 66
     b4c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b50:	08 95       	ret
     b52:	e0 e0       	ldi	r30, 0x00	; 0
     b54:	f6 e0       	ldi	r31, 0x06	; 6
     b56:	14 86       	std	Z+12, r1	; 0x0c
     b58:	10 82       	st	Z, r1
     b5a:	10 92 d1 40 	sts	0x40D1, r1	; 0x8040d1 <_ZL20g_adc_initialization>
     b5e:	10 92 d2 40 	sts	0x40D2, r1	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     b62:	08 95       	ret

00000b64 <_Z20ADC0_startConversionv>:
     b64:	80 91 d1 40 	lds	r24, 0x40D1	; 0x8040d1 <_ZL20g_adc_initialization>
     b68:	90 91 d2 40 	lds	r25, 0x40D2	; 0x8040d2 <_ZL20g_adc_initialization+0x1>
     b6c:	89 2b       	or	r24, r25
     b6e:	29 f0       	breq	.+10     	; 0xb7a <_Z20ADC0_startConversionv+0x16>
     b70:	e0 e0       	ldi	r30, 0x00	; 0
     b72:	f6 e0       	ldi	r31, 0x06	; 6
     b74:	14 86       	std	Z+12, r1	; 0x0c
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	82 87       	std	Z+10, r24	; 0x0a
     b7a:	08 95       	ret

00000b7c <_Z19ADC0_conversionDonev>:
     b7c:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
     b80:	81 70       	andi	r24, 0x01	; 1
     b82:	08 95       	ret

00000b84 <_Z9ADC0_readv>:
     b84:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     b88:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
     b8c:	08 95       	ret

00000b8e <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialization = ADC_NOT_INITIALIZED;
}

ISR(ADC0_RESRDY_vect)
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	0b b6       	in	r0, 0x3b	; 59
     b9a:	0f 92       	push	r0
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}

int ADC0_read(void)
{
	return ADC0.RES; 	/* Reading the result also clears the interrupt flag */
     bb4:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     bb8:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
ISR(ADC0_RESRDY_vect)
{
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
     bbc:	83 ed       	ldi	r24, 0xD3	; 211
     bbe:	90 e4       	ldi	r25, 0x40	; 64
     bc0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN8Goertzel9DataPointEi>
     bc4:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
     bc6:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <_GLOBAL__sub_I_g_adcVal>:
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
	
#define FREE_RUNNING true
#define SINGLE_CONVERSION false
	
volatile int16_t g_adcVal;
Goertzel g_goertzel(N, sampling_freq);
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	10 e4       	ldi	r17, 0x40	; 64
     bf8:	2c eb       	ldi	r18, 0xBC	; 188
     bfa:	36 e4       	ldi	r19, 0x46	; 70
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	69 e4       	ldi	r22, 0x49	; 73
     c02:	73 e4       	ldi	r23, 0x43	; 67
     c04:	83 ed       	ldi	r24, 0xD3	; 211
     c06:	90 e4       	ldi	r25, 0x40	; 64
     c08:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN8GoertzelC1Eff>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
	}
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <_GLOBAL__sub_D_g_adcVal>:
	
#define FREE_RUNNING true
#define SINGLE_CONVERSION false
	
volatile int16_t g_adcVal;
Goertzel g_goertzel(N, sampling_freq);
     c12:	83 ed       	ldi	r24, 0xD3	; 211
     c14:	90 e4       	ldi	r25, 0x40	; 64
     c16:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN8GoertzelD1Ev>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
	}
     c1a:	08 95       	ret

00000c1c <_Z8debouncev>:
}

uint8_t portFdebouncedVals(void)
{
	return portFdebounced;
}
     c1c:	e6 ed       	ldi	r30, 0xD6	; 214
     c1e:	f0 e4       	ldi	r31, 0x40	; 64
     c20:	21 81       	ldd	r18, Z+1	; 0x01
     c22:	22 83       	std	Z+2, r18	; 0x02
     c24:	30 81       	ld	r19, Z
     c26:	31 83       	std	Z+1, r19	; 0x01
     c28:	a9 ed       	ldi	r26, 0xD9	; 217
     c2a:	b0 e4       	ldi	r27, 0x40	; 64
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	5c 91       	ld	r21, X
     c30:	11 97       	sbiw	r26, 0x01	; 1
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	5c 93       	st	X, r21
     c36:	12 97       	sbiw	r26, 0x02	; 2
     c38:	6c 91       	ld	r22, X
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	6c 93       	st	X, r22
     c3e:	11 97       	sbiw	r26, 0x01	; 1
     c40:	92 b1       	in	r25, 0x02	; 2
     c42:	9c 93       	st	X, r25
     c44:	86 b3       	in	r24, 0x16	; 22
     c46:	80 83       	st	Z, r24
     c48:	40 91 d5 40 	lds	r20, 0x40D5	; 0x8040d5 <portAdebounced>
     c4c:	94 27       	eor	r25, r20
     c4e:	64 27       	eor	r22, r20
     c50:	96 23       	and	r25, r22
     c52:	54 27       	eor	r21, r20
     c54:	95 23       	and	r25, r21
     c56:	94 27       	eor	r25, r20
     c58:	90 93 d5 40 	sts	0x40D5, r25	; 0x8040d5 <portAdebounced>
     c5c:	90 91 d4 40 	lds	r25, 0x40D4	; 0x8040d4 <portFdebounced>
     c60:	89 27       	eor	r24, r25
     c62:	39 27       	eor	r19, r25
     c64:	83 23       	and	r24, r19
     c66:	29 27       	eor	r18, r25
     c68:	82 23       	and	r24, r18
     c6a:	89 27       	eor	r24, r25
     c6c:	80 93 d4 40 	sts	0x40D4, r24	; 0x8040d4 <portFdebounced>
     c70:	08 95       	ret

00000c72 <_Z18portAdebouncedValsv>:
     c72:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <portAdebounced>
     c76:	08 95       	ret

00000c78 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c78:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     c7a:	e0 e1       	ldi	r30, 0x10	; 16
     c7c:	f4 e0       	ldi	r31, 0x04	; 4
     c7e:	80 81       	ld	r24, Z
     c80:	88 60       	ori	r24, 0x08	; 8
     c82:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c84:	01 98       	cbi	0x00, 1	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     c86:	e1 e1       	ldi	r30, 0x11	; 17
     c88:	f4 e0       	ldi	r31, 0x04	; 4
     c8a:	80 81       	ld	r24, Z
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c90:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     c92:	e2 e1       	ldi	r30, 0x12	; 18
     c94:	f4 e0       	ldi	r31, 0x04	; 4
     c96:	80 81       	ld	r24, Z
     c98:	88 60       	ori	r24, 0x08	; 8
     c9a:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     c9c:	03 9a       	sbi	0x00, 3	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     c9e:	0b 9a       	sbi	0x01, 3	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ca0:	04 98       	cbi	0x00, 4	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     ca2:	e4 e1       	ldi	r30, 0x14	; 20
     ca4:	f4 e0       	ldi	r31, 0x04	; 4
     ca6:	80 81       	ld	r24, Z
     ca8:	88 60       	ori	r24, 0x08	; 8
     caa:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cac:	05 9a       	sbi	0x00, 5	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     cae:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cb0:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     cb2:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cb4:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     cb6:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     cb8:	24 9a       	sbi	0x04, 4	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     cba:	2c 9a       	sbi	0x05, 4	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     cbc:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     cbe:	e2 e5       	ldi	r30, 0x52	; 82
     cc0:	f4 e0       	ldi	r31, 0x04	; 4
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     cc8:	43 98       	cbi	0x08, 3	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f4 e0       	ldi	r31, 0x04	; 4
     cce:	80 81       	ld	r24, Z
     cd0:	88 60       	ori	r24, 0x08	; 8
     cd2:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     cd4:	44 9a       	sbi	0x08, 4	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     cd6:	4c 9a       	sbi	0x09, 4	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     cd8:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     cda:	4d 9a       	sbi	0x09, 5	; 9
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     cdc:	e0 e9       	ldi	r30, 0x90	; 144
     cde:	f4 e0       	ldi	r31, 0x04	; 4
     ce0:	80 81       	ld	r24, Z
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	80 83       	st	Z, r24
     ce6:	e1 e9       	ldi	r30, 0x91	; 145
     ce8:	f4 e0       	ldi	r31, 0x04	; 4
     cea:	80 81       	ld	r24, Z
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	80 83       	st	Z, r24
     cf0:	e2 e9       	ldi	r30, 0x92	; 146
     cf2:	f4 e0       	ldi	r31, 0x04	; 4
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     cfa:	83 9a       	sbi	0x10, 3	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     cfc:	8b 98       	cbi	0x11, 3	; 17
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     cfe:	e0 eb       	ldi	r30, 0xB0	; 176
     d00:	f4 e0       	ldi	r31, 0x04	; 4
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	80 83       	st	Z, r24
     d08:	e1 eb       	ldi	r30, 0xB1	; 177
     d0a:	f4 e0       	ldi	r31, 0x04	; 4
     d0c:	80 81       	ld	r24, Z
     d0e:	88 60       	ori	r24, 0x08	; 8
     d10:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     d12:	a2 9a       	sbi	0x14, 2	; 20
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     d14:	aa 9a       	sbi	0x15, 2	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     d16:	a3 98       	cbi	0x14, 3	; 20
     d18:	a4 98       	cbi	0x14, 4	; 20
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     d1a:	a5 9a       	sbi	0x14, 5	; 20
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     d1c:	ad 9a       	sbi	0x15, 5	; 21
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     d1e:	e6 eb       	ldi	r30, 0xB6	; 182
     d20:	f4 e0       	ldi	r31, 0x04	; 4
     d22:	80 81       	ld	r24, Z
     d24:	88 60       	ori	r24, 0x08	; 8
     d26:	80 83       	st	Z, r24
	PORTF_set_pin_dir(6, PORT_DIR_OFF); /* Unused */
	
	/* PORT Pin Interrupts */
// 	PORTA.PIN2CTRL = 0x0A; /* Enable RTC SQW 1-sec interrupts */
// 	PORTD.PIN1CTRL = 0x09; /* Enable antenna change interrupts */
}
     d28:	08 95       	ret

00000d2a <_Z11BINIO_sleepv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d2a:	00 98       	cbi	0x00, 0	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     d2c:	e0 e1       	ldi	r30, 0x10	; 16
     d2e:	f4 e0       	ldi	r31, 0x04	; 4
     d30:	80 81       	ld	r24, Z
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d36:	01 98       	cbi	0x00, 1	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     d38:	e1 e1       	ldi	r30, 0x11	; 17
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	80 81       	ld	r24, Z
     d3e:	87 7f       	andi	r24, 0xF7	; 247
     d40:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d42:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     d44:	e2 e1       	ldi	r30, 0x12	; 18
     d46:	f4 e0       	ldi	r31, 0x04	; 4
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d4e:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d50:	0b 98       	cbi	0x01, 3	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d52:	04 98       	cbi	0x00, 4	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     d54:	e4 e1       	ldi	r30, 0x14	; 20
     d56:	f4 e0       	ldi	r31, 0x04	; 4
     d58:	80 81       	ld	r24, Z
     d5a:	87 7f       	andi	r24, 0xF7	; 247
     d5c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d5e:	05 9a       	sbi	0x00, 5	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d60:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d62:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d64:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d66:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     d68:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     d6a:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     d6c:	2c 98       	cbi	0x05, 4	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     d6e:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d70:	e2 e5       	ldi	r30, 0x52	; 82
     d72:	f4 e0       	ldi	r31, 0x04	; 4
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     d7a:	43 98       	cbi	0x08, 3	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     d86:	44 9a       	sbi	0x08, 4	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     d88:	4c 98       	cbi	0x09, 4	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     d8a:	45 9a       	sbi	0x08, 5	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     d8c:	4d 98       	cbi	0x09, 5	; 9
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     d8e:	e0 e9       	ldi	r30, 0x90	; 144
     d90:	f4 e0       	ldi	r31, 0x04	; 4
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	80 83       	st	Z, r24
     d98:	e1 e9       	ldi	r30, 0x91	; 145
     d9a:	f4 e0       	ldi	r31, 0x04	; 4
     d9c:	80 81       	ld	r24, Z
     d9e:	88 60       	ori	r24, 0x08	; 8
     da0:	80 83       	st	Z, r24
     da2:	e2 e9       	ldi	r30, 0x92	; 146
     da4:	f4 e0       	ldi	r31, 0x04	; 4
     da6:	80 81       	ld	r24, Z
     da8:	88 60       	ori	r24, 0x08	; 8
     daa:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     dac:	83 9a       	sbi	0x10, 3	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     dae:	8b 98       	cbi	0x11, 3	; 17
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     db0:	e0 eb       	ldi	r30, 0xB0	; 176
     db2:	f4 e0       	ldi	r31, 0x04	; 4
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 83       	st	Z, r24
     dba:	e1 eb       	ldi	r30, 0xB1	; 177
     dbc:	f4 e0       	ldi	r31, 0x04	; 4
     dbe:	80 81       	ld	r24, Z
     dc0:	88 60       	ori	r24, 0x08	; 8
     dc2:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     dc4:	a2 9a       	sbi	0x14, 2	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     dc6:	aa 98       	cbi	0x15, 2	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     dc8:	a3 98       	cbi	0x14, 3	; 20
     dca:	a4 98       	cbi	0x14, 4	; 20
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     dcc:	a5 9a       	sbi	0x14, 5	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     dce:	ad 98       	cbi	0x15, 5	; 21
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     dd0:	e6 eb       	ldi	r30, 0xB6	; 182
     dd2:	f4 e0       	ldi	r31, 0x04	; 4
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	80 83       	st	Z, r24
	PORTF_set_pin_dir(6, PORT_DIR_OFF); /* Unused */
	
	/* PORT Pin Interrupts */
	// 	PORTA.PIN2CTRL = 0x0A; /* Enable RTC SQW 1-sec interrupts */
	// 	PORTD.PIN1CTRL = 0x09; /* Enable antenna change interrupts */
}
     dda:	08 95       	ret

00000ddc <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     ddc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret

00000de4 <_ZN18CircularStringBuffC1Ej>:
**********************************************************************************************/
#include "CircularStringBuff.h"
#include <stdlib.h>
#include <ctype.h>

CircularStringBuff::CircularStringBuff(size_t size)
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
     dee:	8b 01       	movw	r16, r22
{
  buf_ = (char*)malloc(size);
     df0:	cb 01       	movw	r24, r22
     df2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <malloc>
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	9e 83       	std	Y+6, r25	; 0x06
  max_size_ = size;
     dfa:	0f 83       	std	Y+7, r16	; 0x07
     dfc:	18 87       	std	Y+8, r17	; 0x08
  head_ = 0;
     dfe:	18 82       	st	Y, r1
     e00:	19 82       	std	Y+1, r1	; 0x01
  tail_ = 0;
     e02:	1a 82       	std	Y+2, r1	; 0x02
     e04:	1b 82       	std	Y+3, r1	; 0x03
  full_ = false;
     e06:	1c 82       	std	Y+4, r1	; 0x04
  busy_ = false;
     e08:	19 86       	std	Y+9, r1	; 0x09
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <_ZN18CircularStringBuffD1Ev>:

CircularStringBuff::~CircularStringBuff() {
	free(buf_);
     e14:	fc 01       	movw	r30, r24
     e16:	85 81       	ldd	r24, Z+5	; 0x05
     e18:	96 81       	ldd	r25, Z+6	; 0x06
     e1a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <free>
}
     e1e:	08 95       	ret

00000e20 <_ZN18CircularStringBuff5resetEv>:


void CircularStringBuff::reset()
{
     e20:	fc 01       	movw	r30, r24
  head_ = tail_;
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	80 83       	st	Z, r24
     e28:	91 83       	std	Z+1, r25	; 0x01
  full_ = false;
     e2a:	14 82       	std	Z+4, r1	; 0x04
  busy_ = false;
     e2c:	11 86       	std	Z+9, r1	; 0x09
}
     e2e:	08 95       	ret

00000e30 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     e30:	44 e2       	ldi	r20, 0x24	; 36
     e32:	68 ed       	ldi	r22, 0xD8	; 216
     e34:	88 e6       	ldi	r24, 0x68	; 104
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 93 0c 	call	0x1926	; 0x1926 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	08 95       	ret

00000e40 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     e40:	78 94       	sei

	return 0;
}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret

00000e46 <_Z9DAC0_initv>:

static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_VDD_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.500V Internal Voltage Reference for DAC */
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     e4c:	6a e0       	ldi	r22, 0x0A	; 10
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <util_delay_ms>
     e58:	81 11       	cpse	r24, r1
     e5a:	f8 cf       	rjmp	.-16     	; 0xe4c <_Z9DAC0_initv+0x6>
void DAC0_init(void)
{
	VREF_init();
	
    /* Disable digital input buffer */
    PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     e5c:	e0 e6       	ldi	r30, 0x60	; 96
     e5e:	f4 e0       	ldi	r31, 0x04	; 4
     e60:	86 89       	ldd	r24, Z+22	; 0x16
     e62:	88 7f       	andi	r24, 0xF8	; 248
     e64:	86 8b       	std	Z+22, r24	; 0x16
    PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     e66:	86 89       	ldd	r24, Z+22	; 0x16
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	86 8b       	std	Z+22, r24	; 0x16
    /* Disable pull-up resistor */
    PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;   
     e6c:	86 89       	ldd	r24, Z+22	; 0x16
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	86 8b       	std	Z+22, r24	; 0x16
    DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
     e72:	81 ec       	ldi	r24, 0xC1	; 193
     e74:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
// 	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
// 	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
// 	| DAC_OUTEN_bm;           /* Enable output buffer */
// 	
// 	DAC0_setVal(DAC_DEFAULT_VALUE);
}
     e78:	08 95       	ret

00000e7a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     e7a:	e0 e1       	ldi	r30, 0x10	; 16
     e7c:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     e84:	e8 31       	cpi	r30, 0x18	; 24
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	f8 07       	cpc	r31, r24
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <mcu_init+0x4>
     e8c:	e0 e3       	ldi	r30, 0x30	; 48
     e8e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     e90:	80 81       	ld	r24, Z
     e92:	88 60       	ori	r24, 0x08	; 8
     e94:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     e96:	e8 33       	cpi	r30, 0x38	; 56
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	f8 07       	cpc	r31, r24
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <mcu_init+0x16>
     e9e:	e0 e5       	ldi	r30, 0x50	; 80
     ea0:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ea8:	e8 35       	cpi	r30, 0x58	; 88
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	f8 07       	cpc	r31, r24
     eae:	c9 f7       	brne	.-14     	; 0xea2 <mcu_init+0x28>
     eb0:	e0 e7       	ldi	r30, 0x70	; 112
     eb2:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     eb4:	80 81       	ld	r24, Z
     eb6:	88 60       	ori	r24, 0x08	; 8
     eb8:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     eba:	e8 37       	cpi	r30, 0x78	; 120
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	f8 07       	cpc	r31, r24
     ec0:	c9 f7       	brne	.-14     	; 0xeb4 <mcu_init+0x3a>
     ec2:	e0 e9       	ldi	r30, 0x90	; 144
     ec4:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ec6:	80 81       	ld	r24, Z
     ec8:	88 60       	ori	r24, 0x08	; 8
     eca:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ecc:	e8 39       	cpi	r30, 0x98	; 152
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	f8 07       	cpc	r31, r24
     ed2:	c9 f7       	brne	.-14     	; 0xec6 <mcu_init+0x4c>
     ed4:	e0 eb       	ldi	r30, 0xB0	; 176
     ed6:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ed8:	80 81       	ld	r24, Z
     eda:	88 60       	ori	r24, 0x08	; 8
     edc:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ede:	e8 3b       	cpi	r30, 0xB8	; 184
     ee0:	84 e0       	ldi	r24, 0x04	; 4
     ee2:	f8 07       	cpc	r31, r24
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     ee6:	08 95       	ret

00000ee8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     ee8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     eec:	0e 94 18 07 	call	0xe30	; 0xe30 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     ef0:	0e 94 a5 13 	call	0x274a	; 0x274a <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     ef4:	0e 94 20 07 	call	0xe40	; 0xe40 <CPUINT_init>
	BINIO_init();
     ef8:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z10BINIO_initv>
// 	LED_set_RED_dir(PORT_DIR_OUT);
// 	LED_set_RED_level(OFF);
// 	LED_set_GREEN_dir(PORT_DIR_OUT);
// 	LED_set_GREEN_level(OFF);

	SLPCTRL_init();
     efc:	0e 94 99 13 	call	0x2732	; 0x2732 <SLPCTRL_init>
	
	DAC0_init();
     f00:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z9DAC0_initv>

	BOD_init();
     f04:	0e 94 ee 06 	call	0xddc	; 0xddc <BOD_init>
}
     f08:	08 95       	ret

00000f0a <system_sleep_settings>:

void system_sleep_settings()
{
	mcu_init();
     f0a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mcu_init>

//	CLKCTRL_init(); /* Set CPU clock speed appropriately */
	TIMERB_sleep(); /* Timers must be initialized before utility_delay functions will work */
     f0e:	0e 94 c3 14 	call	0x2986	; 0x2986 <TIMERB_sleep>
//	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
	BINIO_sleep();
     f12:	0e 94 95 06 	call	0xd2a	; 0xd2a <_Z11BINIO_sleepv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     f16:	46 9a       	sbi	0x08, 6	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     f18:	4e 98       	cbi	0x09, 6	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     f1a:	45 9a       	sbi	0x08, 5	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     f1c:	4d 98       	cbi	0x09, 5	; 9
	LED_set_RED_dir(PORT_DIR_OUT);
	LED_set_RED_level(OFF);
	LED_set_GREEN_dir(PORT_DIR_OUT);
	LED_set_GREEN_level(OFF);

}
     f1e:	08 95       	ret

00000f20 <_ZN13EepromManagerC1Ev>:
extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
{
}   /*EepromManager */
     f20:	08 95       	ret

00000f22 <_ZN13EepromManagerD1Ev>:

/* default destructor */
EepromManager::~EepromManager()
{
}   /*~EepromManager */
     f22:	08 95       	ret

00000f24 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	6a 01       	movw	r12, r20
     f32:	7b 01       	movw	r14, r22
     f34:	00 93 e3 40 	sts	0x40E3, r16	; 0x8040e3 <_SAMPLING_FREQUENCY>
     f38:	10 93 e4 40 	sts	0x40E4, r17	; 0x8040e4 <_SAMPLING_FREQUENCY+0x1>
     f3c:	20 93 e5 40 	sts	0x40E5, r18	; 0x8040e5 <_SAMPLING_FREQUENCY+0x2>
     f40:	30 93 e6 40 	sts	0x40E6, r19	; 0x8040e6 <_SAMPLING_FREQUENCY+0x3>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	41 e5       	ldi	r20, 0x51	; 81
     f4a:	53 e4       	ldi	r21, 0x43	; 67
     f4c:	cb 01       	movw	r24, r22
     f4e:	b6 01       	movw	r22, r12
     f50:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__gesf2>
     f54:	18 16       	cp	r1, r24
     f56:	9c f0       	brlt	.+38     	; 0xf7e <_ZN8GoertzelC1Eff+0x5a>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	48 ec       	ldi	r20, 0xC8	; 200
     f5e:	52 e4       	ldi	r21, 0x42	; 66
     f60:	c7 01       	movw	r24, r14
     f62:	b6 01       	movw	r22, r12
     f64:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__cmpsf2>
     f68:	88 23       	and	r24, r24
     f6a:	8c f4       	brge	.+34     	; 0xf8e <_ZN8GoertzelC1Eff+0x6a>
     f6c:	0f 2e       	mov	r0, r31
     f6e:	c1 2c       	mov	r12, r1
     f70:	d1 2c       	mov	r13, r1
     f72:	f8 ec       	ldi	r31, 0xC8	; 200
     f74:	ef 2e       	mov	r14, r31
     f76:	f2 e4       	ldi	r31, 0x42	; 66
     f78:	ff 2e       	mov	r15, r31
     f7a:	f0 2d       	mov	r31, r0
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <_ZN8GoertzelC1Eff+0x6a>
     f7e:	0f 2e       	mov	r0, r31
     f80:	c1 2c       	mov	r12, r1
     f82:	d1 2c       	mov	r13, r1
     f84:	f1 e5       	ldi	r31, 0x51	; 81
     f86:	ef 2e       	mov	r14, r31
     f88:	f3 e4       	ldi	r31, 0x43	; 67
     f8a:	ff 2e       	mov	r15, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	c7 01       	movw	r24, r14
     f90:	b6 01       	movw	r22, r12
     f92:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__fixsfsi>
     f96:	60 93 e1 40 	sts	0x40E1, r22	; 0x8040e1 <_N>
     f9a:	70 93 e2 40 	sts	0x40E2, r23	; 0x8040e2 <_N+0x1>
     f9e:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <_N>
     fa2:	90 91 e2 40 	lds	r25, 0x40E2	; 0x8040e2 <_N+0x1>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <malloc>
     fae:	80 93 dc 40 	sts	0x40DC, r24	; 0x8040dc <testData>
     fb2:	90 93 dd 40 	sts	0x40DD, r25	; 0x8040dd <testData+0x1>
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	08 95       	ret

00000fc4 <_ZN8GoertzelD1Ev>:
     fc4:	80 91 dc 40 	lds	r24, 0x40DC	; 0x8040dc <testData>
     fc8:	90 91 dd 40 	lds	r25, 0x40DD	; 0x8040dd <testData+0x1>
     fcc:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <free>
     fd0:	08 95       	ret

00000fd2 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     fd2:	80 91 de 40 	lds	r24, 0x40DE	; 0x8040de <_samplesReady>
     fd6:	81 11       	cpse	r24, r1
     fd8:	2c c0       	rjmp	.+88     	; 0x1032 <_ZN8Goertzel9DataPointEi+0x60>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     fda:	80 91 df 40 	lds	r24, 0x40DF	; 0x8040df <_index>
     fde:	90 91 e0 40 	lds	r25, 0x40E0	; 0x8040e0 <_index+0x1>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	e0 91 dc 40 	lds	r30, 0x40DC	; 0x8040dc <testData>
     fea:	f0 91 dd 40 	lds	r31, 0x40DD	; 0x8040dd <testData+0x1>
     fee:	e8 0f       	add	r30, r24
     ff0:	f9 1f       	adc	r31, r25
     ff2:	60 83       	st	Z, r22
     ff4:	71 83       	std	Z+1, r23	; 0x01
	_index++;
     ff6:	80 91 df 40 	lds	r24, 0x40DF	; 0x8040df <_index>
     ffa:	90 91 e0 40 	lds	r25, 0x40E0	; 0x8040e0 <_index+0x1>
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	80 93 df 40 	sts	0x40DF, r24	; 0x8040df <_index>
    1004:	90 93 e0 40 	sts	0x40E0, r25	; 0x8040e0 <_index+0x1>
	if(_index >= _N)
    1008:	20 91 df 40 	lds	r18, 0x40DF	; 0x8040df <_index>
    100c:	30 91 e0 40 	lds	r19, 0x40E0	; 0x8040e0 <_index+0x1>
    1010:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <_N>
    1014:	90 91 e2 40 	lds	r25, 0x40E2	; 0x8040e2 <_N+0x1>
    1018:	28 17       	cp	r18, r24
    101a:	39 07       	cpc	r19, r25
    101c:	3c f0       	brlt	.+14     	; 0x102c <_ZN8Goertzel9DataPointEi+0x5a>
	{
		_index = 0;
    101e:	10 92 df 40 	sts	0x40DF, r1	; 0x8040df <_index>
    1022:	10 92 e0 40 	sts	0x40E0, r1	; 0x8040e0 <_index+0x1>
		_samplesReady = true;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 de 40 	sts	0x40DE, r24	; 0x8040de <_samplesReady>
	}

	return(_samplesReady);
    102c:	80 91 de 40 	lds	r24, 0x40DE	; 0x8040de <_samplesReady>
}
    1030:	08 95       	ret

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
	{
		return(_samplesReady);
    1032:	80 91 de 40 	lds	r24, 0x40DE	; 0x8040de <_samplesReady>
    1036:	08 95       	ret

00001038 <_ZL11i2c_0_WaitWv>:
void I2C_0_Shutdown(void)
{
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
	TWI0.MCTRLA = 0;
}
    1038:	82 e3       	ldi	r24, 0x32	; 50
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_i2c0_timeout_ticks>
    1040:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    1044:	e0 e0       	ldi	r30, 0x00	; 0
    1046:	f9 e0       	ldi	r31, 0x09	; 9
    1048:	85 81       	ldd	r24, Z+5	; 0x05
    104a:	80 7c       	andi	r24, 0xC0	; 192
    104c:	59 f4       	brne	.+22     	; 0x1064 <_ZL11i2c_0_WaitWv+0x2c>
    104e:	85 81       	ldd	r24, Z+5	; 0x05
    1050:	8c 70       	andi	r24, 0x0C	; 12
    1052:	81 f4       	brne	.+32     	; 0x1074 <_ZL11i2c_0_WaitWv+0x3c>
    1054:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    1058:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    105c:	89 2b       	or	r24, r25
    105e:	a1 f7       	brne	.-24     	; 0x1048 <_ZL11i2c_0_WaitWv+0x10>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <_ZL11i2c_0_WaitWv+0x3e>
    1064:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1068:	84 ff       	sbrs	r24, 4
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <_ZL11i2c_0_WaitWv+0x38>
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <_ZL11i2c_0_WaitWv+0x3e>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <_ZL11i2c_0_WaitWv+0x3e>
    1074:	84 e0       	ldi	r24, 0x04	; 4
    1076:	20 91 14 40 	lds	r18, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    107a:	30 91 15 40 	lds	r19, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    107e:	23 2b       	or	r18, r19
    1080:	09 f0       	breq	.+2      	; 0x1084 <_ZL11i2c_0_WaitWv+0x4c>
    1082:	08 95       	ret
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	fd cf       	rjmp	.-6      	; 0x1082 <_ZL11i2c_0_WaitWv+0x4a>

00001088 <I2C_0_Init>:

void I2C_0_Init(void)
{
	PORTMUX.TWIROUTEA &= 0x0A;
    1088:	e0 ee       	ldi	r30, 0xE0	; 224
    108a:	f5 e0       	ldi	r31, 0x05	; 5
    108c:	85 81       	ldd	r24, Z+5	; 0x05
    108e:	8a 70       	andi	r24, 0x0A	; 10
    1090:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    1092:	85 81       	ldd	r24, Z+5	; 0x05
    1094:	82 60       	ori	r24, 0x02	; 2
    1096:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
//	TWI0.MBAUD = TWI0_BAUD((I2C_SCL_FREQ), 0.3);
	TWI0.MBAUD = (uint8_t)TWI0_BAUD(I2C_SCL_FREQ, 0);
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f9 e0       	ldi	r31, 0x09	; 9
    109c:	83 e7       	ldi	r24, 0x73	; 115
    109e:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    10a4:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    10a6:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    10a8:	85 83       	std	Z+5, r24	; 0x05
	/* Select I2C pins PC2/PC3 */
}
    10aa:	08 95       	ret

000010ac <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	16 2f       	mov	r17, r22
    10bc:	ea 01       	movw	r28, r20
    10be:	f2 2e       	mov	r15, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    10c0:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    10c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	51 f0       	breq	.+20     	; 0x10e0 <I2C_0_SendData+0x34>
	{
		return retVal;
    10cc:	cf ef       	ldi	r28, 0xFF	; 255
			}
		}
	}
	
	return retVal;
}
    10ce:	8c 2f       	mov	r24, r28
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	08 95       	ret
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    10e0:	10 93 08 09 	sts	0x0908, r17	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    10e4:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	01 f5       	brne	.+64     	; 0x112c <I2C_0_SendData+0x80>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    10ec:	ff 20       	and	r15, r15
    10ee:	01 f1       	breq	.+64     	; 0x1130 <I2C_0_SendData+0x84>
    10f0:	20 97       	sbiw	r28, 0x00	; 0
    10f2:	b9 f0       	breq	.+46     	; 0x1122 <I2C_0_SendData+0x76>
    10f4:	8e 01       	movw	r16, r28
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
		{
			TWI0.MDATA = *pData;
    10f8:	0f 2e       	mov	r0, r31
    10fa:	c1 2c       	mov	r12, r1
    10fc:	f9 e0       	ldi	r31, 0x09	; 9
    10fe:	df 2e       	mov	r13, r31
    1100:	f0 2d       	mov	r31, r0
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    1102:	d3 e0       	ldi	r29, 0x03	; 3
	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
		{
			TWI0.MDATA = *pData;
    1104:	f8 01       	movw	r30, r16
    1106:	81 91       	ld	r24, Z+
    1108:	8f 01       	movw	r16, r30
    110a:	f6 01       	movw	r30, r12
    110c:	80 87       	std	Z+8, r24	; 0x08
			if(i2c_0_WaitW() == I2C_ACKED)
    110e:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	e1 f6       	brne	.-72     	; 0x10ce <I2C_0_SendData+0x22>
			{
				retVal++;
    1116:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
				if(!len) I2C_0_EndSession();
    1118:	fc 16       	cp	r15, r28
    111a:	29 f0       	breq	.+10     	; 0x1126 <I2C_0_SendData+0x7a>
	}

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    111c:	fc 12       	cpse	r15, r28
    111e:	f2 cf       	rjmp	.-28     	; 0x1104 <I2C_0_SendData+0x58>
    1120:	d6 cf       	rjmp	.-84     	; 0x10ce <I2C_0_SendData+0x22>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    1122:	c0 e0       	ldi	r28, 0x00	; 0
    1124:	d4 cf       	rjmp	.-88     	; 0x10ce <I2C_0_SendData+0x22>
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    1126:	f6 01       	movw	r30, r12
    1128:	d4 83       	std	Z+4, r29	; 0x04
    112a:	f8 cf       	rjmp	.-16     	; 0x111c <I2C_0_SendData+0x70>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    112c:	cf ef       	ldi	r28, 0xFF	; 255
    112e:	cf cf       	rjmp	.-98     	; 0x10ce <I2C_0_SendData+0x22>
	}

	retVal = 0;
    1130:	cf 2d       	mov	r28, r15
    1132:	cd cf       	rjmp	.-102    	; 0x10ce <I2C_0_SendData+0x22>

00001134 <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	c8 2f       	mov	r28, r24
    1140:	d6 2f       	mov	r29, r22
    1142:	7a 01       	movw	r14, r20
    1144:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    1146:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    114a:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	39 f0       	breq	.+14     	; 0x1160 <I2C_0_GetData+0x2c>
	{
		return retVal;
    1152:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	
	return retVal;
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    1160:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    1164:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	11 f0       	breq	.+4      	; 0x1170 <I2C_0_GetData+0x3c>
	{
		return retVal;
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	f2 cf       	rjmp	.-28     	; 0x1154 <I2C_0_GetData+0x20>
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    1170:	c1 60       	ori	r28, 0x01	; 1
    1172:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    1176:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZL11i2c_0_WaitWv>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	01 f5       	brne	.+64     	; 0x11be <I2C_0_GetData+0x8a>
	{
		return retVal;
	}
	
	retVal = 0;
    117e:	81 2f       	mov	r24, r17
	if((len != 0) && (pData !=null ))
    1180:	11 23       	and	r17, r17
    1182:	41 f3       	breq	.-48     	; 0x1154 <I2C_0_GetData+0x20>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}
	
	retVal = 0;
    1184:	80 e0       	ldi	r24, 0x00	; 0
	if((len != 0) && (pData !=null ))
    1186:	e1 14       	cp	r14, r1
    1188:	f1 04       	cpc	r15, r1
    118a:	21 f3       	breq	.-56     	; 0x1154 <I2C_0_GetData+0x20>
	{
		while(len--)
    118c:	6f ef       	ldi	r22, 0xFF	; 255
    118e:	61 0f       	add	r22, r17
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}
	
	retVal = 0;
    1190:	80 e0       	ldi	r24, 0x00	; 0

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 50;
    1192:	42 e3       	ldi	r20, 0x32	; 50
    1194:	50 e0       	ldi	r21, 0x00	; 0
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    1196:	e0 e0       	ldi	r30, 0x00	; 0
    1198:	f9 e0       	ldi	r31, 0x09	; 9
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    119a:	72 e0       	ldi	r23, 0x02	; 2

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 50;
    119c:	40 93 14 40 	sts	0x4014, r20	; 0x804014 <g_i2c0_timeout_ticks>
    11a0:	50 93 15 40 	sts	0x4015, r21	; 0x804015 <g_i2c0_timeout_ticks+0x1>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    11a4:	95 81       	ldd	r25, Z+5	; 0x05
    11a6:	90 7c       	andi	r25, 0xC0	; 192
    11a8:	61 f4       	brne	.+24     	; 0x11c2 <I2C_0_GetData+0x8e>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    11aa:	95 81       	ldd	r25, Z+5	; 0x05
    11ac:	9c 70       	andi	r25, 0x0C	; 12
    11ae:	91 f6       	brne	.-92     	; 0x1154 <I2C_0_GetData+0x20>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
    11b0:	20 91 14 40 	lds	r18, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    11b4:	30 91 15 40 	lds	r19, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    11b8:	23 2b       	or	r18, r19
    11ba:	a1 f7       	brne	.-24     	; 0x11a4 <I2C_0_GetData+0x70>
    11bc:	cb cf       	rjmp	.-106    	; 0x1154 <I2C_0_GetData+0x20>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	c9 cf       	rjmp	.-110    	; 0x1154 <I2C_0_GetData+0x20>
	{
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
    11c2:	90 85       	ldd	r25, Z+8	; 0x08
    11c4:	d7 01       	movw	r26, r14
    11c6:	9d 93       	st	X+, r25
    11c8:	7d 01       	movw	r14, r26
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    11ca:	68 13       	cpse	r22, r24
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <I2C_0_GetData+0xa4>
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    11d4:	81 2f       	mov	r24, r17
    11d6:	be cf       	rjmp	.-132    	; 0x1154 <I2C_0_GetData+0x20>
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    11d8:	74 83       	std	Z+4, r23	; 0x04
				retVal++;
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	df cf       	rjmp	.-66     	; 0x119c <I2C_0_GetData+0x68>

000011de <_ZN4ledsC1Ev>:
	while(!g_text_buff.full() && i<lenstr && i<TEXT_BUFF_SIZE)
	{
		g_text_buff.put(str[i++]);
	}
	
	timer_red_blink_inhibit = true; /* Prevent timer from controlling LED */
    11de:	08 95       	ret

000011e0 <_ZN4ledsD1Ev>:
    11e0:	08 95       	ret

000011e2 <__vector_41>:
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    11fa:	80 ff       	sbrs	r24, 0
    11fc:	8c c0       	rjmp	.+280    	; 0x1316 <__vector_41+0x134>
    11fe:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    1202:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1206:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    120a:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    120e:	89 2b       	or	r24, r25
    1210:	8a 2b       	or	r24, r26
    1212:	8b 2b       	or	r24, r27
    1214:	09 f1       	breq	.+66     	; 0x1258 <__vector_41+0x76>
    1216:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    121a:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    121e:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1222:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	a1 09       	sbc	r26, r1
    122a:	b1 09       	sbc	r27, r1
    122c:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    1230:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    1234:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    1238:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
    123c:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    1240:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1244:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1248:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    124c:	89 2b       	or	r24, r25
    124e:	8a 2b       	or	r24, r26
    1250:	8b 2b       	or	r24, r27
    1252:	11 f4       	brne	.+4      	; 0x1258 <__vector_41+0x76>
    1254:	4e 98       	cbi	0x09, 6	; 9
    1256:	4d 98       	cbi	0x09, 5	; 9
    1258:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    125c:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1260:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1264:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    1268:	89 2b       	or	r24, r25
    126a:	8a 2b       	or	r24, r26
    126c:	8b 2b       	or	r24, r27
    126e:	09 f4       	brne	.+2      	; 0x1272 <__vector_41+0x90>
    1270:	52 c0       	rjmp	.+164    	; 0x1316 <__vector_41+0x134>
    1272:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    1276:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    127a:	89 2b       	or	r24, r25
    127c:	19 f1       	breq	.+70     	; 0x12c4 <__vector_41+0xe2>
    127e:	80 91 fc 40 	lds	r24, 0x40FC	; 0x8040fc <_ZL23timer_red_blink_inhibit>
    1282:	81 11       	cpse	r24, r1
    1284:	1f c0       	rjmp	.+62     	; 0x12c4 <__vector_41+0xe2>
    1286:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    128a:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    128e:	02 97       	sbiw	r24, 0x02	; 2
    1290:	0c f4       	brge	.+2      	; 0x1294 <__vector_41+0xb2>
    1292:	4e c0       	rjmp	.+156    	; 0x1330 <__vector_41+0x14e>
    1294:	4e 9a       	sbi	0x09, 6	; 9
    1296:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    129a:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	80 93 eb 40 	sts	0x40EB, r24	; 0x8040eb <_ZL15red_blink_count>
    12a4:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL15red_blink_count+0x1>
    12a8:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    12ac:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <__vector_41+0xd4>
    12b4:	50 c0       	rjmp	.+160    	; 0x1356 <__vector_41+0x174>
    12b6:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    12ba:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__vector_41+0xe2>
    12c2:	64 c0       	rjmp	.+200    	; 0x138c <__vector_41+0x1aa>
    12c4:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    12c8:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    12cc:	89 2b       	or	r24, r25
    12ce:	19 f1       	breq	.+70     	; 0x1316 <__vector_41+0x134>
    12d0:	80 91 fb 40 	lds	r24, 0x40FB	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    12d4:	81 11       	cpse	r24, r1
    12d6:	1f c0       	rjmp	.+62     	; 0x1316 <__vector_41+0x134>
    12d8:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    12dc:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    12e0:	02 97       	sbiw	r24, 0x02	; 2
    12e2:	0c f4       	brge	.+2      	; 0x12e6 <__vector_41+0x104>
    12e4:	5c c0       	rjmp	.+184    	; 0x139e <__vector_41+0x1bc>
    12e6:	4d 9a       	sbi	0x09, 5	; 9
    12e8:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    12ec:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZL17green_blink_count>
    12f6:	90 93 ea 40 	sts	0x40EA, r25	; 0x8040ea <_ZL17green_blink_count+0x1>
    12fa:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    12fe:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	09 f4       	brne	.+2      	; 0x1308 <__vector_41+0x126>
    1306:	5e c0       	rjmp	.+188    	; 0x13c4 <__vector_41+0x1e2>
    1308:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    130c:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	09 f4       	brne	.+2      	; 0x1316 <__vector_41+0x134>
    1314:	72 c0       	rjmp	.+228    	; 0x13fa <__vector_41+0x218>
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    131c:	bf 91       	pop	r27
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
    1322:	8f 91       	pop	r24
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti
    1330:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    1334:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    1338:	8f 3f       	cpi	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	0c f0       	brlt	.+2      	; 0x1340 <__vector_41+0x15e>
    133e:	b4 cf       	rjmp	.-152    	; 0x12a8 <__vector_41+0xc6>
    1340:	4e 98       	cbi	0x09, 6	; 9
    1342:	80 91 eb 40 	lds	r24, 0x40EB	; 0x8040eb <_ZL15red_blink_count>
    1346:	90 91 ec 40 	lds	r25, 0x40EC	; 0x8040ec <_ZL15red_blink_count+0x1>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	80 93 eb 40 	sts	0x40EB, r24	; 0x8040eb <_ZL15red_blink_count>
    1350:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL15red_blink_count+0x1>
    1354:	a9 cf       	rjmp	.-174    	; 0x12a8 <__vector_41+0xc6>
    1356:	80 91 f1 40 	lds	r24, 0x40F1	; 0x8040f1 <_ZL20red_blink_off_period>
    135a:	90 91 f2 40 	lds	r25, 0x40F2	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
    135e:	89 2b       	or	r24, r25
    1360:	61 f0       	breq	.+24     	; 0x137a <__vector_41+0x198>
    1362:	80 91 f1 40 	lds	r24, 0x40F1	; 0x8040f1 <_ZL20red_blink_off_period>
    1366:	90 91 f2 40 	lds	r25, 0x40F2	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
    136a:	91 95       	neg	r25
    136c:	81 95       	neg	r24
    136e:	91 09       	sbc	r25, r1
    1370:	80 93 eb 40 	sts	0x40EB, r24	; 0x8040eb <_ZL15red_blink_count>
    1374:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL15red_blink_count+0x1>
    1378:	a5 cf       	rjmp	.-182    	; 0x12c4 <__vector_41+0xe2>
    137a:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    137e:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    1382:	80 93 eb 40 	sts	0x40EB, r24	; 0x8040eb <_ZL15red_blink_count>
    1386:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL15red_blink_count+0x1>
    138a:	9c cf       	rjmp	.-200    	; 0x12c4 <__vector_41+0xe2>
    138c:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    1390:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    1394:	80 93 eb 40 	sts	0x40EB, r24	; 0x8040eb <_ZL15red_blink_count>
    1398:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL15red_blink_count+0x1>
    139c:	93 cf       	rjmp	.-218    	; 0x12c4 <__vector_41+0xe2>
    139e:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    13a2:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    13a6:	8f 3f       	cpi	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	0c f0       	brlt	.+2      	; 0x13ae <__vector_41+0x1cc>
    13ac:	a6 cf       	rjmp	.-180    	; 0x12fa <__vector_41+0x118>
    13ae:	4d 98       	cbi	0x09, 5	; 9
    13b0:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZL17green_blink_count>
    13b4:	90 91 ea 40 	lds	r25, 0x40EA	; 0x8040ea <_ZL17green_blink_count+0x1>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZL17green_blink_count>
    13be:	90 93 ea 40 	sts	0x40EA, r25	; 0x8040ea <_ZL17green_blink_count+0x1>
    13c2:	9b cf       	rjmp	.-202    	; 0x12fa <__vector_41+0x118>
    13c4:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL22green_blink_off_period>
    13c8:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL22green_blink_off_period+0x1>
    13cc:	89 2b       	or	r24, r25
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <__vector_41+0x206>
    13d0:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL22green_blink_off_period>
    13d4:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL22green_blink_off_period+0x1>
    13d8:	91 95       	neg	r25
    13da:	81 95       	neg	r24
    13dc:	91 09       	sbc	r25, r1
    13de:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZL17green_blink_count>
    13e2:	90 93 ea 40 	sts	0x40EA, r25	; 0x8040ea <_ZL17green_blink_count+0x1>
    13e6:	97 cf       	rjmp	.-210    	; 0x1316 <__vector_41+0x134>
    13e8:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    13ec:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    13f0:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZL17green_blink_count>
    13f4:	90 93 ea 40 	sts	0x40EA, r25	; 0x8040ea <_ZL17green_blink_count+0x1>
    13f8:	8e cf       	rjmp	.-228    	; 0x1316 <__vector_41+0x134>
    13fa:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    13fe:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    1402:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZL17green_blink_count>
    1406:	90 93 ea 40 	sts	0x40EA, r25	; 0x8040ea <_ZL17green_blink_count+0x1>
    140a:	85 cf       	rjmp	.-246    	; 0x1316 <__vector_41+0x134>

0000140c <_ZN4leds6activeEv>:
    140c:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    1410:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1414:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1418:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    141c:	89 2b       	or	r24, r25
    141e:	8a 2b       	or	r24, r26
    1420:	8b 2b       	or	r24, r27
    1422:	21 f0       	breq	.+8      	; 0x142c <_ZN4leds6activeEv+0x20>
    1424:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	08 95       	ret
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret

00001430 <_ZN4leds10deactivateEv>:
    1430:	e0 e3       	ldi	r30, 0x30	; 48
    1432:	fb e0       	ldi	r31, 0x0B	; 11
    1434:	85 81       	ldd	r24, Z+5	; 0x05
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	85 83       	std	Z+5, r24	; 0x05
    143a:	4e 98       	cbi	0x09, 6	; 9
    143c:	4d 98       	cbi	0x09, 5	; 9
    143e:	8e e3       	ldi	r24, 0x3E	; 62
    1440:	90 e4       	ldi	r25, 0x40	; 64
    1442:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZN18CircularStringBuff5resetEv>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 fb 40 	sts	0x40FB, r24	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    144c:	80 93 fc 40 	sts	0x40FC, r24	; 0x8040fc <_ZL23timer_red_blink_inhibit>
    1450:	10 92 16 40 	sts	0x4016, r1	; 0x804016 <_ZL17led_timeout_count>
    1454:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL17led_timeout_count+0x1>
    1458:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL17led_timeout_count+0x2>
    145c:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL17led_timeout_count+0x3>
    1460:	08 95       	ret

00001462 <_ZN4leds5blinkE7Blink_tb>:
	blink(blinkMode, false);
}

void leds::blink(Blink_t blinkMode, bool resetTimeout)
{
	if(resetTimeout)
    1462:	44 23       	and	r20, r20
    1464:	61 f0       	breq	.+24     	; 0x147e <_ZN4leds5blinkE7Blink_tb+0x1c>
	{
		led_timeout_count = LED_TIMEOUT_DELAY;
    1466:	80 e6       	ldi	r24, 0x60	; 96
    1468:	9a ee       	ldi	r25, 0xEA	; 234
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    1472:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    1476:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    147a:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
    147e:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    1482:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1486:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    148a:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    148e:	89 2b       	or	r24, r25
    1490:	8a 2b       	or	r24, r26
    1492:	8b 2b       	or	r24, r27
    1494:	91 f4       	brne	.+36     	; 0x14ba <_ZN4leds5blinkE7Blink_tb+0x58>
    1496:	61 15       	cp	r22, r1
    1498:	71 05       	cpc	r23, r1
    149a:	71 f4       	brne	.+28     	; 0x14b8 <_ZN4leds5blinkE7Blink_tb+0x56>
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	67 30       	cpi	r22, 0x07	; 7
    14a0:	71 05       	cpc	r23, r1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <_ZN4leds5blinkE7Blink_tb+0x44>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    14a6:	9b 01       	movw	r18, r22
    14a8:	25 50       	subi	r18, 0x05	; 5
    14aa:	31 09       	sbc	r19, r1
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <_ZN4leds5blinkE7Blink_tb+0x52>
    14b2:	45 c0       	rjmp	.+138    	; 0x153e <_ZN4leds5blinkE7Blink_tb+0xdc>
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <_ZN4leds5blinkE7Blink_tb+0x72>
    14b8:	08 95       	ret
		led_timeout_count = LED_TIMEOUT_DELAY;
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    14ba:	61 30       	cpi	r22, 0x01	; 1
    14bc:	71 05       	cpc	r23, r1
    14be:	21 f0       	breq	.+8      	; 0x14c8 <_ZN4leds5blinkE7Blink_tb+0x66>
    14c0:	cb 01       	movw	r24, r22
    14c2:	03 97       	sbiw	r24, 0x03	; 3
    14c4:	02 97       	sbiw	r24, 0x02	; 2
    14c6:	68 f5       	brcc	.+90     	; 0x1522 <_ZN4leds5blinkE7Blink_tb+0xc0>
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	68 30       	cpi	r22, 0x08	; 8
    14cc:	71 05       	cpc	r23, r1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <_ZN4leds5blinkE7Blink_tb+0x70>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
	bool isBoth = !isRed && !isGreen;	
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    14d4:	88 23       	and	r24, r24
    14d6:	09 f4       	brne	.+2      	; 0x14da <_ZN4leds5blinkE7Blink_tb+0x78>
    14d8:	46 c0       	rjmp	.+140    	; 0x1566 <_ZN4leds5blinkE7Blink_tb+0x104>
    14da:	40 91 f9 40 	lds	r20, 0x40F9	; 0x8040f9 <_ZL19lastRedBlinkSetting>
    14de:	50 91 fa 40 	lds	r21, 0x40FA	; 0x8040fa <_ZL19lastRedBlinkSetting+0x1>
    14e2:	46 17       	cp	r20, r22
    14e4:	57 07       	cpc	r21, r23
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_ZN4leds5blinkE7Blink_tb+0x88>
    14e8:	3e c0       	rjmp	.+124    	; 0x1566 <_ZN4leds5blinkE7Blink_tb+0x104>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
	{
		TCB3.INTCTRL &= ~TCB_CAPT_bm;   /* Capture or Timeout: disabled */
    14ec:	e0 e3       	ldi	r30, 0x30	; 48
    14ee:	fb e0       	ldi	r31, 0x0B	; 11
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
    14f2:	9e 7f       	andi	r25, 0xFE	; 254
    14f4:	95 83       	std	Z+5, r25	; 0x05

		switch(blinkMode)
    14f6:	6d 30       	cpi	r22, 0x0D	; 13
    14f8:	71 05       	cpc	r23, r1
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <_ZN4leds5blinkE7Blink_tb+0x9c>
    14fc:	4f c0       	rjmp	.+158    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
    14fe:	fb 01       	movw	r30, r22
    1500:	ec 57       	subi	r30, 0x7C	; 124
    1502:	f5 4f       	sbci	r31, 0xF5	; 245
    1504:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__tablejump2__>
    1508:	c0 0a       	sbc	r12, r16
    150a:	dd 0a       	sbc	r13, r29
    150c:	e5 0a       	sbc	r14, r21
    150e:	ed 0a       	sbc	r14, r29
    1510:	21 0b       	sbc	r18, r17
    1512:	07 0b       	sbc	r16, r23
    1514:	3b 0b       	sbc	r19, r27
    1516:	0f 0c       	add	r0, r15
    1518:	27 0c       	add	r2, r7
    151a:	e3 0b       	sbc	r30, r19
    151c:	b5 0b       	sbc	r27, r21
    151e:	86 0b       	sbc	r24, r22
    1520:	55 0b       	sbc	r21, r21
		led_timeout_count = LED_TIMEOUT_DELAY;
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	67 30       	cpi	r22, 0x07	; 7
    1526:	71 05       	cpc	r23, r1
    1528:	09 f0       	breq	.+2      	; 0x152c <_ZN4leds5blinkE7Blink_tb+0xca>
    152a:	80 e0       	ldi	r24, 0x00	; 0
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    152c:	62 30       	cpi	r22, 0x02	; 2
    152e:	71 05       	cpc	r23, r1
    1530:	09 f0       	breq	.+2      	; 0x1534 <_ZN4leds5blinkE7Blink_tb+0xd2>
    1532:	b9 cf       	rjmp	.-142    	; 0x14a6 <_ZN4leds5blinkE7Blink_tb+0x44>
	bool isBoth = !isRed && !isGreen;	
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	67 30       	cpi	r22, 0x07	; 7
    1538:	71 05       	cpc	r23, r1
    153a:	79 f2       	breq	.-98     	; 0x14da <_ZN4leds5blinkE7Blink_tb+0x78>
    153c:	17 c0       	rjmp	.+46     	; 0x156c <_ZN4leds5blinkE7Blink_tb+0x10a>
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	68 30       	cpi	r22, 0x08	; 8
    1542:	71 05       	cpc	r23, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <_ZN4leds5blinkE7Blink_tb+0xe6>
    1546:	20 e0       	ldi	r18, 0x00	; 0
	bool isBoth = !isRed && !isGreen;	
    1548:	81 11       	cpse	r24, r1
    154a:	c7 cf       	rjmp	.-114    	; 0x14da <_ZN4leds5blinkE7Blink_tb+0x78>
    154c:	68 30       	cpi	r22, 0x08	; 8
    154e:	71 05       	cpc	r23, r1
    1550:	69 f0       	breq	.+26     	; 0x156c <_ZN4leds5blinkE7Blink_tb+0x10a>
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    1552:	20 91 f5 40 	lds	r18, 0x40F5	; 0x8040f5 <_ZL20lastBothBlinkSetting>
    1556:	30 91 f6 40 	lds	r19, 0x40F6	; 0x8040f6 <_ZL20lastBothBlinkSetting+0x1>
    155a:	26 17       	cp	r18, r22
    155c:	37 07       	cpc	r19, r23
    155e:	09 f4       	brne	.+2      	; 0x1562 <_ZN4leds5blinkE7Blink_tb+0x100>
    1560:	98 c1       	rjmp	.+816    	; 0x1892 <_ZN4leds5blinkE7Blink_tb+0x430>
    1562:	28 2f       	mov	r18, r24
    1564:	c3 cf       	rjmp	.-122    	; 0x14ec <_ZN4leds5blinkE7Blink_tb+0x8a>
    1566:	22 23       	and	r18, r18
    1568:	09 f4       	brne	.+2      	; 0x156c <_ZN4leds5blinkE7Blink_tb+0x10a>
    156a:	91 c1       	rjmp	.+802    	; 0x188e <_ZN4leds5blinkE7Blink_tb+0x42c>
    156c:	20 91 f7 40 	lds	r18, 0x40F7	; 0x8040f7 <_ZL21lastGreenBlinkSetting>
    1570:	30 91 f8 40 	lds	r19, 0x40F8	; 0x8040f8 <_ZL21lastGreenBlinkSetting+0x1>
    1574:	26 17       	cp	r18, r22
    1576:	37 07       	cpc	r19, r23
    1578:	09 f4       	brne	.+2      	; 0x157c <_ZN4leds5blinkE7Blink_tb+0x11a>
    157a:	81 c1       	rjmp	.+770    	; 0x187e <_ZN4leds5blinkE7Blink_tb+0x41c>
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	b6 cf       	rjmp	.-148    	; 0x14ec <_ZN4leds5blinkE7Blink_tb+0x8a>

		switch(blinkMode)
		{
			case LEDS_OFF:
			{
				red_blink_count = 0;
    1580:	10 92 eb 40 	sts	0x40EB, r1	; 0x8040eb <_ZL15red_blink_count>
    1584:	10 92 ec 40 	sts	0x40EC, r1	; 0x8040ec <_ZL15red_blink_count+0x1>
				green_blink_count = 0;
    1588:	10 92 e9 40 	sts	0x40E9, r1	; 0x8040e9 <_ZL17green_blink_count>
    158c:	10 92 ea 40 	sts	0x40EA, r1	; 0x8040ea <_ZL17green_blink_count+0x1>
    1590:	4e 98       	cbi	0x09, 6	; 9
    1592:	4d 98       	cbi	0x09, 5	; 9
				LED_set_RED_level(OFF);
				LED_set_GREEN_level(OFF);
				red_led_configured = false;
    1594:	10 92 e8 40 	sts	0x40E8, r1	; 0x8040e8 <_ZL18red_led_configured>
				green_led_configured = false;
    1598:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <_ZL20green_led_configured>
				
			}
			break;
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	fb e0       	ldi	r31, 0x0B	; 11
    15a0:	95 81       	ldd	r25, Z+5	; 0x05
    15a2:	91 60       	ori	r25, 0x01	; 1
    15a4:	95 83       	std	Z+5, r25	; 0x05
	}
	
	if(isRed)
    15a6:	81 11       	cpse	r24, r1
    15a8:	6d c1       	rjmp	.+730    	; 0x1884 <_ZN4leds5blinkE7Blink_tb+0x422>
	{
		lastRedBlinkSetting = blinkMode;
	}
	else if(isGreen)
    15aa:	22 23       	and	r18, r18
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <_ZN4leds5blinkE7Blink_tb+0x14e>
    15ae:	71 c1       	rjmp	.+738    	; 0x1892 <_ZN4leds5blinkE7Blink_tb+0x430>
	{
		lastGreenBlinkSetting = blinkMode;
    15b0:	60 93 f7 40 	sts	0x40F7, r22	; 0x8040f7 <_ZL21lastGreenBlinkSetting>
    15b4:	70 93 f8 40 	sts	0x40F8, r23	; 0x8040f8 <_ZL21lastGreenBlinkSetting+0x1>
    15b8:	08 95       	ret
    15ba:	4e 98       	cbi	0x09, 6	; 9
			break;
			
			case LEDS_RED_OFF:
			{
				LED_set_RED_level(OFF);
				red_blink_count = 0;
    15bc:	10 92 eb 40 	sts	0x40EB, r1	; 0x8040eb <_ZL15red_blink_count>
    15c0:	10 92 ec 40 	sts	0x40EC, r1	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = false;
    15c4:	10 92 e8 40 	sts	0x40E8, r1	; 0x8040e8 <_ZL18red_led_configured>
			}
			break;
    15c8:	e9 cf       	rjmp	.-46     	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
    15ca:	4d 98       	cbi	0x09, 5	; 9
			
			case LEDS_GREEN_OFF:
			{
				LED_set_GREEN_level(OFF);
				green_blink_count = 0;
    15cc:	10 92 e9 40 	sts	0x40E9, r1	; 0x8040e9 <_ZL17green_blink_count>
    15d0:	10 92 ea 40 	sts	0x40EA, r1	; 0x8040ea <_ZL17green_blink_count+0x1>
				green_led_configured = false;
    15d4:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <_ZL20green_led_configured>
			}
			break;
    15d8:	e1 cf       	rjmp	.-62     	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_BLINK_FAST:
			{
				red_blink_on_period = BRIEF_ON;
    15da:	4f e0       	ldi	r20, 0x0F	; 15
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL19red_blink_on_period>
    15e2:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = BRIEF_OFF;
    15e6:	42 e3       	ldi	r20, 0x32	; 50
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL20red_blink_off_period>
    15ee:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;	
    15f2:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    15f6:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    15fa:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    15fe:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    1608:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    160c:	c7 cf       	rjmp	.-114    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_BLINK_FAST:
			{
				green_blink_on_period = BRIEF_ON;
    160e:	4f e0       	ldi	r20, 0x0F	; 15
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL21green_blink_on_period>
    1616:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = BRIEF_OFF;	
    161a:	42 e3       	ldi	r20, 0x32	; 50
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL22green_blink_off_period>
    1622:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    1626:	40 91 ef 40 	lds	r20, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    162a:	50 91 f0 40 	lds	r21, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    162e:	40 93 e9 40 	sts	0x40E9, r20	; 0x8040e9 <_ZL17green_blink_count>
    1632:	50 93 ea 40 	sts	0x40EA, r21	; 0x8040ea <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    163c:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
			}
			break;
    1640:	ad cf       	rjmp	.-166    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_BLINK_SLOW:
			{
				red_blink_on_period = SLOW_ON;
    1642:	49 e1       	ldi	r20, 0x19	; 25
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL19red_blink_on_period>
    164a:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    164e:	44 ef       	ldi	r20, 0xF4	; 244
    1650:	51 e0       	ldi	r21, 0x01	; 1
    1652:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL20red_blink_off_period>
    1656:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    165a:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    165e:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    1662:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    1666:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    1670:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    1674:	93 cf       	rjmp	.-218    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    1676:	49 e1       	ldi	r20, 0x19	; 25
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL21green_blink_on_period>
    167e:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    1682:	44 ef       	ldi	r20, 0xF4	; 244
    1684:	51 e0       	ldi	r21, 0x01	; 1
    1686:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL22green_blink_off_period>
    168a:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    168e:	40 91 ef 40 	lds	r20, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    1692:	50 91 f0 40 	lds	r21, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    1696:	40 93 e9 40 	sts	0x40E9, r20	; 0x8040e9 <_ZL17green_blink_count>
    169a:	50 93 ea 40 	sts	0x40EA, r21	; 0x8040ea <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    16a4:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
			}
			break;
    16a8:	79 cf       	rjmp	.-270    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_THEN_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    16aa:	a9 e1       	ldi	r26, 0x19	; 25
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	a0 93 ef 40 	sts	0x40EF, r26	; 0x8040ef <_ZL21green_blink_on_period>
    16b2:	b0 93 f0 40 	sts	0x40F0, r27	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    16b6:	e4 ef       	ldi	r30, 0xF4	; 244
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	e0 93 ed 40 	sts	0x40ED, r30	; 0x8040ed <_ZL22green_blink_off_period>
    16be:	f0 93 ee 40 	sts	0x40EE, r31	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = -green_blink_on_period;			
    16c2:	40 91 ef 40 	lds	r20, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    16c6:	50 91 f0 40 	lds	r21, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    16ca:	51 95       	neg	r21
    16cc:	41 95       	neg	r20
    16ce:	51 09       	sbc	r21, r1
    16d0:	40 93 e9 40 	sts	0x40E9, r20	; 0x8040e9 <_ZL17green_blink_count>
    16d4:	50 93 ea 40 	sts	0x40EA, r21	; 0x8040ea <_ZL17green_blink_count+0x1>
				red_blink_on_period = SLOW_ON;
    16d8:	a0 93 f3 40 	sts	0x40F3, r26	; 0x8040f3 <_ZL19red_blink_on_period>
    16dc:	b0 93 f4 40 	sts	0x40F4, r27	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    16e0:	e0 93 f1 40 	sts	0x40F1, r30	; 0x8040f1 <_ZL20red_blink_off_period>
    16e4:	f0 93 f2 40 	sts	0x40F2, r31	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    16e8:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    16ec:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    16f0:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    16f4:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				green_led_configured = true;			
    16fe:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    1702:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    1706:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    170a:	48 cf       	rjmp	.-368    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_THEN_GREEN_BLINK_FAST:
			{
				green_blink_on_period = FAST_ON;
    170c:	49 e1       	ldi	r20, 0x19	; 25
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL21green_blink_on_period>
    1714:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = FAST_OFF;	
    1718:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL22green_blink_off_period>
    171c:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = -green_blink_on_period;			
    1720:	e0 91 ef 40 	lds	r30, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    1724:	f0 91 f0 40 	lds	r31, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    1728:	f1 95       	neg	r31
    172a:	e1 95       	neg	r30
    172c:	f1 09       	sbc	r31, r1
    172e:	e0 93 e9 40 	sts	0x40E9, r30	; 0x8040e9 <_ZL17green_blink_count>
    1732:	f0 93 ea 40 	sts	0x40EA, r31	; 0x8040ea <_ZL17green_blink_count+0x1>
				red_blink_on_period = FAST_ON;
    1736:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL19red_blink_on_period>
    173a:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = FAST_OFF;
    173e:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL20red_blink_off_period>
    1742:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    1746:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    174a:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    174e:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    1752:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				green_led_configured = true;			
    175c:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    1760:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    1764:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    1768:	19 cf       	rjmp	.-462    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_AND_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    176a:	e9 e1       	ldi	r30, 0x19	; 25
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e0 93 ef 40 	sts	0x40EF, r30	; 0x8040ef <_ZL21green_blink_on_period>
    1772:	f0 93 f0 40 	sts	0x40F0, r31	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    1776:	44 ef       	ldi	r20, 0xF4	; 244
    1778:	51 e0       	ldi	r21, 0x01	; 1
    177a:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL22green_blink_off_period>
    177e:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    1782:	a0 91 ef 40 	lds	r26, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    1786:	b0 91 f0 40 	lds	r27, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    178a:	a0 93 e9 40 	sts	0x40E9, r26	; 0x8040e9 <_ZL17green_blink_count>
    178e:	b0 93 ea 40 	sts	0x40EA, r27	; 0x8040ea <_ZL17green_blink_count+0x1>
				red_blink_on_period = SLOW_ON;
    1792:	e0 93 f3 40 	sts	0x40F3, r30	; 0x8040f3 <_ZL19red_blink_on_period>
    1796:	f0 93 f4 40 	sts	0x40F4, r31	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    179a:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL20red_blink_off_period>
    179e:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    17a2:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    17a6:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    17aa:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    17ae:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				green_led_configured = true;			
    17b8:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    17bc:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    17c0:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    17c4:	eb ce       	rjmp	.-554    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_AND_GREEN_BLINK_FAST:
			{
				green_blink_on_period = FAST_ON;
    17c6:	49 e1       	ldi	r20, 0x19	; 25
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL21green_blink_on_period>
    17ce:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = FAST_OFF;	
    17d2:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL22green_blink_off_period>
    17d6:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    17da:	e0 91 ef 40 	lds	r30, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    17de:	f0 91 f0 40 	lds	r31, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    17e2:	e0 93 e9 40 	sts	0x40E9, r30	; 0x8040e9 <_ZL17green_blink_count>
    17e6:	f0 93 ea 40 	sts	0x40EA, r31	; 0x8040ea <_ZL17green_blink_count+0x1>
				red_blink_on_period = FAST_ON;
    17ea:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL19red_blink_on_period>
    17ee:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = FAST_OFF;
    17f2:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL20red_blink_off_period>
    17f6:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    17fa:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    17fe:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    1802:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    1806:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				green_led_configured = true;			
    1810:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    1814:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    1818:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    181c:	bf ce       	rjmp	.-642    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_ON_CONSTANT:
			{
				red_blink_on_period = SLOW_ON;
    181e:	49 e1       	ldi	r20, 0x19	; 25
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL19red_blink_on_period>
    1826:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = 0;
    182a:	10 92 f1 40 	sts	0x40F1, r1	; 0x8040f1 <_ZL20red_blink_off_period>
    182e:	10 92 f2 40 	sts	0x40F2, r1	; 0x8040f2 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;
    1832:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL19red_blink_on_period>
    1836:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL19red_blink_on_period+0x1>
    183a:	40 93 eb 40 	sts	0x40EB, r20	; 0x8040eb <_ZL15red_blink_count>
    183e:	50 93 ec 40 	sts	0x40EC, r21	; 0x8040ec <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	90 93 e8 40 	sts	0x40E8, r25	; 0x8040e8 <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    1848:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
			}
			break;
    184c:	a7 ce       	rjmp	.-690    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_ON_CONSTANT:
			{
				green_blink_on_period = SLOW_ON;
    184e:	49 e1       	ldi	r20, 0x19	; 25
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL21green_blink_on_period>
    1856:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = 0;
    185a:	10 92 ed 40 	sts	0x40ED, r1	; 0x8040ed <_ZL22green_blink_off_period>
    185e:	10 92 ee 40 	sts	0x40EE, r1	; 0x8040ee <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;
    1862:	40 91 ef 40 	lds	r20, 0x40EF	; 0x8040ef <_ZL21green_blink_on_period>
    1866:	50 91 f0 40 	lds	r21, 0x40F0	; 0x8040f0 <_ZL21green_blink_on_period+0x1>
    186a:	40 93 e9 40 	sts	0x40E9, r20	; 0x8040e9 <_ZL17green_blink_count>
    186e:	50 93 ea 40 	sts	0x40EA, r21	; 0x8040ea <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	90 93 e7 40 	sts	0x40E7, r25	; 0x8040e7 <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    1878:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
			}
			break;
    187c:	8f ce       	rjmp	.-738    	; 0x159c <_ZN4leds5blinkE7Blink_tb+0x13a>
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	}
	
	if(isRed)
    187e:	88 23       	and	r24, r24
    1880:	09 f4       	brne	.+2      	; 0x1884 <_ZN4leds5blinkE7Blink_tb+0x422>
    1882:	96 ce       	rjmp	.-724    	; 0x15b0 <_ZN4leds5blinkE7Blink_tb+0x14e>
	{
		lastRedBlinkSetting = blinkMode;
    1884:	60 93 f9 40 	sts	0x40F9, r22	; 0x8040f9 <_ZL19lastRedBlinkSetting>
    1888:	70 93 fa 40 	sts	0x40FA, r23	; 0x8040fa <_ZL19lastRedBlinkSetting+0x1>
    188c:	08 95       	ret
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	}
	
	if(isRed)
    188e:	81 11       	cpse	r24, r1
    1890:	f9 cf       	rjmp	.-14     	; 0x1884 <_ZN4leds5blinkE7Blink_tb+0x422>
	{
		lastGreenBlinkSetting = blinkMode;
	}
	else
	{
		lastBothBlinkSetting = blinkMode;
    1892:	60 93 f5 40 	sts	0x40F5, r22	; 0x8040f5 <_ZL20lastBothBlinkSetting>
    1896:	70 93 f6 40 	sts	0x40F6, r23	; 0x8040f6 <_ZL20lastBothBlinkSetting+0x1>
	}
}
    189a:	08 95       	ret

0000189c <_ZN4leds5blinkE7Blink_t>:
	timer_red_blink_inhibit = true; /* Prevent timer from controlling LED */
}

void leds::blink(Blink_t blinkMode)
{
	blink(blinkMode, false);
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN4leds5blinkE7Blink_tb>
}
    18a2:	08 95       	ret

000018a4 <_ZN4leds5resetEv>:
}

/* Turns off LEDs, resets the text buffer, and disables LED character transmissions. Re-enables LED timer blink functionality. */
void leds::reset(void)
{
	blink(LEDS_OFF);
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4leds5blinkE7Blink_t>
	g_text_buff.reset();
    18ac:	8e e3       	ldi	r24, 0x3E	; 62
    18ae:	90 e4       	ldi	r25, 0x40	; 64
    18b0:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZN18CircularStringBuff5resetEv>
	timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    18b4:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZL25timer_green_blink_inhibit>
    18b8:	10 92 fc 40 	sts	0x40FC, r1	; 0x8040fc <_ZL23timer_red_blink_inhibit>
	led_timeout_count = LED_TIMEOUT_DELAY;
    18bc:	80 e6       	ldi	r24, 0x60	; 96
    18be:	9a ee       	ldi	r25, 0xEA	; 234
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    18c8:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    18cc:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    18d0:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
}
    18d4:	08 95       	ret

000018d6 <_ZN4leds4initE7Blink_t>:
{
	init(LEDS_OFF);
}

void leds::init(Blink_t setBlink)
{
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	8c 01       	movw	r16, r24
    18e4:	7b 01       	movw	r14, r22
	TCB3.INTCTRL &= ~TCB_CAPT_bm; /* Disable timer interrupt */
    18e6:	c0 e3       	ldi	r28, 0x30	; 48
    18e8:	db e0       	ldi	r29, 0x0B	; 11
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	8e 7f       	andi	r24, 0xFE	; 254
    18ee:	8d 83       	std	Y+5, r24	; 0x05
	reset();
    18f0:	c8 01       	movw	r24, r16
    18f2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN4leds5resetEv>
	TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	81 60       	ori	r24, 0x01	; 1
    18fa:	8d 83       	std	Y+5, r24	; 0x05
	if(setBlink != LEDS_OFF) blink(setBlink, true);
    18fc:	e1 14       	cp	r14, r1
    18fe:	f1 04       	cpc	r15, r1
    1900:	39 f4       	brne	.+14     	; 0x1910 <_ZN4leds4initE7Blink_t+0x3a>
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	08 95       	ret
void leds::init(Blink_t setBlink)
{
	TCB3.INTCTRL &= ~TCB_CAPT_bm; /* Disable timer interrupt */
	reset();
	TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	if(setBlink != LEDS_OFF) blink(setBlink, true);
    1910:	41 e0       	ldi	r20, 0x01	; 1
    1912:	b7 01       	movw	r22, r14
    1914:	c8 01       	movw	r24, r16
    1916:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN4leds5blinkE7Blink_tb>
}
    191a:	f3 cf       	rjmp	.-26     	; 0x1902 <_ZN4leds4initE7Blink_t+0x2c>

0000191c <_ZN4leds4initEv>:
}

/* Disables LED timer while resetting settings for interrupt safety. */
void leds::init(void)
{
	init(LEDS_OFF);
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN4leds4initE7Blink_t>
}
    1924:	08 95       	ret

00001926 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1926:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1928:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    192a:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    192c:	40 83       	st	Z, r20
	ret                             // Return to caller
    192e:	08 95       	ret

00001930 <_Z13reduce_by_gcdPmS_>:
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
		return;
	}
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	8b 01       	movw	r16, r22
    1954:	48 80       	ld	r4, Y
    1956:	59 80       	ldd	r5, Y+1	; 0x01
    1958:	6a 80       	ldd	r6, Y+2	; 0x02
    195a:	7b 80       	ldd	r7, Y+3	; 0x03
    195c:	41 14       	cp	r4, r1
    195e:	51 04       	cpc	r5, r1
    1960:	61 04       	cpc	r6, r1
    1962:	71 04       	cpc	r7, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <_Z13reduce_by_gcdPmS_+0x38>
    1966:	47 c0       	rjmp	.+142    	; 0x19f6 <_Z13reduce_by_gcdPmS_+0xc6>
    1968:	fb 01       	movw	r30, r22
    196a:	80 80       	ld	r8, Z
    196c:	91 80       	ldd	r9, Z+1	; 0x01
    196e:	a2 80       	ldd	r10, Z+2	; 0x02
    1970:	b3 80       	ldd	r11, Z+3	; 0x03
    1972:	81 14       	cp	r8, r1
    1974:	91 04       	cpc	r9, r1
    1976:	a1 04       	cpc	r10, r1
    1978:	b1 04       	cpc	r11, r1
    197a:	e9 f1       	breq	.+122    	; 0x19f6 <_Z13reduce_by_gcdPmS_+0xc6>
    197c:	c3 01       	movw	r24, r6
    197e:	b2 01       	movw	r22, r4
    1980:	a5 01       	movw	r20, r10
    1982:	94 01       	movw	r18, r8
    1984:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1988:	6b 01       	movw	r12, r22
    198a:	7c 01       	movw	r14, r24
    198c:	c1 14       	cp	r12, r1
    198e:	d1 04       	cpc	r13, r1
    1990:	e1 04       	cpc	r14, r1
    1992:	f1 04       	cpc	r15, r1
    1994:	29 f4       	brne	.+10     	; 0x19a0 <_Z13reduce_by_gcdPmS_+0x70>
    1996:	75 01       	movw	r14, r10
    1998:	64 01       	movw	r12, r8
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <_Z13reduce_by_gcdPmS_+0x8a>
    199c:	6b 01       	movw	r12, r22
    199e:	7c 01       	movw	r14, r24
    19a0:	c5 01       	movw	r24, r10
    19a2:	b4 01       	movw	r22, r8
    19a4:	a7 01       	movw	r20, r14
    19a6:	96 01       	movw	r18, r12
    19a8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    19ac:	46 01       	movw	r8, r12
    19ae:	57 01       	movw	r10, r14
    19b0:	61 15       	cp	r22, r1
    19b2:	71 05       	cpc	r23, r1
    19b4:	81 05       	cpc	r24, r1
    19b6:	91 05       	cpc	r25, r1
    19b8:	89 f7       	brne	.-30     	; 0x199c <_Z13reduce_by_gcdPmS_+0x6c>
    19ba:	f2 e0       	ldi	r31, 0x02	; 2
    19bc:	cf 16       	cp	r12, r31
    19be:	d1 04       	cpc	r13, r1
    19c0:	e1 04       	cpc	r14, r1
    19c2:	f1 04       	cpc	r15, r1
    19c4:	c0 f0       	brcs	.+48     	; 0x19f6 <_Z13reduce_by_gcdPmS_+0xc6>
    19c6:	c3 01       	movw	r24, r6
    19c8:	b2 01       	movw	r22, r4
    19ca:	a7 01       	movw	r20, r14
    19cc:	96 01       	movw	r18, r12
    19ce:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    19d2:	28 83       	st	Y, r18
    19d4:	39 83       	std	Y+1, r19	; 0x01
    19d6:	4a 83       	std	Y+2, r20	; 0x02
    19d8:	5b 83       	std	Y+3, r21	; 0x03
    19da:	f8 01       	movw	r30, r16
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	a7 01       	movw	r20, r14
    19e6:	96 01       	movw	r18, r12
    19e8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    19ec:	f8 01       	movw	r30, r16
    19ee:	20 83       	st	Z, r18
    19f0:	31 83       	std	Z+1, r19	; 0x01
    19f2:	42 83       	std	Z+2, r20	; 0x02
    19f4:	53 83       	std	Z+3, r21	; 0x03
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	af 90       	pop	r10
    1a0a:	9f 90       	pop	r9
    1a0c:	8f 90       	pop	r8
    1a0e:	7f 90       	pop	r7
    1a10:	6f 90       	pop	r6
    1a12:	5f 90       	pop	r5
    1a14:	4f 90       	pop	r4
    1a16:	08 95       	ret

00001a18 <_Z8pll_calcmP13u_si5351_regs>:
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	28 97       	sbiw	r28, 0x08	; 8
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	8a 01       	movw	r16, r20
    1a3c:	80 90 1a 40 	lds	r8, 0x401A	; 0x80401a <_ZL9xtal_freq>
    1a40:	90 90 1b 40 	lds	r9, 0x401B	; 0x80401b <_ZL9xtal_freq+0x1>
    1a44:	a0 90 1c 40 	lds	r10, 0x401C	; 0x80401c <_ZL9xtal_freq+0x2>
    1a48:	b0 90 1d 40 	lds	r11, 0x401D	; 0x80401d <_ZL9xtal_freq+0x3>
    1a4c:	a5 01       	movw	r20, r10
    1a4e:	94 01       	movw	r18, r8
    1a50:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1a54:	69 01       	movw	r12, r18
    1a56:	7a 01       	movw	r14, r20
    1a58:	69 83       	std	Y+1, r22	; 0x01
    1a5a:	7a 83       	std	Y+2, r23	; 0x02
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8d 82       	std	Y+5, r8	; 0x05
    1a62:	9e 82       	std	Y+6, r9	; 0x06
    1a64:	af 82       	std	Y+7, r10	; 0x07
    1a66:	b8 86       	std	Y+8, r11	; 0x08
    1a68:	be 01       	movw	r22, r28
    1a6a:	6b 5f       	subi	r22, 0xFB	; 251
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z13reduce_by_gcdPmS_>
    1a76:	69 81       	ldd	r22, Y+1	; 0x01
    1a78:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	66 0f       	add	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	66 0f       	add	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	8d 80       	ldd	r8, Y+5	; 0x05
    1ab8:	9e 80       	ldd	r9, Y+6	; 0x06
    1aba:	af 80       	ldd	r10, Y+7	; 0x07
    1abc:	b8 84       	ldd	r11, Y+8	; 0x08
    1abe:	a5 01       	movw	r20, r10
    1ac0:	94 01       	movw	r18, r8
    1ac2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1ac6:	32 50       	subi	r19, 0x02	; 2
    1ac8:	41 09       	sbc	r20, r1
    1aca:	51 09       	sbc	r21, r1
    1acc:	cc 0c       	add	r12, r12
    1ace:	dd 1c       	adc	r13, r13
    1ad0:	ee 1c       	adc	r14, r14
    1ad2:	ff 1c       	adc	r15, r15
    1ad4:	cc 0c       	add	r12, r12
    1ad6:	dd 1c       	adc	r13, r13
    1ad8:	ee 1c       	adc	r14, r14
    1ada:	ff 1c       	adc	r15, r15
    1adc:	cc 0c       	add	r12, r12
    1ade:	dd 1c       	adc	r13, r13
    1ae0:	ee 1c       	adc	r14, r14
    1ae2:	ff 1c       	adc	r15, r15
    1ae4:	cc 0c       	add	r12, r12
    1ae6:	dd 1c       	adc	r13, r13
    1ae8:	ee 1c       	adc	r14, r14
    1aea:	ff 1c       	adc	r15, r15
    1aec:	cc 0c       	add	r12, r12
    1aee:	dd 1c       	adc	r13, r13
    1af0:	ee 1c       	adc	r14, r14
    1af2:	ff 1c       	adc	r15, r15
    1af4:	cc 0c       	add	r12, r12
    1af6:	dd 1c       	adc	r13, r13
    1af8:	ee 1c       	adc	r14, r14
    1afa:	ff 1c       	adc	r15, r15
    1afc:	cc 0c       	add	r12, r12
    1afe:	dd 1c       	adc	r13, r13
    1b00:	ee 1c       	adc	r14, r14
    1b02:	ff 1c       	adc	r15, r15
    1b04:	c2 0e       	add	r12, r18
    1b06:	d3 1e       	adc	r13, r19
    1b08:	e4 1e       	adc	r14, r20
    1b0a:	f5 1e       	adc	r15, r21
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	c0 82       	st	Z, r12
    1b10:	d1 82       	std	Z+1, r13	; 0x01
    1b12:	e2 82       	std	Z+2, r14	; 0x02
    1b14:	f3 82       	std	Z+3, r15	; 0x03
    1b16:	64 83       	std	Z+4, r22	; 0x04
    1b18:	75 83       	std	Z+5, r23	; 0x05
    1b1a:	86 83       	std	Z+6, r24	; 0x06
    1b1c:	97 83       	std	Z+7, r25	; 0x07
    1b1e:	80 86       	std	Z+8, r8	; 0x08
    1b20:	91 86       	std	Z+9, r9	; 0x09
    1b22:	a2 86       	std	Z+10, r10	; 0x0a
    1b24:	b3 86       	std	Z+11, r11	; 0x0b
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	28 96       	adiw	r28, 0x08	; 8
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	08 95       	ret

00001b48 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    1b48:	3f 92       	push	r3
    1b4a:	4f 92       	push	r4
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	4b 01       	movw	r8, r22
    1b6c:	5c 01       	movw	r10, r24
    1b6e:	ea 01       	movw	r28, r20
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	f9 01       	movw	r30, r18
    1b74:	80 83       	st	Z, r24
    1b76:	f0 e8       	ldi	r31, 0x80	; 128
    1b78:	8f 16       	cp	r8, r31
    1b7a:	f1 ed       	ldi	r31, 0xD1	; 209
    1b7c:	9f 06       	cpc	r9, r31
    1b7e:	f0 ef       	ldi	r31, 0xF0	; 240
    1b80:	af 06       	cpc	r10, r31
    1b82:	f8 e0       	ldi	r31, 0x08	; 8
    1b84:	bf 06       	cpc	r11, r31
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x42>
    1b88:	87 c0       	rjmp	.+270    	; 0x1c98 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x150>
    1b8a:	68 94       	set
    1b8c:	33 24       	eor	r3, r3
    1b8e:	31 f8       	bld	r3, 1
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	79 ee       	ldi	r23, 0xE9	; 233
    1b94:	84 ea       	ldi	r24, 0xA4	; 164
    1b96:	95 e3       	ldi	r25, 0x35	; 53
    1b98:	0f 2e       	mov	r0, r31
    1b9a:	41 2c       	mov	r4, r1
    1b9c:	f9 ee       	ldi	r31, 0xE9	; 233
    1b9e:	5f 2e       	mov	r5, r31
    1ba0:	f4 ea       	ldi	r31, 0xA4	; 164
    1ba2:	6f 2e       	mov	r6, r31
    1ba4:	f5 e3       	ldi	r31, 0x35	; 53
    1ba6:	7f 2e       	mov	r7, r31
    1ba8:	f0 2d       	mov	r31, r0
    1baa:	a5 01       	movw	r20, r10
    1bac:	94 01       	movw	r18, r8
    1bae:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1bb2:	69 01       	movw	r12, r18
    1bb4:	7a 01       	movw	r14, r20
    1bb6:	44 e0       	ldi	r20, 0x04	; 4
    1bb8:	c4 16       	cp	r12, r20
    1bba:	d1 04       	cpc	r13, r1
    1bbc:	e1 04       	cpc	r14, r1
    1bbe:	f1 04       	cpc	r15, r1
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x7c>
    1bc2:	79 c0       	rjmp	.+242    	; 0x1cb6 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x16e>
    1bc4:	a3 2d       	mov	r26, r3
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	a5 01       	movw	r20, r10
    1bca:	94 01       	movw	r18, r8
    1bcc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__muluhisi3>
    1bd0:	a3 01       	movw	r20, r6
    1bd2:	92 01       	movw	r18, r4
    1bd4:	26 1b       	sub	r18, r22
    1bd6:	37 0b       	sbc	r19, r23
    1bd8:	48 0b       	sbc	r20, r24
    1bda:	59 0b       	sbc	r21, r25
    1bdc:	ca 01       	movw	r24, r20
    1bde:	b9 01       	movw	r22, r18
    1be0:	33 94       	inc	r3
    1be2:	33 94       	inc	r3
    1be4:	61 15       	cp	r22, r1
    1be6:	36 e4       	ldi	r19, 0x46	; 70
    1be8:	73 07       	cpc	r23, r19
    1bea:	33 ec       	ldi	r19, 0xC3	; 195
    1bec:	83 07       	cpc	r24, r19
    1bee:	33 e2       	ldi	r19, 0x23	; 35
    1bf0:	93 07       	cpc	r25, r19
    1bf2:	d8 f6       	brcc	.-74     	; 0x1baa <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x62>
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	c1 2c       	mov	r12, r1
    1bfc:	d1 2c       	mov	r13, r1
    1bfe:	76 01       	movw	r14, r12
    1c00:	21 e0       	ldi	r18, 0x01	; 1
    1c02:	54 e0       	ldi	r21, 0x04	; 4
    1c04:	c5 16       	cp	r12, r21
    1c06:	d1 04       	cpc	r13, r1
    1c08:	e1 04       	cpc	r14, r1
    1c0a:	f1 04       	cpc	r15, r1
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xc8>
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	f8 01       	movw	r30, r16
    1c12:	20 83       	st	Z, r18
    1c14:	cc 0c       	add	r12, r12
    1c16:	dd 1c       	adc	r13, r13
    1c18:	ee 1c       	adc	r14, r14
    1c1a:	ff 1c       	adc	r15, r15
    1c1c:	cc 0c       	add	r12, r12
    1c1e:	dd 1c       	adc	r13, r13
    1c20:	ee 1c       	adc	r14, r14
    1c22:	ff 1c       	adc	r15, r15
    1c24:	cc 0c       	add	r12, r12
    1c26:	dd 1c       	adc	r13, r13
    1c28:	ee 1c       	adc	r14, r14
    1c2a:	ff 1c       	adc	r15, r15
    1c2c:	cc 0c       	add	r12, r12
    1c2e:	dd 1c       	adc	r13, r13
    1c30:	ee 1c       	adc	r14, r14
    1c32:	ff 1c       	adc	r15, r15
    1c34:	cc 0c       	add	r12, r12
    1c36:	dd 1c       	adc	r13, r13
    1c38:	ee 1c       	adc	r14, r14
    1c3a:	ff 1c       	adc	r15, r15
    1c3c:	cc 0c       	add	r12, r12
    1c3e:	dd 1c       	adc	r13, r13
    1c40:	ee 1c       	adc	r14, r14
    1c42:	ff 1c       	adc	r15, r15
    1c44:	cc 0c       	add	r12, r12
    1c46:	dd 1c       	adc	r13, r13
    1c48:	ee 1c       	adc	r14, r14
    1c4a:	ff 1c       	adc	r15, r15
    1c4c:	f2 e0       	ldi	r31, 0x02	; 2
    1c4e:	df 1a       	sub	r13, r31
    1c50:	e1 08       	sbc	r14, r1
    1c52:	f1 08       	sbc	r15, r1
    1c54:	c8 82       	st	Y, r12
    1c56:	d9 82       	std	Y+1, r13	; 0x01
    1c58:	ea 82       	std	Y+2, r14	; 0x02
    1c5a:	fb 82       	std	Y+3, r15	; 0x03
    1c5c:	1c 82       	std	Y+4, r1	; 0x04
    1c5e:	1d 82       	std	Y+5, r1	; 0x05
    1c60:	1e 82       	std	Y+6, r1	; 0x06
    1c62:	1f 82       	std	Y+7, r1	; 0x07
    1c64:	01 e0       	ldi	r16, 0x01	; 1
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	08 87       	std	Y+8, r16	; 0x08
    1c6e:	19 87       	std	Y+9, r17	; 0x09
    1c70:	2a 87       	std	Y+10, r18	; 0x0a
    1c72:	3b 87       	std	Y+11, r19	; 0x0b
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	7f 90       	pop	r7
    1c8e:	6f 90       	pop	r6
    1c90:	5f 90       	pop	r5
    1c92:	4f 90       	pop	r4
    1c94:	3f 90       	pop	r3
    1c96:	08 95       	ret
    1c98:	c5 01       	movw	r24, r10
    1c9a:	66 0f       	add	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	c1 2c       	mov	r12, r1
    1cac:	d1 2c       	mov	r13, r1
    1cae:	76 01       	movw	r14, r12
    1cb0:	68 94       	set
    1cb2:	c2 f8       	bld	r12, 2
    1cb4:	a5 cf       	rjmp	.-182    	; 0x1c00 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xb8>
    1cb6:	a5 01       	movw	r20, r10
    1cb8:	94 01       	movw	r18, r8
    1cba:	c7 01       	movw	r24, r14
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsi3>
    1cc2:	9e cf       	rjmp	.-196    	; 0x1c00 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xb8>

00001cc4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    1cc4:	2f 92       	push	r2
    1cc6:	3f 92       	push	r3
    1cc8:	4f 92       	push	r4
    1cca:	5f 92       	push	r5
    1ccc:	6f 92       	push	r6
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	62 97       	sbiw	r28, 0x12	; 18
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	4b 01       	movw	r8, r22
    1cf4:	5c 01       	movw	r10, r24
    1cf6:	1a 01       	movw	r2, r20
    1cf8:	2d 87       	std	Y+13, r18	; 0x0d
    1cfa:	3e 87       	std	Y+14, r19	; 0x0e
    1cfc:	80 91 0c 41 	lds	r24, 0x410C	; 0x80410c <_ZL8freqVCOB>
    1d00:	90 91 0d 41 	lds	r25, 0x410D	; 0x80410d <_ZL8freqVCOB+0x1>
    1d04:	a0 91 0e 41 	lds	r26, 0x410E	; 0x80410e <_ZL8freqVCOB+0x2>
    1d08:	b0 91 0f 41 	lds	r27, 0x410F	; 0x80410f <_ZL8freqVCOB+0x3>
    1d0c:	89 87       	std	Y+9, r24	; 0x09
    1d0e:	9a 87       	std	Y+10, r25	; 0x0a
    1d10:	ab 87       	std	Y+11, r26	; 0x0b
    1d12:	bc 87       	std	Y+12, r27	; 0x0c
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	a5 01       	movw	r20, r10
    1d1a:	94 01       	movw	r18, r8
    1d1c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1d20:	69 01       	movw	r12, r18
    1d22:	7a 01       	movw	r14, r20
    1d24:	cf 86       	std	Y+15, r12	; 0x0f
    1d26:	d8 8a       	std	Y+16, r13	; 0x10
    1d28:	e9 8a       	std	Y+17, r14	; 0x11
    1d2a:	fa 8a       	std	Y+18, r15	; 0x12
    1d2c:	69 83       	std	Y+1, r22	; 0x01
    1d2e:	7a 83       	std	Y+2, r23	; 0x02
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8d 82       	std	Y+5, r8	; 0x05
    1d36:	9e 82       	std	Y+6, r9	; 0x06
    1d38:	af 82       	std	Y+7, r10	; 0x07
    1d3a:	b8 86       	std	Y+8, r11	; 0x08
    1d3c:	be 01       	movw	r22, r28
    1d3e:	6b 5f       	subi	r22, 0xFB	; 251
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	0e 94 98 0c 	call	0x1930	; 0x1930 <_Z13reduce_by_gcdPmS_>
    1d4a:	4d 80       	ldd	r4, Y+5	; 0x05
    1d4c:	5e 80       	ldd	r5, Y+6	; 0x06
    1d4e:	6f 80       	ldd	r6, Y+7	; 0x07
    1d50:	78 84       	ldd	r7, Y+8	; 0x08
    1d52:	89 80       	ldd	r8, Y+1	; 0x01
    1d54:	9a 80       	ldd	r9, Y+2	; 0x02
    1d56:	ab 80       	ldd	r10, Y+3	; 0x03
    1d58:	bc 80       	ldd	r11, Y+4	; 0x04
    1d5a:	a3 01       	movw	r20, r6
    1d5c:	92 01       	movw	r18, r4
    1d5e:	c7 01       	movw	r24, r14
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsi3>
    1d66:	9b 01       	movw	r18, r22
    1d68:	ac 01       	movw	r20, r24
    1d6a:	28 0d       	add	r18, r8
    1d6c:	39 1d       	adc	r19, r9
    1d6e:	4a 1d       	adc	r20, r10
    1d70:	5b 1d       	adc	r21, r11
    1d72:	69 85       	ldd	r22, Y+9	; 0x09
    1d74:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d7a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1d7e:	c3 01       	movw	r24, r6
    1d80:	b2 01       	movw	r22, r4
    1d82:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsi3>
    1d86:	69 87       	std	Y+9, r22	; 0x09
    1d88:	7a 87       	std	Y+10, r23	; 0x0a
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	81 14       	cp	r8, r1
    1d90:	91 04       	cpc	r9, r1
    1d92:	a1 04       	cpc	r10, r1
    1d94:	b1 04       	cpc	r11, r1
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xd8>
    1d98:	c0 fe       	sbrs	r12, 0
    1d9a:	71 c0       	rjmp	.+226    	; 0x1e7e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x1ba>
    1d9c:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d9e:	be 85       	ldd	r27, Y+14	; 0x0e
    1da0:	1c 92       	st	X, r1
    1da2:	d8 01       	movw	r26, r16
    1da4:	1c 92       	st	X, r1
    1da6:	88 0c       	add	r8, r8
    1da8:	99 1c       	adc	r9, r9
    1daa:	aa 1c       	adc	r10, r10
    1dac:	bb 1c       	adc	r11, r11
    1dae:	88 0c       	add	r8, r8
    1db0:	99 1c       	adc	r9, r9
    1db2:	aa 1c       	adc	r10, r10
    1db4:	bb 1c       	adc	r11, r11
    1db6:	c5 01       	movw	r24, r10
    1db8:	b4 01       	movw	r22, r8
    1dba:	66 0f       	add	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	66 0f       	add	r22, r22
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	88 1f       	adc	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	66 0f       	add	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	a3 01       	movw	r20, r6
    1de4:	92 01       	movw	r18, r4
    1de6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
    1dea:	32 50       	subi	r19, 0x02	; 2
    1dec:	41 09       	sbc	r20, r1
    1dee:	51 09       	sbc	r21, r1
    1df0:	cc 0c       	add	r12, r12
    1df2:	dd 1c       	adc	r13, r13
    1df4:	ee 1c       	adc	r14, r14
    1df6:	ff 1c       	adc	r15, r15
    1df8:	cc 0c       	add	r12, r12
    1dfa:	dd 1c       	adc	r13, r13
    1dfc:	ee 1c       	adc	r14, r14
    1dfe:	ff 1c       	adc	r15, r15
    1e00:	cc 0c       	add	r12, r12
    1e02:	dd 1c       	adc	r13, r13
    1e04:	ee 1c       	adc	r14, r14
    1e06:	ff 1c       	adc	r15, r15
    1e08:	cc 0c       	add	r12, r12
    1e0a:	dd 1c       	adc	r13, r13
    1e0c:	ee 1c       	adc	r14, r14
    1e0e:	ff 1c       	adc	r15, r15
    1e10:	cc 0c       	add	r12, r12
    1e12:	dd 1c       	adc	r13, r13
    1e14:	ee 1c       	adc	r14, r14
    1e16:	ff 1c       	adc	r15, r15
    1e18:	cc 0c       	add	r12, r12
    1e1a:	dd 1c       	adc	r13, r13
    1e1c:	ee 1c       	adc	r14, r14
    1e1e:	ff 1c       	adc	r15, r15
    1e20:	cc 0c       	add	r12, r12
    1e22:	dd 1c       	adc	r13, r13
    1e24:	ee 1c       	adc	r14, r14
    1e26:	ff 1c       	adc	r15, r15
    1e28:	c2 0e       	add	r12, r18
    1e2a:	d3 1e       	adc	r13, r19
    1e2c:	e4 1e       	adc	r14, r20
    1e2e:	f5 1e       	adc	r15, r21
    1e30:	f1 01       	movw	r30, r2
    1e32:	c0 82       	st	Z, r12
    1e34:	d1 82       	std	Z+1, r13	; 0x01
    1e36:	e2 82       	std	Z+2, r14	; 0x02
    1e38:	f3 82       	std	Z+3, r15	; 0x03
    1e3a:	64 83       	std	Z+4, r22	; 0x04
    1e3c:	75 83       	std	Z+5, r23	; 0x05
    1e3e:	86 83       	std	Z+6, r24	; 0x06
    1e40:	97 83       	std	Z+7, r25	; 0x07
    1e42:	40 86       	std	Z+8, r4	; 0x08
    1e44:	51 86       	std	Z+9, r5	; 0x09
    1e46:	62 86       	std	Z+10, r6	; 0x0a
    1e48:	73 86       	std	Z+11, r7	; 0x0b
    1e4a:	69 85       	ldd	r22, Y+9	; 0x09
    1e4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e52:	62 96       	adiw	r28, 0x12	; 18
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	bf 90       	pop	r11
    1e6a:	af 90       	pop	r10
    1e6c:	9f 90       	pop	r9
    1e6e:	8f 90       	pop	r8
    1e70:	7f 90       	pop	r7
    1e72:	6f 90       	pop	r6
    1e74:	5f 90       	pop	r5
    1e76:	4f 90       	pop	r4
    1e78:	3f 90       	pop	r3
    1e7a:	2f 90       	pop	r2
    1e7c:	08 95       	ret
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e82:	be 85       	ldd	r27, Y+14	; 0x0e
    1e84:	8c 93       	st	X, r24
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	98 89       	ldd	r25, Y+16	; 0x10
    1e8a:	a9 89       	ldd	r26, Y+17	; 0x11
    1e8c:	ba 89       	ldd	r27, Y+18	; 0x12
    1e8e:	04 97       	sbiw	r24, 0x04	; 4
    1e90:	a1 05       	cpc	r26, r1
    1e92:	b1 05       	cpc	r27, r1
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x1d4>
    1e96:	85 cf       	rjmp	.-246    	; 0x1da2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xde>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	d8 01       	movw	r26, r16
    1e9c:	8c 93       	st	X, r24
    1e9e:	f1 01       	movw	r30, r2
    1ea0:	10 82       	st	Z, r1
    1ea2:	11 82       	std	Z+1, r1	; 0x01
    1ea4:	12 82       	std	Z+2, r1	; 0x02
    1ea6:	13 82       	std	Z+3, r1	; 0x03
    1ea8:	14 82       	std	Z+4, r1	; 0x04
    1eaa:	15 82       	std	Z+5, r1	; 0x05
    1eac:	16 82       	std	Z+6, r1	; 0x06
    1eae:	17 82       	std	Z+7, r1	; 0x07
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	80 87       	std	Z+8, r24	; 0x08
    1eba:	91 87       	std	Z+9, r25	; 0x09
    1ebc:	a2 87       	std	Z+10, r26	; 0x0a
    1ebe:	b3 87       	std	Z+11, r27	; 0x0b
    1ec0:	c4 cf       	rjmp	.-120    	; 0x1e4a <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x186>

00001ec2 <_Z17si5351_write_bulkhPhh>:
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	f8 2e       	mov	r15, r24
    1ece:	8b 01       	movw	r16, r22
    1ed0:	d4 2f       	mov	r29, r20
    1ed2:	c5 e0       	ldi	r28, 0x05	; 5
    1ed4:	2d 2f       	mov	r18, r29
    1ed6:	a8 01       	movw	r20, r16
    1ed8:	6f 2d       	mov	r22, r15
    1eda:	80 ec       	ldi	r24, 0xC0	; 192
    1edc:	0e 94 56 08 	call	0x10ac	; 0x10ac <I2C_0_SendData>
    1ee0:	8d 17       	cp	r24, r29
    1ee2:	49 f0       	breq	.+18     	; 0x1ef6 <_Z17si5351_write_bulkhPhh+0x34>
    1ee4:	c1 50       	subi	r28, 0x01	; 1
    1ee6:	b1 f7       	brne	.-20     	; 0x1ed4 <_Z17si5351_write_bulkhPhh+0x12>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	08 95       	ret
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	f8 cf       	rjmp	.-16     	; 0x1eea <_Z17si5351_write_bulkhPhh+0x28>

00001efa <_Z7set_pllm10si5351_pll>:
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	66 97       	sbiw	r28, 0x16	; 22
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	8a 01       	movw	r16, r20
    1f0e:	ae 01       	movw	r20, r28
    1f10:	4f 5f       	subi	r20, 0xFF	; 255
    1f12:	5f 4f       	sbci	r21, 0xFF	; 255
    1f14:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_Z8pll_calcmP13u_si5351_regs>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	20 c0       	rjmp	.+64     	; 0x1f5c <_Z7set_pllm10si5351_pll+0x62>
    1f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1e:	8d 87       	std	Y+13, r24	; 0x0d
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	8e 87       	std	Y+14, r24	; 0x0e
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	83 70       	andi	r24, 0x03	; 3
    1f28:	8f 87       	std	Y+15, r24	; 0x0f
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	88 8b       	std	Y+16, r24	; 0x10
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	89 8b       	std	Y+17, r24	; 0x11
    1f32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f34:	82 95       	swap	r24
    1f36:	80 7f       	andi	r24, 0xF0	; 240
    1f38:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3a:	9f 70       	andi	r25, 0x0F	; 15
    1f3c:	89 0f       	add	r24, r25
    1f3e:	8a 8b       	std	Y+18, r24	; 0x12
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	8c 8b       	std	Y+20, r24	; 0x14
    1f48:	01 30       	cpi	r16, 0x01	; 1
    1f4a:	11 05       	cpc	r17, r1
    1f4c:	79 f0       	breq	.+30     	; 0x1f6c <_Z7set_pllm10si5351_pll+0x72>
    1f4e:	48 e0       	ldi	r20, 0x08	; 8
    1f50:	be 01       	movw	r22, r28
    1f52:	63 5f       	subi	r22, 0xF3	; 243
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	82 e2       	ldi	r24, 0x22	; 34
    1f58:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    1f5c:	66 96       	adiw	r28, 0x16	; 22
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret
    1f6c:	48 e0       	ldi	r20, 0x08	; 8
    1f6e:	be 01       	movw	r22, r28
    1f70:	63 5f       	subi	r22, 0xF3	; 243
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	8a e1       	ldi	r24, 0x1A	; 26
    1f76:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    1f7a:	f0 cf       	rjmp	.-32     	; 0x1f5c <_Z7set_pllm10si5351_pll+0x62>

00001f7c <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_0_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	f8 2e       	mov	r15, r24
    1f88:	8b 01       	movw	r16, r22
    1f8a:	d4 2f       	mov	r29, r20
    1f8c:	c5 e0       	ldi	r28, 0x05	; 5
		uint8_t tries = 5;
		bool fail;
		while(tries-- && (fail = I2C_0_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    1f8e:	2d 2f       	mov	r18, r29
    1f90:	a8 01       	movw	r20, r16
    1f92:	6f 2d       	mov	r22, r15
    1f94:	80 ec       	ldi	r24, 0xC0	; 192
    1f96:	0e 94 9a 08 	call	0x1134	; 0x1134 <I2C_0_GetData>
    1f9a:	8d 17       	cp	r24, r29
    1f9c:	49 f0       	breq	.+18     	; 0x1fb0 <_Z16si5351_read_bulkhPhh+0x34>
    1f9e:	c1 50       	subi	r28, 0x01	; 1
    1fa0:	b1 f7       	brne	.-20     	; 0x1f8e <_Z16si5351_read_bulkhPhh+0x12>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
		return(fail);
	}
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	08 95       	ret

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
		uint8_t tries = 5;
		bool fail;
		while(tries-- && (fail = I2C_0_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	f8 cf       	rjmp	.-16     	; 0x1fa4 <_Z16si5351_read_bulkhPhh+0x28>

00001fb4 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <si5351_init+0x10>
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	18 2f       	mov	r17, r24
    1fca:	6a 01       	movw	r12, r20
    1fcc:	7b 01       	movw	r14, r22
		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_0_Init();
    1fce:	0e 94 44 08 	call	0x1088	; 0x1088 <I2C_0_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    1fd2:	10 92 0c 41 	sts	0x410C, r1	; 0x80410c <_ZL8freqVCOB>
    1fd6:	10 92 0d 41 	sts	0x410D, r1	; 0x80410d <_ZL8freqVCOB+0x1>
    1fda:	10 92 0e 41 	sts	0x410E, r1	; 0x80410e <_ZL8freqVCOB+0x2>
    1fde:	10 92 0f 41 	sts	0x410F, r1	; 0x80410f <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    1fe2:	80 e4       	ldi	r24, 0x40	; 64
    1fe4:	98 e7       	ldi	r25, 0x78	; 120
    1fe6:	ad e7       	ldi	r26, 0x7D	; 125
    1fe8:	b1 e0       	ldi	r27, 0x01	; 1
    1fea:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <_ZL9xtal_freq>
    1fee:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <_ZL9xtal_freq+0x1>
    1ff2:	a0 93 1c 40 	sts	0x401C, r26	; 0x80401c <_ZL9xtal_freq+0x2>
    1ff6:	b0 93 1d 40 	sts	0x401D, r27	; 0x80401d <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    1ffa:	10 92 0b 41 	sts	0x410B, r1	; 0x80410b <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
    2000:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	be 01       	movw	r22, r28
    2006:	6f 5f       	subi	r22, 0xFF	; 255
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2010:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>
		
		if(err) return err;
    2014:	88 23       	and	r24, r24
    2016:	51 f0       	breq	.+20     	; 0x202c <si5351_init+0x78>
		}
		
		g_si5351_initialized = !err;

		return err;
	}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	08 95       	ret
		data[0] = 0xFF;
		err = si5351_write_bulk(0x03, data, 1);
		
		if(err) return err;
		/* Power down clocks */
		data[0] = 0xCC;
    202c:	8c ec       	ldi	r24, 0xCC	; 204
    202e:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	be 01       	movw	r22, r28
    2034:	6f 5f       	subi	r22, 0xFF	; 255
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	80 e1       	ldi	r24, 0x10	; 16
    203a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    203e:	90 91 fd 40 	lds	r25, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    2042:	89 2b       	or	r24, r25
    2044:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x11, data, 1);
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	be 01       	movw	r22, r28
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	81 e1       	ldi	r24, 0x11	; 17
    2052:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2056:	90 91 fd 40 	lds	r25, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    205a:	89 2b       	or	r24, r25
    205c:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>
		err |= si5351_write_bulk(0x12, data, 1);
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	be 01       	movw	r22, r28
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	82 e1       	ldi	r24, 0x12	; 18
    206a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    206e:	90 91 fd 40 	lds	r25, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    2072:	89 2b       	or	r24, r25
    2074:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    2078:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    207a:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	be 01       	movw	r22, r28
    2080:	6f 5f       	subi	r22, 0xFF	; 255
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	87 eb       	ldi	r24, 0xB7	; 183
    2086:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    208a:	90 91 fd 40 	lds	r25, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    208e:	89 2b       	or	r24, r25
    2090:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>

		if(!ref_osc_freq)
    2094:	c1 14       	cp	r12, r1
    2096:	d1 04       	cpc	r13, r1
    2098:	e1 04       	cpc	r14, r1
    209a:	f1 04       	cpc	r15, r1
    209c:	51 f4       	brne	.+20     	; 0x20b2 <si5351_init+0xfe>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    209e:	0f 2e       	mov	r0, r31
    20a0:	f0 e4       	ldi	r31, 0x40	; 64
    20a2:	cf 2e       	mov	r12, r31
    20a4:	f8 e7       	ldi	r31, 0x78	; 120
    20a6:	df 2e       	mov	r13, r31
    20a8:	fd e7       	ldi	r31, 0x7D	; 125
    20aa:	ef 2e       	mov	r14, r31
    20ac:	ff 24       	eor	r15, r15
    20ae:	f3 94       	inc	r15
    20b0:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    20b2:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <_ZL9xtal_freq>
    20b6:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <_ZL9xtal_freq+0x1>
    20ba:	a0 91 1c 40 	lds	r26, 0x401C	; 0x80401c <_ZL9xtal_freq+0x2>
    20be:	b0 91 1d 40 	lds	r27, 0x401D	; 0x80401d <_ZL9xtal_freq+0x3>
    20c2:	8c 15       	cp	r24, r12
    20c4:	9d 05       	cpc	r25, r13
    20c6:	ae 05       	cpc	r26, r14
    20c8:	bf 05       	cpc	r27, r15
    20ca:	39 f4       	brne	.+14     	; 0x20da <si5351_init+0x126>

			data[0] = reg_val;
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
		}
		
		g_si5351_initialized = !err;
    20cc:	80 91 fd 40 	lds	r24, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	98 27       	eor	r25, r24
    20d4:	90 93 fe 40 	sts	0x40FE, r25	; 0x8040fe <g_si5351_initialized>

		return err;
    20d8:	9f cf       	rjmp	.-194    	; 0x2018 <si5351_init+0x64>
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	be 01       	movw	r22, r28
    20de:	6f 5f       	subi	r22, 0xFF	; 255
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	8f e0       	ldi	r24, 0x0F	; 15
    20e4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    20e8:	81 11       	cpse	r24, r1
    20ea:	96 cf       	rjmp	.-212    	; 0x2018 <si5351_init+0x64>
			{
				return true;
			}
			
			reg_val = data[0];
    20ec:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);

			xtal_freq = ref_osc_freq;
    20ee:	c0 92 1a 40 	sts	0x401A, r12	; 0x80401a <_ZL9xtal_freq>
    20f2:	d0 92 1b 40 	sts	0x401B, r13	; 0x80401b <_ZL9xtal_freq+0x1>
    20f6:	e0 92 1c 40 	sts	0x401C, r14	; 0x80401c <_ZL9xtal_freq+0x2>
    20fa:	f0 92 1d 40 	sts	0x401D, r15	; 0x80401d <_ZL9xtal_freq+0x3>
			}
			
			reg_val = data[0];

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    20fe:	8f 73       	andi	r24, 0x3F	; 63
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    2100:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	be 01       	movw	r22, r28
    2106:	6f 5f       	subi	r22, 0xFF	; 255
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	8f e0       	ldi	r24, 0x0F	; 15
    210c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2110:	90 91 fd 40 	lds	r25, 0x40FD	; 0x8040fd <_ZZ11si5351_initE3err>
    2114:	89 2b       	or	r24, r25
    2116:	80 93 fd 40 	sts	0x40FD, r24	; 0x8040fd <_ZZ11si5351_initE3err>
    211a:	d8 cf       	rjmp	.-80     	; 0x20cc <si5351_init+0x118>

0000211c <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	00 d0       	rcall	.+0      	; 0x2126 <si5351_clock_enable+0xa>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	18 2f       	mov	r17, r24
    212c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	be 01       	movw	r22, r28
    2132:	6f 5f       	subi	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    213c:	81 11       	cpse	r24, r1
    213e:	28 c0       	rjmp	.+80     	; 0x2190 <si5351_clock_enable+0x74>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    2140:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    2142:	00 23       	and	r16, r16
    2144:	e1 f0       	breq	.+56     	; 0x217e <si5351_clock_enable+0x62>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    2146:	21 e0       	ldi	r18, 0x01	; 1
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <si5351_clock_enable+0x34>
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	1a 95       	dec	r17
    2152:	e2 f7       	brpl	.-8      	; 0x214c <si5351_clock_enable+0x30>
    2154:	20 95       	com	r18
    2156:	82 23       	and	r24, r18
		else
		{
			reg_val |= (1 << (uint8_t)clk);
		}

		data[0] = reg_val;
    2158:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	be 01       	movw	r22, r28
    215e:	6f 5f       	subi	r22, 0xFF	; 255
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2168:	81 11       	cpse	r24, r1
    216a:	15 c0       	rjmp	.+42     	; 0x2196 <si5351_clock_enable+0x7a>

		return ERROR_CODE_NO_ERROR;
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	80 e0       	ldi	r24, 0x00	; 0
	}
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret
		{
			reg_val &= ~(1 << (uint8_t)clk);
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <si5351_clock_enable+0x6c>
    2184:	22 0f       	add	r18, r18
    2186:	33 1f       	adc	r19, r19
    2188:	1a 95       	dec	r17
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <si5351_clock_enable+0x68>
    218c:	82 2b       	or	r24, r18
    218e:	e4 cf       	rjmp	.-56     	; 0x2158 <si5351_clock_enable+0x3c>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    2190:	8c ef       	ldi	r24, 0xFC	; 252
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	ed cf       	rjmp	.-38     	; 0x2170 <si5351_clock_enable+0x54>
		{
			reg_val |= (1 << (uint8_t)clk);
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    2196:	8c ef       	ldi	r24, 0xFC	; 252
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	ea cf       	rjmp	.-44     	; 0x2170 <si5351_clock_enable+0x54>

0000219c <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <si5351_drive_strength+0xc>
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	8b 01       	movw	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    21ae:	68 94       	set
    21b0:	ff 24       	eor	r15, r15
    21b2:	f4 f8       	bld	r15, 4
    21b4:	f8 0e       	add	r15, r24
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	be 01       	movw	r22, r28
    21ba:	6f 5f       	subi	r22, 0xFF	; 255
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 2d       	mov	r24, r15
    21c0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    21c4:	81 11       	cpse	r24, r1
    21c6:	29 c0       	rjmp	.+82     	; 0x221a <si5351_drive_strength+0x7e>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    21c8:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    21ca:	01 30       	cpi	r16, 0x01	; 1
    21cc:	11 05       	cpc	r17, r1
    21ce:	e9 f0       	breq	.+58     	; 0x220a <si5351_drive_strength+0x6e>
    21d0:	d0 f0       	brcs	.+52     	; 0x2206 <si5351_drive_strength+0x6a>
    21d2:	02 30       	cpi	r16, 0x02	; 2
    21d4:	11 05       	cpc	r17, r1
    21d6:	e1 f0       	breq	.+56     	; 0x2210 <si5351_drive_strength+0x74>
    21d8:	03 30       	cpi	r16, 0x03	; 3
    21da:	11 05       	cpc	r17, r1
    21dc:	e1 f0       	breq	.+56     	; 0x2216 <si5351_drive_strength+0x7a>
			{
			}
			break;
		}

		data[0] = reg_val;
    21de:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	be 01       	movw	r22, r28
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	8f 2d       	mov	r24, r15
    21ea:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    21ee:	81 11       	cpse	r24, r1
    21f0:	17 c0       	rjmp	.+46     	; 0x2220 <si5351_drive_strength+0x84>

		return ERROR_CODE_NO_ERROR;
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	80 e0       	ldi	r24, 0x00	; 0
	}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	ff 90       	pop	r15
    2204:	08 95       	ret

		switch(drive)
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    2206:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    2208:	ea cf       	rjmp	.-44     	; 0x21de <si5351_drive_strength+0x42>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    220a:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    220c:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    220e:	e7 cf       	rjmp	.-50     	; 0x21de <si5351_drive_strength+0x42>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    2210:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    2212:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    2214:	e4 cf       	rjmp	.-56     	; 0x21de <si5351_drive_strength+0x42>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    2216:	83 60       	ori	r24, 0x03	; 3
			}
			break;
    2218:	e2 cf       	rjmp	.-60     	; 0x21de <si5351_drive_strength+0x42>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    221a:	8b ef       	ldi	r24, 0xFB	; 251
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	eb cf       	rjmp	.-42     	; 0x21f6 <si5351_drive_strength+0x5a>
			}
			break;
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    2220:	8b ef       	ldi	r24, 0xFB	; 251
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	e8 cf       	rjmp	.-48     	; 0x21f6 <si5351_drive_strength+0x5a>

00002226 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	00 d0       	rcall	.+0      	; 0x2232 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xc>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	7b 01       	movw	r14, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    2238:	10 e1       	ldi	r17, 0x10	; 16
    223a:	18 0f       	add	r17, r24
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	be 01       	movw	r22, r28
    2240:	6f 5f       	subi	r22, 0xFF	; 255
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	81 2f       	mov	r24, r17
    2246:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    224a:	81 11       	cpse	r24, r1
    224c:	11 c0       	rjmp	.+34     	; 0x2270 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4a>
		{
			return(true);
		}
		
		reg_val = data[0];
    224e:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	e9 16       	cp	r14, r25
    2254:	f1 04       	cpc	r15, r1
    2256:	a1 f0       	breq	.+40     	; 0x2280 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x5a>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
		}
		else if(pll == SI5351_PLLB)
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	e9 16       	cp	r14, r25
    225c:	f1 04       	cpc	r15, r1
    225e:	91 f0       	breq	.+36     	; 0x2284 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x5e>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
		}

		data[0] = reg_val;
    2260:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	be 01       	movw	r22, r28
    2266:	6f 5f       	subi	r22, 0xFF	; 255
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	81 2f       	mov	r24, r17
    226c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	08 95       	ret
		
		reg_val = data[0];

		if(pll == SI5351_PLLA)
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    2280:	8f 7d       	andi	r24, 0xDF	; 223
    2282:	ee cf       	rjmp	.-36     	; 0x2260 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x3a>
		}
		else if(pll == SI5351_PLLB)
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    2284:	80 62       	ori	r24, 0x20	; 32
    2286:	ec cf       	rjmp	.-40     	; 0x2260 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x3a>

00002288 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <_Z16set_integer_mode12si5351_clockb+0xa>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    2298:	10 e1       	ldi	r17, 0x10	; 16
    229a:	18 0f       	add	r17, r24
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	be 01       	movw	r22, r28
    22a0:	6f 5f       	subi	r22, 0xFF	; 255
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	81 2f       	mov	r24, r17
    22a6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    22aa:	81 11       	cpse	r24, r1
    22ac:	0c c0       	rjmp	.+24     	; 0x22c6 <_Z16set_integer_mode12si5351_clockb+0x3e>
		{
			return(true);
		}
		
		reg_val = data[0];
    22ae:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    22b0:	00 23       	and	r16, r16
    22b2:	81 f0       	breq	.+32     	; 0x22d4 <_Z16set_integer_mode12si5351_clockb+0x4c>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    22b4:	80 64       	ori	r24, 0x40	; 64
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
		}

		data[0] = reg_val;
    22b6:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	be 01       	movw	r22, r28
    22bc:	6f 5f       	subi	r22, 0xFF	; 255
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	81 2f       	mov	r24, r17
    22c2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
	}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    22d4:	8f 7b       	andi	r24, 0xBF	; 191
    22d6:	ef cf       	rjmp	.-34     	; 0x22b6 <_Z16set_integer_mode12si5351_clockb+0x2e>

000022d8 <_Z6ms_div12si5351_clockhb>:
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
	}


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <_Z6ms_div12si5351_clockhb+0xc>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	91 05       	cpc	r25, r1
    22ec:	29 f0       	breq	.+10     	; 0x22f8 <_Z6ms_div12si5351_clockhb+0x20>
    22ee:	88 f1       	brcs	.+98     	; 0x2352 <_Z6ms_div12si5351_clockhb+0x7a>
    22f0:	02 97       	sbiw	r24, 0x02	; 2
    22f2:	51 f1       	breq	.+84     	; 0x2348 <_Z6ms_div12si5351_clockhb+0x70>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	20 c0       	rjmp	.+64     	; 0x2338 <_Z6ms_div12si5351_clockhb+0x60>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    22f8:	0f 2e       	mov	r0, r31
    22fa:	f4 e3       	ldi	r31, 0x34	; 52
    22fc:	ff 2e       	mov	r15, r31
    22fe:	f0 2d       	mov	r31, r0
    2300:	04 2f       	mov	r16, r20
    2302:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	be 01       	movw	r22, r28
    2308:	6f 5f       	subi	r22, 0xFF	; 255
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	8f 2d       	mov	r24, r15
    230e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    2312:	81 11       	cpse	r24, r1
    2314:	11 c0       	rjmp	.+34     	; 0x2338 <_Z6ms_div12si5351_clockhb+0x60>
		{
			return(true);
		}
		
		reg_val = data[0];
    2316:	89 81       	ldd	r24, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    2318:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    231a:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    231c:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    231e:	90 e1       	ldi	r25, 0x10	; 16
    2320:	19 9f       	mul	r17, r25
    2322:	b0 01       	movw	r22, r0
    2324:	11 24       	eor	r1, r1
    2326:	68 2b       	or	r22, r24

		data[0] = reg_val;
    2328:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	be 01       	movw	r22, r28
    232e:	6f 5f       	subi	r22, 0xFF	; 255
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	8f 2d       	mov	r24, r15
    2334:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
	}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	08 95       	ret
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    2348:	0f 2e       	mov	r0, r31
    234a:	fc e3       	ldi	r31, 0x3C	; 60
    234c:	ff 2e       	mov	r15, r31
    234e:	f0 2d       	mov	r31, r0
			}
			break;
    2350:	d7 cf       	rjmp	.-82     	; 0x2300 <_Z6ms_div12si5351_clockhb+0x28>

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    2352:	0f 2e       	mov	r0, r31
    2354:	fc e2       	ldi	r31, 0x2C	; 44
    2356:	ff 2e       	mov	r15, r31
    2358:	f0 2d       	mov	r31, r0
    235a:	d2 cf       	rjmp	.-92     	; 0x2300 <_Z6ms_div12si5351_clockhb+0x28>

0000235c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	af 92       	push	r10
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	69 97       	sbiw	r28, 0x19	; 25
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	3c 01       	movw	r6, r24
    2380:	ce 86       	std	Y+14, r12	; 0x0e
    2382:	df 86       	std	Y+15, r13	; 0x0f
    2384:	e8 8a       	std	Y+16, r14	; 0x10
    2386:	0a 8b       	std	Y+18, r16	; 0x12
    2388:	1b 8b       	std	Y+19, r17	; 0x13
    238a:	2c 8b       	std	Y+20, r18	; 0x14
    238c:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    238e:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    2390:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    2392:	88 0f       	add	r24, r24
    2394:	88 0f       	add	r24, r24
    2396:	88 0f       	add	r24, r24
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	be 01       	movw	r22, r28
    239c:	64 5f       	subi	r22, 0xF4	; 244
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	84 5d       	subi	r24, 0xD4	; 212
    23a2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_Z16si5351_read_bulkhPhh>
    23a6:	81 11       	cpse	r24, r1
    23a8:	24 c0       	rjmp	.+72     	; 0x23f2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
		{
			return(true);
		}
		
		reg_val = data[0];
    23aa:	9c 85       	ldd	r25, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    23ac:	88 89       	ldd	r24, Y+16	; 0x10
    23ae:	83 70       	andi	r24, 0x03	; 3
			return(true);
		}
		
		reg_val = data[0];

		reg_val &= 0xFC;    /*~(0x03); */
    23b0:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    23b2:	89 2b       	or	r24, r25
    23b4:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    23ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    23bc:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    23be:	88 8d       	ldd	r24, Y+24	; 0x18
    23c0:	82 95       	swap	r24
    23c2:	80 7f       	andi	r24, 0xF0	; 240
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    23c4:	9c 89       	ldd	r25, Y+20	; 0x14
    23c6:	9f 70       	andi	r25, 0x0F	; 15
    23c8:	89 0f       	add	r24, r25
    23ca:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    23d0:	8a 89       	ldd	r24, Y+18	; 0x12
    23d2:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */

		switch(clk)
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	68 16       	cp	r6, r24
    23d8:	71 04       	cpc	r7, r1
    23da:	29 f1       	breq	.+74     	; 0x2426 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xca>
    23dc:	d0 f0       	brcs	.+52     	; 0x2412 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb6>
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	68 16       	cp	r6, r24
    23e2:	71 04       	cpc	r7, r1
    23e4:	51 f1       	breq	.+84     	; 0x243a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xde>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    23e6:	6a 2d       	mov	r22, r10
    23e8:	c3 01       	movw	r24, r6
    23ea:	0e 94 44 11 	call	0x2288	; 0x2288 <_Z16set_integer_mode12si5351_clockb>
    23ee:	88 23       	and	r24, r24
    23f0:	71 f1       	breq	.+92     	; 0x244e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xf2>
		{
			return(true);
		}
		
		return(false);
	}
    23f2:	69 96       	adiw	r28, 0x19	; 25
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	af 90       	pop	r10
    240a:	8f 90       	pop	r8
    240c:	7f 90       	pop	r7
    240e:	6f 90       	pop	r6
    2410:	08 95       	ret

		switch(clk)
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    2412:	48 e0       	ldi	r20, 0x08	; 8
    2414:	be 01       	movw	r22, r28
    2416:	6f 5f       	subi	r22, 0xFF	; 255
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	8a e2       	ldi	r24, 0x2A	; 42
    241c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2420:	88 23       	and	r24, r24
    2422:	09 f3       	breq	.-62     	; 0x23e6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    2424:	e6 cf       	rjmp	.-52     	; 0x23f2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    2426:	48 e0       	ldi	r20, 0x08	; 8
    2428:	be 01       	movw	r22, r28
    242a:	6f 5f       	subi	r22, 0xFF	; 255
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	82 e3       	ldi	r24, 0x32	; 50
    2430:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2434:	88 23       	and	r24, r24
    2436:	b9 f2       	breq	.-82     	; 0x23e6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    2438:	dc cf       	rjmp	.-72     	; 0x23f2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    243a:	48 e0       	ldi	r20, 0x08	; 8
    243c:	be 01       	movw	r22, r28
    243e:	6f 5f       	subi	r22, 0xFF	; 255
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	8a e3       	ldi	r24, 0x3A	; 58
    2444:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2448:	88 23       	and	r24, r24
    244a:	69 f2       	breq	.-102    	; 0x23e6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    244c:	d2 cf       	rjmp	.-92     	; 0x23f2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
		if(set_integer_mode(clk, int_mode))
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    244e:	48 a5       	ldd	r20, Y+40	; 0x28
    2450:	68 2d       	mov	r22, r8
    2452:	c3 01       	movw	r24, r6
    2454:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_Z6ms_div12si5351_clockhb>
    2458:	cc cf       	rjmp	.-104    	; 0x23f2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>

0000245a <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    245a:	4f 92       	push	r4
    245c:	5f 92       	push	r5
    245e:	6f 92       	push	r6
    2460:	7f 92       	push	r7
    2462:	8f 92       	push	r8
    2464:	9f 92       	push	r9
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	64 97       	sbiw	r28, 0x14	; 20
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	6b 01       	movw	r12, r22
    2486:	7c 01       	movw	r14, r24
    2488:	3a 01       	movw	r6, r20
    248a:	b2 2e       	mov	r11, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    248c:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    248e:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    2490:	10 91 fe 40 	lds	r17, 0x40FE	; 0x8040fe <g_si5351_initialized>
    2494:	11 23       	and	r17, r17
    2496:	09 f4       	brne	.+2      	; 0x249a <si5351_set_freq+0x40>
    2498:	32 c1       	rjmp	.+612    	; 0x26fe <si5351_set_freq+0x2a4>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    249a:	80 e4       	ldi	r24, 0x40	; 64
    249c:	c8 16       	cp	r12, r24
    249e:	82 e4       	ldi	r24, 0x42	; 66
    24a0:	d8 06       	cpc	r13, r24
    24a2:	8f e0       	ldi	r24, 0x0F	; 15
    24a4:	e8 06       	cpc	r14, r24
    24a6:	f1 04       	cpc	r15, r1
    24a8:	68 f0       	brcs	.+26     	; 0x24c4 <si5351_set_freq+0x6a>
			{
				freq_Fout /= 100;
    24aa:	c7 01       	movw	r24, r14
    24ac:	24 e6       	ldi	r18, 0x64	; 100
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodsi4>
				freq_Fout *= 100;
    24b8:	a4 e6       	ldi	r26, 0x64	; 100
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__muluhisi3>
    24c0:	6b 01       	movw	r12, r22
    24c2:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	69 16       	cp	r6, r25
    24c8:	71 04       	cpc	r7, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <si5351_set_freq+0x74>
    24cc:	a4 c0       	rjmp	.+328    	; 0x2616 <si5351_set_freq+0x1bc>
    24ce:	20 f1       	brcs	.+72     	; 0x2518 <si5351_set_freq+0xbe>
    24d0:	b2 e0       	ldi	r27, 0x02	; 2
    24d2:	6b 16       	cp	r6, r27
    24d4:	71 04       	cpc	r7, r1
    24d6:	09 f0       	breq	.+2      	; 0x24da <si5351_set_freq+0x80>
    24d8:	13 c1       	rjmp	.+550    	; 0x2700 <si5351_set_freq+0x2a6>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    24da:	80 91 0b 41 	lds	r24, 0x410B	; 0x80410b <_ZL17enabledClocksMask>
    24de:	84 60       	ori	r24, 0x04	; 4
    24e0:	80 93 0b 41 	sts	0x410B, r24	; 0x80410b <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    24e4:	80 95       	com	r24
    24e6:	8c 6f       	ori	r24, 0xFC	; 252
    24e8:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	be 01       	movw	r22, r28
    24ee:	61 5f       	subi	r22, 0xF1	; 241
    24f0:	7f 4f       	sbci	r23, 0xFF	; 255
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    24f8:	18 2f       	mov	r17, r24
    24fa:	81 11       	cpse	r24, r1
    24fc:	01 c1       	rjmp	.+514    	; 0x2700 <si5351_set_freq+0x2a6>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    24fe:	c0 92 07 41 	sts	0x4107, r12	; 0x804107 <_ZL9clock_out+0x8>
    2502:	d0 92 08 41 	sts	0x4108, r13	; 0x804108 <_ZL9clock_out+0x9>
    2506:	e0 92 09 41 	sts	0x4109, r14	; 0x804109 <_ZL9clock_out+0xa>
    250a:	f0 92 0a 41 	sts	0x410A, r15	; 0x80410a <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    250e:	0f 2e       	mov	r0, r31
    2510:	f2 e1       	ldi	r31, 0x12	; 18
    2512:	9f 2e       	mov	r9, r31
    2514:	f0 2d       	mov	r31, r0
    2516:	9d c0       	rjmp	.+314    	; 0x2652 <si5351_set_freq+0x1f8>
		/* Only good for Si5351A3 variant */
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    2518:	80 91 0b 41 	lds	r24, 0x410B	; 0x80410b <_ZL17enabledClocksMask>
    251c:	81 60       	ori	r24, 0x01	; 1
    251e:	80 93 0b 41 	sts	0x410B, r24	; 0x80410b <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    2522:	c0 92 ff 40 	sts	0x40FF, r12	; 0x8040ff <_ZL9clock_out>
    2526:	d0 92 00 41 	sts	0x4100, r13	; 0x804100 <_ZL9clock_out+0x1>
    252a:	e0 92 01 41 	sts	0x4101, r14	; 0x804101 <_ZL9clock_out+0x2>
    252e:	f0 92 02 41 	sts	0x4102, r15	; 0x804102 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    2532:	68 94       	set
    2534:	99 24       	eor	r9, r9
    2536:	94 f8       	bld	r9, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    2538:	44 24       	eor	r4, r4
    253a:	43 94       	inc	r4
    253c:	51 2c       	mov	r5, r1
		if((target_pll == SI5351_PLLA) || !freqVCOB)
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    253e:	8e 01       	movw	r16, r28
    2540:	02 5f       	subi	r16, 0xF2	; 242
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	9e 01       	movw	r18, r28
    2546:	23 5f       	subi	r18, 0xF3	; 243
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	ae 01       	movw	r20, r28
    254c:	4f 5f       	subi	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	c7 01       	movw	r24, r14
    2552:	b6 01       	movw	r22, r12
    2554:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    2558:	69 8b       	std	Y+17, r22	; 0x11
    255a:	7a 8b       	std	Y+18, r23	; 0x12
    255c:	8b 8b       	std	Y+19, r24	; 0x13
    255e:	9c 8b       	std	Y+20, r25	; 0x14
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    2560:	b2 01       	movw	r22, r4
    2562:	c3 01       	movw	r24, r6
    2564:	0e 94 13 11 	call	0x2226	; 0x2226 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    2568:	18 2f       	mov	r17, r24
    256a:	81 11       	cpse	r24, r1
    256c:	c9 c0       	rjmp	.+402    	; 0x2700 <si5351_set_freq+0x2a6>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    256e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2570:	8f 93       	push	r24
    2572:	81 2c       	mov	r8, r1
    2574:	ad 84       	ldd	r10, Y+13	; 0x0d
    2576:	c9 80       	ldd	r12, Y+1	; 0x01
    2578:	da 80       	ldd	r13, Y+2	; 0x02
    257a:	eb 80       	ldd	r14, Y+3	; 0x03
    257c:	fc 80       	ldd	r15, Y+4	; 0x04
    257e:	0d 81       	ldd	r16, Y+5	; 0x05
    2580:	1e 81       	ldd	r17, Y+6	; 0x06
    2582:	2f 81       	ldd	r18, Y+7	; 0x07
    2584:	38 85       	ldd	r19, Y+8	; 0x08
    2586:	49 85       	ldd	r20, Y+9	; 0x09
    2588:	5a 85       	ldd	r21, Y+10	; 0x0a
    258a:	6b 85       	ldd	r22, Y+11	; 0x0b
    258c:	7c 85       	ldd	r23, Y+12	; 0x0c
    258e:	c3 01       	movw	r24, r6
    2590:	0e 94 ae 11 	call	0x235c	; 0x235c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    2594:	18 2f       	mov	r17, r24
    2596:	0f 90       	pop	r0
    2598:	81 11       	cpse	r24, r1
    259a:	b2 c0       	rjmp	.+356    	; 0x2700 <si5351_set_freq+0x2a6>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	ab 89       	ldd	r26, Y+19	; 0x13
    25a2:	bc 89       	ldd	r27, Y+20	; 0x14
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	a1 05       	cpc	r26, r1
    25a8:	b1 05       	cpc	r27, r1
    25aa:	09 f0       	breq	.+2      	; 0x25ae <si5351_set_freq+0x154>
    25ac:	79 c0       	rjmp	.+242    	; 0x26a0 <si5351_set_freq+0x246>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    25ae:	bb 20       	and	r11, r11
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <si5351_set_freq+0x15a>
    25b2:	7c c0       	rjmp	.+248    	; 0x26ac <si5351_set_freq+0x252>
		{
 			data[0] = enabledClocksMask;
    25b4:	80 91 0b 41 	lds	r24, 0x410B	; 0x80410b <_ZL17enabledClocksMask>
    25b8:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	be 01       	movw	r22, r28
    25be:	61 5f       	subi	r22, 0xF1	; 241
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    25c8:	81 11       	cpse	r24, r1
    25ca:	af c0       	rjmp	.+350    	; 0x272a <si5351_set_freq+0x2d0>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    25cc:	4a 94       	dec	r4
    25ce:	45 28       	or	r4, r5
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <si5351_set_freq+0x17a>
    25d2:	7c c0       	rjmp	.+248    	; 0x26cc <si5351_set_freq+0x272>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    25d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d6:	88 23       	and	r24, r24
    25d8:	09 f4       	brne	.+2      	; 0x25dc <si5351_set_freq+0x182>
    25da:	83 c0       	rjmp	.+262    	; 0x26e2 <si5351_set_freq+0x288>
			{
 				data[0] = 0x6C;
    25dc:	8c e6       	ldi	r24, 0x6C	; 108
    25de:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	be 01       	movw	r22, r28
    25e4:	61 5f       	subi	r22, 0xF1	; 241
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255
    25e8:	89 2d       	mov	r24, r9
    25ea:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    25ee:	81 11       	cpse	r24, r1
    25f0:	9e c0       	rjmp	.+316    	; 0x272e <si5351_set_freq+0x2d4>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	ab 89       	ldd	r26, Y+19	; 0x13
    25f8:	bc 89       	ldd	r27, Y+20	; 0x14
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	a1 05       	cpc	r26, r1
    25fe:	b1 05       	cpc	r27, r1
    2600:	09 f4       	brne	.+2      	; 0x2604 <si5351_set_freq+0x1aa>
    2602:	7e c0       	rjmp	.+252    	; 0x2700 <si5351_set_freq+0x2a6>
			{
				freqVCOB = freq_VCO;
    2604:	80 93 0c 41 	sts	0x410C, r24	; 0x80410c <_ZL8freqVCOB>
    2608:	90 93 0d 41 	sts	0x410D, r25	; 0x80410d <_ZL8freqVCOB+0x1>
    260c:	a0 93 0e 41 	sts	0x410E, r26	; 0x80410e <_ZL8freqVCOB+0x2>
    2610:	b0 93 0f 41 	sts	0x410F, r27	; 0x80410f <_ZL8freqVCOB+0x3>
    2614:	75 c0       	rjmp	.+234    	; 0x2700 <si5351_set_freq+0x2a6>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    2616:	80 91 0b 41 	lds	r24, 0x410B	; 0x80410b <_ZL17enabledClocksMask>
    261a:	82 60       	ori	r24, 0x02	; 2
    261c:	80 93 0b 41 	sts	0x410B, r24	; 0x80410b <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    2620:	80 95       	com	r24
    2622:	8a 6f       	ori	r24, 0xFA	; 250
    2624:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	be 01       	movw	r22, r28
    262a:	61 5f       	subi	r22, 0xF1	; 241
    262c:	7f 4f       	sbci	r23, 0xFF	; 255
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    2634:	18 2f       	mov	r17, r24
    2636:	81 11       	cpse	r24, r1
    2638:	63 c0       	rjmp	.+198    	; 0x2700 <si5351_set_freq+0x2a6>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    263a:	c0 92 03 41 	sts	0x4103, r12	; 0x804103 <_ZL9clock_out+0x4>
    263e:	d0 92 04 41 	sts	0x4104, r13	; 0x804104 <_ZL9clock_out+0x5>
    2642:	e0 92 05 41 	sts	0x4105, r14	; 0x804105 <_ZL9clock_out+0x6>
    2646:	f0 92 06 41 	sts	0x4106, r15	; 0x804106 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    264a:	0f 2e       	mov	r0, r31
    264c:	f1 e1       	ldi	r31, 0x11	; 17
    264e:	9f 2e       	mov	r9, r31
    2650:	f0 2d       	mov	r31, r0
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    2652:	80 91 0c 41 	lds	r24, 0x410C	; 0x80410c <_ZL8freqVCOB>
    2656:	90 91 0d 41 	lds	r25, 0x410D	; 0x80410d <_ZL8freqVCOB+0x1>
    265a:	a0 91 0e 41 	lds	r26, 0x410E	; 0x80410e <_ZL8freqVCOB+0x2>
    265e:	b0 91 0f 41 	lds	r27, 0x410F	; 0x80410f <_ZL8freqVCOB+0x3>
    2662:	89 2b       	or	r24, r25
    2664:	8a 2b       	or	r24, r26
    2666:	8b 2b       	or	r24, r27
    2668:	29 f4       	brne	.+10     	; 0x2674 <si5351_set_freq+0x21a>
    266a:	68 94       	set
    266c:	44 24       	eor	r4, r4
    266e:	41 f8       	bld	r4, 1
    2670:	51 2c       	mov	r5, r1
    2672:	65 cf       	rjmp	.-310    	; 0x253e <si5351_set_freq+0xe4>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    2674:	8e 01       	movw	r16, r28
    2676:	02 5f       	subi	r16, 0xF2	; 242
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	9e 01       	movw	r18, r28
    267c:	23 5f       	subi	r18, 0xF3	; 243
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	ae 01       	movw	r20, r28
    2682:	4f 5f       	subi	r20, 0xFF	; 255
    2684:	5f 4f       	sbci	r21, 0xFF	; 255
    2686:	c7 01       	movw	r24, r14
    2688:	b6 01       	movw	r22, r12
    268a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
    268e:	68 94       	set
    2690:	44 24       	eor	r4, r4
    2692:	41 f8       	bld	r4, 1
    2694:	51 2c       	mov	r5, r1
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    2696:	19 8a       	std	Y+17, r1	; 0x11
    2698:	1a 8a       	std	Y+18, r1	; 0x12
    269a:	1b 8a       	std	Y+19, r1	; 0x13
    269c:	1c 8a       	std	Y+20, r1	; 0x14
    269e:	60 cf       	rjmp	.-320    	; 0x2560 <si5351_set_freq+0x106>

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
			{
				set_pll(freq_VCO, target_pll);
    26a0:	a2 01       	movw	r20, r4
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_Z7set_pllm10si5351_pll>
    26aa:	81 cf       	rjmp	.-254    	; 0x25ae <si5351_set_freq+0x154>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    26ac:	80 91 0b 41 	lds	r24, 0x410B	; 0x80410b <_ZL17enabledClocksMask>
    26b0:	80 95       	com	r24
    26b2:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	be 01       	movw	r22, r28
    26b8:	61 5f       	subi	r22, 0xF1	; 241
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    26c2:	88 23       	and	r24, r24
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <si5351_set_freq+0x26e>
    26c6:	82 cf       	rjmp	.-252    	; 0x25cc <si5351_set_freq+0x172>
			{
				return true;
    26c8:	18 2f       	mov	r17, r24
    26ca:	1a c0       	rjmp	.+52     	; 0x2700 <si5351_set_freq+0x2a6>
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
		{
 			data[0] = 0x4C;
    26cc:	8c e4       	ldi	r24, 0x4C	; 76
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	be 01       	movw	r22, r28
    26d4:	61 5f       	subi	r22, 0xF1	; 241
    26d6:	7f 4f       	sbci	r23, 0xFF	; 255
    26d8:	89 2d       	mov	r24, r9
    26da:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    26de:	18 2f       	mov	r17, r24
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <si5351_set_freq+0x2a6>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    26e2:	8c e2       	ldi	r24, 0x2C	; 44
    26e4:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	be 01       	movw	r22, r28
    26ea:	61 5f       	subi	r22, 0xF1	; 241
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	89 2d       	mov	r24, r9
    26f0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <_Z17si5351_write_bulkhPhh>
    26f4:	88 23       	and	r24, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <si5351_set_freq+0x2a0>
    26f8:	7c cf       	rjmp	.-264    	; 0x25f2 <si5351_set_freq+0x198>
				{
					return true;
    26fa:	18 2f       	mov	r17, r24
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <si5351_set_freq+0x2a6>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    26fe:	11 e0       	ldi	r17, 0x01	; 1
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    2700:	81 2f       	mov	r24, r17
    2702:	64 96       	adiw	r28, 0x14	; 20
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	bf 90       	pop	r11
    271a:	af 90       	pop	r10
    271c:	9f 90       	pop	r9
    271e:	8f 90       	pop	r8
    2720:	7f 90       	pop	r7
    2722:	6f 90       	pop	r6
    2724:	5f 90       	pop	r5
    2726:	4f 90       	pop	r4
    2728:	08 95       	ret
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    272a:	18 2f       	mov	r17, r24
    272c:	e9 cf       	rjmp	.-46     	; 0x2700 <si5351_set_freq+0x2a6>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    272e:	18 2f       	mov	r17, r24
    2730:	e7 cf       	rjmp	.-50     	; 0x2700 <si5351_set_freq+0x2a6>

00002732 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp; /* Sleep enable: disabled */
    2732:	10 92 50 00 	sts	0x0050, r1	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
//			 | SLPCTRL_SMODE_IDLE_gc;  /* Idle mode */
//			 | SLPCTRL_SMODE_STDBY_gc; /* Standby Mode */
//			 | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	08 95       	ret

0000273a <SLPCTRL_set_sleep_mode>:

void SLPCTRL_set_sleep_mode(SLPCTRL_SMODE_t setmode)
{
	SLPCTRL.CTRLA = (SLPCTRL.CTRLA & ~SLPCTRL_SMODE_gm) | (setmode & SLPCTRL_SMODE_gm);
    273a:	e0 e5       	ldi	r30, 0x50	; 80
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	90 81       	ld	r25, Z
    2740:	99 7f       	andi	r25, 0xF9	; 249
    2742:	86 70       	andi	r24, 0x06	; 6
    2744:	98 2b       	or	r25, r24
    2746:	90 83       	st	Z, r25
}
    2748:	08 95       	ret

0000274a <TIMERB_init>:
 *
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    274a:	e0 e0       	ldi	r30, 0x00	; 0
    274c:	fb e0       	ldi	r31, 0x0B	; 11
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB0.CCMP = 0x9C40;
    2752:	20 e4       	ldi	r18, 0x40	; 64
    2754:	3c e9       	ldi	r19, 0x9C	; 156
    2756:	24 87       	std	Z+12, r18	; 0x0c
    2758:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB0.INTFLAGS = (TCB_CAPT_bm | TCB_OVF_bm); /* Clear flag */
    275e:	96 83       	std	Z+6, r25	; 0x06

/********************************************************************************/
/** 
LED Timer
*/
TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2760:	e0 e1       	ldi	r30, 0x10	; 16
    2762:	fb e0       	ldi	r31, 0x0B	; 11
    2764:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB1.CCMP = 0x5DC0;
    2766:	40 ec       	ldi	r20, 0xC0	; 192
    2768:	5d e5       	ldi	r21, 0x5D	; 93
    276a:	44 87       	std	Z+12, r20	; 0x0c
    276c:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    276e:	80 83       	st	Z, r24
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    2770:	86 83       	std	Z+6, r24	; 0x06
/********************************************************************************/
/** 
I2C Timeout Flag Timer
*/

CPUINT.LVL1VEC = 30; /* Set to level 1 - highest priority interrupt */
    2772:	a0 e1       	ldi	r26, 0x10	; 16
    2774:	b1 e0       	ldi	r27, 0x01	; 1
    2776:	4e e1       	ldi	r20, 0x1E	; 30
    2778:	13 96       	adiw	r26, 0x03	; 3
    277a:	4c 93       	st	X, r20
    277c:	13 97       	sbiw	r26, 0x03	; 3
TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    277e:	e0 e2       	ldi	r30, 0x20	; 32
    2780:	fb e0       	ldi	r31, 0x0B	; 11
    2782:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB2.CCMP = 0xFFFF;
    2784:	6f ef       	ldi	r22, 0xFF	; 255
    2786:	7f ef       	ldi	r23, 0xFF	; 255
    2788:	64 87       	std	Z+12, r22	; 0x0c
    278a:	75 87       	std	Z+13, r23	; 0x0d

TCB2.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    278c:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB2.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    278e:	86 83       	std	Z+6, r24	; 0x06
CPUINT.LVL1VEC = 30; /* Set to level 1 - highest priority interrupt */
    2790:	13 96       	adiw	r26, 0x03	; 3
    2792:	4c 93       	st	X, r20


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2794:	e0 e3       	ldi	r30, 0x30	; 48
    2796:	fb e0       	ldi	r31, 0x0B	; 11
    2798:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB3.CCMP = 0x9C40;
    279a:	24 87       	std	Z+12, r18	; 0x0c
    279c:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    279e:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    27a0:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	08 95       	ret

000027a6 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    27aa:	61 15       	cp	r22, r1
    27ac:	71 05       	cpc	r23, r1
    27ae:	81 05       	cpc	r24, r1
    27b0:	91 05       	cpc	r25, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <util_delay_ms+0x10>
    27b4:	6a c0       	rjmp	.+212    	; 0x288a <util_delay_ms+0xe4>
	{
		if(counting)
    27b6:	20 91 10 41 	lds	r18, 0x4110	; 0x804110 <_ZZ13util_delay_msE8counting>
    27ba:	22 23       	and	r18, r18
    27bc:	f1 f1       	breq	.+124    	; 0x283a <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    27be:	00 91 15 41 	lds	r16, 0x4115	; 0x804115 <_ZL12g_ms_counter>
    27c2:	10 91 16 41 	lds	r17, 0x4116	; 0x804116 <_ZL12g_ms_counter+0x1>
    27c6:	20 91 17 41 	lds	r18, 0x4117	; 0x804117 <_ZL12g_ms_counter+0x2>
    27ca:	30 91 18 41 	lds	r19, 0x4118	; 0x804118 <_ZL12g_ms_counter+0x3>
    27ce:	01 2b       	or	r16, r17
    27d0:	02 2b       	or	r16, r18
    27d2:	03 2b       	or	r16, r19
    27d4:	21 f1       	breq	.+72     	; 0x281e <util_delay_ms+0x78>

				counting = false;
				countdownValue = 0;
				return(false); /* time expired */
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    27d6:	00 91 11 41 	lds	r16, 0x4111	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    27da:	10 91 12 41 	lds	r17, 0x4112	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    27de:	20 91 13 41 	lds	r18, 0x4113	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    27e2:	30 91 14 41 	lds	r19, 0x4114	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
    27e6:	06 17       	cp	r16, r22
    27e8:	17 07       	cpc	r17, r23
    27ea:	28 07       	cpc	r18, r24
    27ec:	39 07       	cpc	r19, r25
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <util_delay_ms+0x4c>
    27f0:	48 c0       	rjmp	.+144    	; 0x2882 <util_delay_ms+0xdc>
			{
				TCB1.CNT = 0x0000;
    27f2:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    27f6:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    27fa:	60 93 11 41 	sts	0x4111, r22	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    27fe:	70 93 12 41 	sts	0x4112, r23	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    2802:	80 93 13 41 	sts	0x4113, r24	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    2806:	90 93 14 41 	sts	0x4114, r25	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    280a:	60 93 15 41 	sts	0x4115, r22	; 0x804115 <_ZL12g_ms_counter>
    280e:	70 93 16 41 	sts	0x4116, r23	; 0x804116 <_ZL12g_ms_counter+0x1>
    2812:	80 93 17 41 	sts	0x4117, r24	; 0x804117 <_ZL12g_ms_counter+0x2>
    2816:	90 93 18 41 	sts	0x4118, r25	; 0x804118 <_ZL12g_ms_counter+0x3>
				return(false);
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	4b c0       	rjmp	.+150    	; 0x28b4 <util_delay_ms+0x10e>
	{
		if(counting)
		{
			if(!g_ms_counter)
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    281e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

				counting = false;
    2822:	10 92 10 41 	sts	0x4110, r1	; 0x804110 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    2826:	10 92 11 41 	sts	0x4111, r1	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    282a:	10 92 12 41 	sts	0x4112, r1	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    282e:	10 92 13 41 	sts	0x4113, r1	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    2832:	10 92 14 41 	sts	0x4114, r1	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	3d c0       	rjmp	.+122    	; 0x28b4 <util_delay_ms+0x10e>
				countdownValue = delayValue;
				g_ms_counter = delayValue;
				return(false);
			}
		}
		else if(delayValue != countdownValue)
    283a:	00 91 11 41 	lds	r16, 0x4111	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    283e:	10 91 12 41 	lds	r17, 0x4112	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    2842:	20 91 13 41 	lds	r18, 0x4113	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    2846:	30 91 14 41 	lds	r19, 0x4114	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
    284a:	06 17       	cp	r16, r22
    284c:	17 07       	cpc	r17, r23
    284e:	28 07       	cpc	r18, r24
    2850:	39 07       	cpc	r19, r25
    2852:	b9 f0       	breq	.+46     	; 0x2882 <util_delay_ms+0xdc>
		{
			TCB1.CNT = 0x0000;
    2854:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    2858:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    285c:	60 93 11 41 	sts	0x4111, r22	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    2860:	70 93 12 41 	sts	0x4112, r23	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    2864:	80 93 13 41 	sts	0x4113, r24	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    2868:	90 93 14 41 	sts	0x4114, r25	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    286c:	60 93 15 41 	sts	0x4115, r22	; 0x804115 <_ZL12g_ms_counter>
    2870:	70 93 16 41 	sts	0x4116, r23	; 0x804116 <_ZL12g_ms_counter+0x1>
    2874:	80 93 17 41 	sts	0x4117, r24	; 0x804117 <_ZL12g_ms_counter+0x2>
    2878:	90 93 18 41 	sts	0x4118, r25	; 0x804118 <_ZL12g_ms_counter+0x3>
			counting = true;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	80 93 10 41 	sts	0x4110, r24	; 0x804110 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
		g_ms_counter = 0;
		return(false); /* timer reset */
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
    2888:	15 c0       	rjmp	.+42     	; 0x28b4 <util_delay_ms+0x10e>
			counting = true;
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    288a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

		counting = false;
    288e:	10 92 10 41 	sts	0x4110, r1	; 0x804110 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    2892:	10 92 11 41 	sts	0x4111, r1	; 0x804111 <_ZZ13util_delay_msE14countdownValue>
    2896:	10 92 12 41 	sts	0x4112, r1	; 0x804112 <_ZZ13util_delay_msE14countdownValue+0x1>
    289a:	10 92 13 41 	sts	0x4113, r1	; 0x804113 <_ZZ13util_delay_msE14countdownValue+0x2>
    289e:	10 92 14 41 	sts	0x4114, r1	; 0x804114 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    28a2:	10 92 15 41 	sts	0x4115, r1	; 0x804115 <_ZL12g_ms_counter>
    28a6:	10 92 16 41 	sts	0x4116, r1	; 0x804116 <_ZL12g_ms_counter+0x1>
    28aa:	10 92 17 41 	sts	0x4117, r1	; 0x804117 <_ZL12g_ms_counter+0x2>
    28ae:	10 92 18 41 	sts	0x4118, r1	; 0x804118 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    28b2:	80 e0       	ldi	r24, 0x00	; 0
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
}
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <__vector_30>:

ISR(TCB2_INT_vect)
{
    28ba:	1f 92       	push	r1
    28bc:	0f 92       	push	r0
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	0f 92       	push	r0
    28c2:	11 24       	eor	r1, r1
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
    28c8:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    28cc:	80 ff       	sbrs	r24, 0
    28ce:	1e c0       	rjmp	.+60     	; 0x290c <__vector_30+0x52>
	{
		if(g_i2c1_timeout_ticks) g_i2c1_timeout_ticks--;
    28d0:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <g_i2c1_timeout_ticks>
    28d4:	90 91 13 40 	lds	r25, 0x4013	; 0x804013 <g_i2c1_timeout_ticks+0x1>
    28d8:	89 2b       	or	r24, r25
    28da:	49 f0       	breq	.+18     	; 0x28ee <__vector_30+0x34>
    28dc:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <g_i2c1_timeout_ticks>
    28e0:	90 91 13 40 	lds	r25, 0x4013	; 0x804013 <g_i2c1_timeout_ticks+0x1>
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <g_i2c1_timeout_ticks>
    28ea:	90 93 13 40 	sts	0x4013, r25	; 0x804013 <g_i2c1_timeout_ticks+0x1>
		if(g_i2c0_timeout_ticks) g_i2c0_timeout_ticks--;
    28ee:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    28f2:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    28f6:	89 2b       	or	r24, r25
    28f8:	49 f0       	breq	.+18     	; 0x290c <__vector_30+0x52>
    28fa:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    28fe:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_i2c0_timeout_ticks>
    2908:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_i2c0_timeout_ticks+0x1>
	}
	TCB2.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* Clear flags */
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
}
    2912:	9f 91       	pop	r25
    2914:	8f 91       	pop	r24
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	8f 93       	push	r24
    292c:	9f 93       	push	r25
    292e:	af 93       	push	r26
    2930:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    2932:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    2936:	80 ff       	sbrs	r24, 0
    2938:	0e c0       	rjmp	.+28     	; 0x2956 <__vector_13+0x36>
    {
		if(g_ms_counter) /* check for 1-second interval */
    293a:	80 91 15 41 	lds	r24, 0x4115	; 0x804115 <_ZL12g_ms_counter>
    293e:	90 91 16 41 	lds	r25, 0x4116	; 0x804116 <_ZL12g_ms_counter+0x1>
    2942:	a0 91 17 41 	lds	r26, 0x4117	; 0x804117 <_ZL12g_ms_counter+0x2>
    2946:	b0 91 18 41 	lds	r27, 0x4118	; 0x804118 <_ZL12g_ms_counter+0x3>
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	a1 05       	cpc	r26, r1
    294e:	b1 05       	cpc	r27, r1
    2950:	71 f4       	brne	.+28     	; 0x296e <__vector_13+0x4e>
		{
			g_ms_counter--;	
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    2952:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
		}
    }

    TCB1.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* clear interrupt flags */
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
}
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	0f 90       	pop	r0
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	0f 90       	pop	r0
    296a:	1f 90       	pop	r1
    296c:	18 95       	reti
{
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    {
		if(g_ms_counter) /* check for 1-second interval */
		{
			g_ms_counter--;	
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	a1 09       	sbc	r26, r1
    2972:	b1 09       	sbc	r27, r1
    2974:	80 93 15 41 	sts	0x4115, r24	; 0x804115 <_ZL12g_ms_counter>
    2978:	90 93 16 41 	sts	0x4116, r25	; 0x804116 <_ZL12g_ms_counter+0x1>
    297c:	a0 93 17 41 	sts	0x4117, r26	; 0x804117 <_ZL12g_ms_counter+0x2>
    2980:	b0 93 18 41 	sts	0x4118, r27	; 0x804118 <_ZL12g_ms_counter+0x3>
    2984:	e8 cf       	rjmp	.-48     	; 0x2956 <__vector_13+0x36>

00002986 <TIMERB_sleep>:
    TCB1.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* clear interrupt flags */
}

int8_t TIMERB_sleep()
{
	TCB0.INTCTRL = 0;   /* Capture or Timeout: disable interrupts */
    2986:	e0 e0       	ldi	r30, 0x00	; 0
    2988:	fb e0       	ldi	r31, 0x0B	; 11
    298a:	15 82       	std	Z+5, r1	; 0x05
	TCB0.CTRLA = 0; /* Disable timer */
    298c:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB1.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    298e:	e0 e1       	ldi	r30, 0x10	; 16
    2990:	fb e0       	ldi	r31, 0x0B	; 11
    2992:	15 82       	std	Z+5, r1	; 0x05
	TCB1.CTRLA = 0; /* Disable timer */
    2994:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB2.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    2996:	e0 e2       	ldi	r30, 0x20	; 32
    2998:	fb e0       	ldi	r31, 0x0B	; 11
    299a:	15 82       	std	Z+5, r1	; 0x05
	TCB2.CTRLA = 0; /* Disable timer */
    299c:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB3.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    299e:	e0 e3       	ldi	r30, 0x30	; 48
    29a0:	fb e0       	ldi	r31, 0x0B	; 11
    29a2:	15 82       	std	Z+5, r1	; 0x05
	TCB3.CTRLA = 0; /* Disable timer */
    29a4:	10 82       	st	Z, r1


	return 0;
}
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	08 95       	ret

000029aa <_Z14rxSetFrequencyPmb>:
	}
	
	void restart_receiver(void)
	{
		si5351_start_comms();
	}
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	26 2f       	mov	r18, r22
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	71 f1       	breq	.+92     	; 0x2a18 <_Z14rxSetFrequencyPmb+0x6e>
    29bc:	fc 01       	movw	r30, r24
    29be:	c0 80       	ld	r12, Z
    29c0:	d1 80       	ldd	r13, Z+1	; 0x01
    29c2:	e2 80       	ldd	r14, Z+2	; 0x02
    29c4:	f3 80       	ldd	r15, Z+3	; 0x03
    29c6:	b7 01       	movw	r22, r14
    29c8:	a6 01       	movw	r20, r12
    29ca:	41 5e       	subi	r20, 0xE1	; 225
    29cc:	57 46       	sbci	r21, 0x67	; 103
    29ce:	65 43       	sbci	r22, 0x35	; 53
    29d0:	71 09       	sbc	r23, r1
    29d2:	4f 31       	cpi	r20, 0x1F	; 31
    29d4:	51 4a       	sbci	r21, 0xA1	; 161
    29d6:	67 40       	sbci	r22, 0x07	; 7
    29d8:	71 05       	cpc	r23, r1
    29da:	40 f0       	brcs	.+16     	; 0x29ec <_Z14rxSetFrequencyPmb+0x42>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	08 95       	ret
    29ec:	ec 01       	movw	r28, r24
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	c7 01       	movw	r24, r14
    29f4:	b6 01       	movw	r22, r12
    29f6:	0e 94 2d 12 	call	0x245a	; 0x245a <si5351_set_freq>
    29fa:	81 11       	cpse	r24, r1
    29fc:	f0 cf       	rjmp	.-32     	; 0x29de <_Z14rxSetFrequencyPmb+0x34>
    29fe:	48 81       	ld	r20, Y
    2a00:	59 81       	ldd	r21, Y+1	; 0x01
    2a02:	6a 81       	ldd	r22, Y+2	; 0x02
    2a04:	7b 81       	ldd	r23, Y+3	; 0x03
    2a06:	40 93 1e 40 	sts	0x401E, r20	; 0x80401e <g_rx_frequency>
    2a0a:	50 93 1f 40 	sts	0x401F, r21	; 0x80401f <g_rx_frequency+0x1>
    2a0e:	60 93 20 40 	sts	0x4020, r22	; 0x804020 <g_rx_frequency+0x2>
    2a12:	70 93 21 40 	sts	0x4021, r23	; 0x804021 <g_rx_frequency+0x3>
    2a16:	e3 cf       	rjmp	.-58     	; 0x29de <_Z14rxSetFrequencyPmb+0x34>
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	e1 cf       	rjmp	.-62     	; 0x29de <_Z14rxSetFrequencyPmb+0x34>

00002a1c <_Z13init_receiverm>:

	EC init_receiver(Frequency_Hz freq)
	{
		g_rx_frequency = freq;
    2a1c:	60 93 1e 40 	sts	0x401E, r22	; 0x80401e <g_rx_frequency>
    2a20:	70 93 1f 40 	sts	0x401F, r23	; 0x80401f <g_rx_frequency+0x1>
    2a24:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_rx_frequency+0x2>
    2a28:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_rx_frequency+0x3>
		return init_receiver();
    2a2c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <_Z13init_receiverv>
	}
    2a30:	08 95       	ret

00002a32 <_Z13init_receiverv>:
	
	EC init_receiver(void)
	{
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
		EC code;
		bool err;
		
		DAC0_init();
    2a36:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	ba 01       	movw	r22, r20
    2a40:	80 e4       	ldi	r24, 0x40	; 64
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <si5351_init>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    2a48:	c2 ed       	ldi	r28, 0xD2	; 210
    2a4a:	d0 e0       	ldi	r29, 0x00	; 0
		EC code;
		bool err;
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	09 c0       	rjmp	.+18     	; 0x2a62 <_Z13init_receiverv+0x30>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    2a50:	63 e0       	ldi	r22, 0x03	; 3
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 ce 10 	call	0x219c	; 0x219c <si5351_drive_strength>
    2a5c:	ec 01       	movw	r28, r24
    2a5e:	89 2b       	or	r24, r25
    2a60:	21 f0       	breq	.+8      	; 0x2a6a <_Z13init_receiverv+0x38>
		{
			g_rx_initialized = true;
		}

		return( code);
    2a62:	ce 01       	movw	r24, r28
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 8e 10 	call	0x211c	; 0x211c <si5351_clock_enable>
    2a74:	ec 01       	movw	r28, r24
    2a76:	89 2b       	or	r24, r25
    2a78:	a1 f7       	brne	.-24     	; 0x2a62 <_Z13init_receiverv+0x30>
		{
			return( code);
		}

		err = rxSetFrequency((Frequency_Hz*)&g_rx_frequency, false);
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	8e e1       	ldi	r24, 0x1E	; 30
    2a7e:	90 e4       	ldi	r25, 0x40	; 64
    2a80:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_Z14rxSetFrequencyPmb>
		if(!err)
    2a84:	81 11       	cpse	r24, r1
    2a86:	ed cf       	rjmp	.-38     	; 0x2a62 <_Z13init_receiverv+0x30>
		{
			g_rx_initialized = true;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	80 93 19 41 	sts	0x4119, r24	; 0x804119 <_ZL16g_rx_initialized>
    2a8e:	e9 cf       	rjmp	.-46     	; 0x2a62 <_Z13init_receiverv+0x30>

00002a90 <__cmpsf2>:
    2a90:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fp_cmp>
    2a94:	08 f4       	brcc	.+2      	; 0x2a98 <__cmpsf2+0x8>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	08 95       	ret

00002a9a <__fixsfsi>:
    2a9a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__fixunssfsi>
    2a9e:	68 94       	set
    2aa0:	b1 11       	cpse	r27, r1
    2aa2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__fp_szero>
    2aa6:	08 95       	ret

00002aa8 <__fixunssfsi>:
    2aa8:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fp_splitA>
    2aac:	88 f0       	brcs	.+34     	; 0x2ad0 <__fixunssfsi+0x28>
    2aae:	9f 57       	subi	r25, 0x7F	; 127
    2ab0:	98 f0       	brcs	.+38     	; 0x2ad8 <__fixunssfsi+0x30>
    2ab2:	b9 2f       	mov	r27, r25
    2ab4:	99 27       	eor	r25, r25
    2ab6:	b7 51       	subi	r27, 0x17	; 23
    2ab8:	b0 f0       	brcs	.+44     	; 0x2ae6 <__fixunssfsi+0x3e>
    2aba:	e1 f0       	breq	.+56     	; 0x2af4 <__fixunssfsi+0x4c>
    2abc:	66 0f       	add	r22, r22
    2abe:	77 1f       	adc	r23, r23
    2ac0:	88 1f       	adc	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	1a f0       	brmi	.+6      	; 0x2acc <__fixunssfsi+0x24>
    2ac6:	ba 95       	dec	r27
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__fixunssfsi+0x14>
    2aca:	14 c0       	rjmp	.+40     	; 0x2af4 <__fixunssfsi+0x4c>
    2acc:	b1 30       	cpi	r27, 0x01	; 1
    2ace:	91 f0       	breq	.+36     	; 0x2af4 <__fixunssfsi+0x4c>
    2ad0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fp_zero>
    2ad4:	b1 e0       	ldi	r27, 0x01	; 1
    2ad6:	08 95       	ret
    2ad8:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__fp_zero>
    2adc:	67 2f       	mov	r22, r23
    2ade:	78 2f       	mov	r23, r24
    2ae0:	88 27       	eor	r24, r24
    2ae2:	b8 5f       	subi	r27, 0xF8	; 248
    2ae4:	39 f0       	breq	.+14     	; 0x2af4 <__fixunssfsi+0x4c>
    2ae6:	b9 3f       	cpi	r27, 0xF9	; 249
    2ae8:	cc f3       	brlt	.-14     	; 0x2adc <__fixunssfsi+0x34>
    2aea:	86 95       	lsr	r24
    2aec:	77 95       	ror	r23
    2aee:	67 95       	ror	r22
    2af0:	b3 95       	inc	r27
    2af2:	d9 f7       	brne	.-10     	; 0x2aea <__fixunssfsi+0x42>
    2af4:	3e f4       	brtc	.+14     	; 0x2b04 <__fixunssfsi+0x5c>
    2af6:	90 95       	com	r25
    2af8:	80 95       	com	r24
    2afa:	70 95       	com	r23
    2afc:	61 95       	neg	r22
    2afe:	7f 4f       	sbci	r23, 0xFF	; 255
    2b00:	8f 4f       	sbci	r24, 0xFF	; 255
    2b02:	9f 4f       	sbci	r25, 0xFF	; 255
    2b04:	08 95       	ret

00002b06 <__fp_cmp>:
    2b06:	99 0f       	add	r25, r25
    2b08:	00 08       	sbc	r0, r0
    2b0a:	55 0f       	add	r21, r21
    2b0c:	aa 0b       	sbc	r26, r26
    2b0e:	e0 e8       	ldi	r30, 0x80	; 128
    2b10:	fe ef       	ldi	r31, 0xFE	; 254
    2b12:	16 16       	cp	r1, r22
    2b14:	17 06       	cpc	r1, r23
    2b16:	e8 07       	cpc	r30, r24
    2b18:	f9 07       	cpc	r31, r25
    2b1a:	c0 f0       	brcs	.+48     	; 0x2b4c <__fp_cmp+0x46>
    2b1c:	12 16       	cp	r1, r18
    2b1e:	13 06       	cpc	r1, r19
    2b20:	e4 07       	cpc	r30, r20
    2b22:	f5 07       	cpc	r31, r21
    2b24:	98 f0       	brcs	.+38     	; 0x2b4c <__fp_cmp+0x46>
    2b26:	62 1b       	sub	r22, r18
    2b28:	73 0b       	sbc	r23, r19
    2b2a:	84 0b       	sbc	r24, r20
    2b2c:	95 0b       	sbc	r25, r21
    2b2e:	39 f4       	brne	.+14     	; 0x2b3e <__fp_cmp+0x38>
    2b30:	0a 26       	eor	r0, r26
    2b32:	61 f0       	breq	.+24     	; 0x2b4c <__fp_cmp+0x46>
    2b34:	23 2b       	or	r18, r19
    2b36:	24 2b       	or	r18, r20
    2b38:	25 2b       	or	r18, r21
    2b3a:	21 f4       	brne	.+8      	; 0x2b44 <__fp_cmp+0x3e>
    2b3c:	08 95       	ret
    2b3e:	0a 26       	eor	r0, r26
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <__fp_cmp+0x3e>
    2b42:	a1 40       	sbci	r26, 0x01	; 1
    2b44:	a6 95       	lsr	r26
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
    2b48:	81 1d       	adc	r24, r1
    2b4a:	81 1d       	adc	r24, r1
    2b4c:	08 95       	ret

00002b4e <__fp_split3>:
    2b4e:	57 fd       	sbrc	r21, 7
    2b50:	90 58       	subi	r25, 0x80	; 128
    2b52:	44 0f       	add	r20, r20
    2b54:	55 1f       	adc	r21, r21
    2b56:	59 f0       	breq	.+22     	; 0x2b6e <__fp_splitA+0x10>
    2b58:	5f 3f       	cpi	r21, 0xFF	; 255
    2b5a:	71 f0       	breq	.+28     	; 0x2b78 <__fp_splitA+0x1a>
    2b5c:	47 95       	ror	r20

00002b5e <__fp_splitA>:
    2b5e:	88 0f       	add	r24, r24
    2b60:	97 fb       	bst	r25, 7
    2b62:	99 1f       	adc	r25, r25
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <__fp_splitA+0x20>
    2b66:	9f 3f       	cpi	r25, 0xFF	; 255
    2b68:	79 f0       	breq	.+30     	; 0x2b88 <__fp_splitA+0x2a>
    2b6a:	87 95       	ror	r24
    2b6c:	08 95       	ret
    2b6e:	12 16       	cp	r1, r18
    2b70:	13 06       	cpc	r1, r19
    2b72:	14 06       	cpc	r1, r20
    2b74:	55 1f       	adc	r21, r21
    2b76:	f2 cf       	rjmp	.-28     	; 0x2b5c <__fp_split3+0xe>
    2b78:	46 95       	lsr	r20
    2b7a:	f1 df       	rcall	.-30     	; 0x2b5e <__fp_splitA>
    2b7c:	08 c0       	rjmp	.+16     	; 0x2b8e <__fp_splitA+0x30>
    2b7e:	16 16       	cp	r1, r22
    2b80:	17 06       	cpc	r1, r23
    2b82:	18 06       	cpc	r1, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	f1 cf       	rjmp	.-30     	; 0x2b6a <__fp_splitA+0xc>
    2b88:	86 95       	lsr	r24
    2b8a:	71 05       	cpc	r23, r1
    2b8c:	61 05       	cpc	r22, r1
    2b8e:	08 94       	sec
    2b90:	08 95       	ret

00002b92 <__fp_zero>:
    2b92:	e8 94       	clt

00002b94 <__fp_szero>:
    2b94:	bb 27       	eor	r27, r27
    2b96:	66 27       	eor	r22, r22
    2b98:	77 27       	eor	r23, r23
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	97 f9       	bld	r25, 7
    2b9e:	08 95       	ret

00002ba0 <__gesf2>:
    2ba0:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fp_cmp>
    2ba4:	08 f4       	brcc	.+2      	; 0x2ba8 <__gesf2+0x8>
    2ba6:	8f ef       	ldi	r24, 0xFF	; 255
    2ba8:	08 95       	ret

00002baa <__mulsi3>:
    2baa:	db 01       	movw	r26, r22
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__muluhisi3>
    2bb4:	bf 91       	pop	r27
    2bb6:	af 91       	pop	r26
    2bb8:	a2 9f       	mul	r26, r18
    2bba:	80 0d       	add	r24, r0
    2bbc:	91 1d       	adc	r25, r1
    2bbe:	a3 9f       	mul	r26, r19
    2bc0:	90 0d       	add	r25, r0
    2bc2:	b2 9f       	mul	r27, r18
    2bc4:	90 0d       	add	r25, r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	08 95       	ret

00002bca <__udivmodsi4>:
    2bca:	a1 e2       	ldi	r26, 0x21	; 33
    2bcc:	1a 2e       	mov	r1, r26
    2bce:	aa 1b       	sub	r26, r26
    2bd0:	bb 1b       	sub	r27, r27
    2bd2:	fd 01       	movw	r30, r26
    2bd4:	0d c0       	rjmp	.+26     	; 0x2bf0 <__udivmodsi4_ep>

00002bd6 <__udivmodsi4_loop>:
    2bd6:	aa 1f       	adc	r26, r26
    2bd8:	bb 1f       	adc	r27, r27
    2bda:	ee 1f       	adc	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	a2 17       	cp	r26, r18
    2be0:	b3 07       	cpc	r27, r19
    2be2:	e4 07       	cpc	r30, r20
    2be4:	f5 07       	cpc	r31, r21
    2be6:	20 f0       	brcs	.+8      	; 0x2bf0 <__udivmodsi4_ep>
    2be8:	a2 1b       	sub	r26, r18
    2bea:	b3 0b       	sbc	r27, r19
    2bec:	e4 0b       	sbc	r30, r20
    2bee:	f5 0b       	sbc	r31, r21

00002bf0 <__udivmodsi4_ep>:
    2bf0:	66 1f       	adc	r22, r22
    2bf2:	77 1f       	adc	r23, r23
    2bf4:	88 1f       	adc	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	1a 94       	dec	r1
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <__udivmodsi4_loop>
    2bfc:	60 95       	com	r22
    2bfe:	70 95       	com	r23
    2c00:	80 95       	com	r24
    2c02:	90 95       	com	r25
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	bd 01       	movw	r22, r26
    2c0a:	cf 01       	movw	r24, r30
    2c0c:	08 95       	ret

00002c0e <__tablejump2__>:
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	00 24       	eor	r0, r0
    2c14:	00 1c       	adc	r0, r0
    2c16:	0b be       	out	0x3b, r0	; 59
    2c18:	07 90       	elpm	r0, Z+
    2c1a:	f6 91       	elpm	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	09 94       	ijmp

00002c20 <__umulhisi3>:
    2c20:	a2 9f       	mul	r26, r18
    2c22:	b0 01       	movw	r22, r0
    2c24:	b3 9f       	mul	r27, r19
    2c26:	c0 01       	movw	r24, r0
    2c28:	a3 9f       	mul	r26, r19
    2c2a:	70 0d       	add	r23, r0
    2c2c:	81 1d       	adc	r24, r1
    2c2e:	11 24       	eor	r1, r1
    2c30:	91 1d       	adc	r25, r1
    2c32:	b2 9f       	mul	r27, r18
    2c34:	70 0d       	add	r23, r0
    2c36:	81 1d       	adc	r24, r1
    2c38:	11 24       	eor	r1, r1
    2c3a:	91 1d       	adc	r25, r1
    2c3c:	08 95       	ret

00002c3e <__muluhisi3>:
    2c3e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__umulhisi3>
    2c42:	a5 9f       	mul	r26, r21
    2c44:	90 0d       	add	r25, r0
    2c46:	b4 9f       	mul	r27, r20
    2c48:	90 0d       	add	r25, r0
    2c4a:	a4 9f       	mul	r26, r20
    2c4c:	80 0d       	add	r24, r0
    2c4e:	91 1d       	adc	r25, r1
    2c50:	11 24       	eor	r1, r1
    2c52:	08 95       	ret

00002c54 <malloc>:
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	82 30       	cpi	r24, 0x02	; 2
    2c5e:	91 05       	cpc	r25, r1
    2c60:	10 f4       	brcc	.+4      	; 0x2c66 <malloc+0x12>
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	e0 91 1c 41 	lds	r30, 0x411C	; 0x80411c <__flp>
    2c6a:	f0 91 1d 41 	lds	r31, 0x411D	; 0x80411d <__flp+0x1>
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	a0 e0       	ldi	r26, 0x00	; 0
    2c76:	30 97       	sbiw	r30, 0x00	; 0
    2c78:	99 f4       	brne	.+38     	; 0x2ca0 <malloc+0x4c>
    2c7a:	21 15       	cp	r18, r1
    2c7c:	31 05       	cpc	r19, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <malloc+0x2e>
    2c80:	4a c0       	rjmp	.+148    	; 0x2d16 <malloc+0xc2>
    2c82:	28 1b       	sub	r18, r24
    2c84:	39 0b       	sbc	r19, r25
    2c86:	24 30       	cpi	r18, 0x04	; 4
    2c88:	31 05       	cpc	r19, r1
    2c8a:	d8 f5       	brcc	.+118    	; 0x2d02 <malloc+0xae>
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	61 15       	cp	r22, r1
    2c92:	71 05       	cpc	r23, r1
    2c94:	89 f1       	breq	.+98     	; 0x2cf8 <malloc+0xa4>
    2c96:	fb 01       	movw	r30, r22
    2c98:	82 83       	std	Z+2, r24	; 0x02
    2c9a:	93 83       	std	Z+3, r25	; 0x03
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	11 c0       	rjmp	.+34     	; 0x2cc2 <malloc+0x6e>
    2ca0:	40 81       	ld	r20, Z
    2ca2:	51 81       	ldd	r21, Z+1	; 0x01
    2ca4:	02 81       	ldd	r16, Z+2	; 0x02
    2ca6:	13 81       	ldd	r17, Z+3	; 0x03
    2ca8:	48 17       	cp	r20, r24
    2caa:	59 07       	cpc	r21, r25
    2cac:	e0 f0       	brcs	.+56     	; 0x2ce6 <malloc+0x92>
    2cae:	48 17       	cp	r20, r24
    2cb0:	59 07       	cpc	r21, r25
    2cb2:	99 f4       	brne	.+38     	; 0x2cda <malloc+0x86>
    2cb4:	10 97       	sbiw	r26, 0x00	; 0
    2cb6:	61 f0       	breq	.+24     	; 0x2cd0 <malloc+0x7c>
    2cb8:	12 96       	adiw	r26, 0x02	; 2
    2cba:	0c 93       	st	X, r16
    2cbc:	12 97       	sbiw	r26, 0x02	; 2
    2cbe:	13 96       	adiw	r26, 0x03	; 3
    2cc0:	1c 93       	st	X, r17
    2cc2:	32 96       	adiw	r30, 0x02	; 2
    2cc4:	cf 01       	movw	r24, r30
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	08 95       	ret
    2cd0:	00 93 1c 41 	sts	0x411C, r16	; 0x80411c <__flp>
    2cd4:	10 93 1d 41 	sts	0x411D, r17	; 0x80411d <__flp+0x1>
    2cd8:	f4 cf       	rjmp	.-24     	; 0x2cc2 <malloc+0x6e>
    2cda:	21 15       	cp	r18, r1
    2cdc:	31 05       	cpc	r19, r1
    2cde:	51 f0       	breq	.+20     	; 0x2cf4 <malloc+0xa0>
    2ce0:	42 17       	cp	r20, r18
    2ce2:	53 07       	cpc	r21, r19
    2ce4:	38 f0       	brcs	.+14     	; 0x2cf4 <malloc+0xa0>
    2ce6:	a9 01       	movw	r20, r18
    2ce8:	db 01       	movw	r26, r22
    2cea:	9a 01       	movw	r18, r20
    2cec:	bd 01       	movw	r22, r26
    2cee:	df 01       	movw	r26, r30
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	c1 cf       	rjmp	.-126    	; 0x2c76 <malloc+0x22>
    2cf4:	ef 01       	movw	r28, r30
    2cf6:	f9 cf       	rjmp	.-14     	; 0x2cea <malloc+0x96>
    2cf8:	80 93 1c 41 	sts	0x411C, r24	; 0x80411c <__flp>
    2cfc:	90 93 1d 41 	sts	0x411D, r25	; 0x80411d <__flp+0x1>
    2d00:	cd cf       	rjmp	.-102    	; 0x2c9c <malloc+0x48>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e2 0f       	add	r30, r18
    2d06:	f3 1f       	adc	r31, r19
    2d08:	81 93       	st	Z+, r24
    2d0a:	91 93       	st	Z+, r25
    2d0c:	22 50       	subi	r18, 0x02	; 2
    2d0e:	31 09       	sbc	r19, r1
    2d10:	28 83       	st	Y, r18
    2d12:	39 83       	std	Y+1, r19	; 0x01
    2d14:	d7 cf       	rjmp	.-82     	; 0x2cc4 <malloc+0x70>
    2d16:	20 91 1a 41 	lds	r18, 0x411A	; 0x80411a <__brkval>
    2d1a:	30 91 1b 41 	lds	r19, 0x411B	; 0x80411b <__brkval+0x1>
    2d1e:	23 2b       	or	r18, r19
    2d20:	41 f4       	brne	.+16     	; 0x2d32 <malloc+0xde>
    2d22:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    2d26:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    2d2a:	20 93 1a 41 	sts	0x411A, r18	; 0x80411a <__brkval>
    2d2e:	30 93 1b 41 	sts	0x411B, r19	; 0x80411b <__brkval+0x1>
    2d32:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__data_start>
    2d36:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__data_start+0x1>
    2d3a:	21 15       	cp	r18, r1
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	41 f4       	brne	.+16     	; 0x2d50 <malloc+0xfc>
    2d40:	2d b7       	in	r18, 0x3d	; 61
    2d42:	3e b7       	in	r19, 0x3e	; 62
    2d44:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    2d48:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    2d4c:	24 1b       	sub	r18, r20
    2d4e:	35 0b       	sbc	r19, r21
    2d50:	e0 91 1a 41 	lds	r30, 0x411A	; 0x80411a <__brkval>
    2d54:	f0 91 1b 41 	lds	r31, 0x411B	; 0x80411b <__brkval+0x1>
    2d58:	e2 17       	cp	r30, r18
    2d5a:	f3 07       	cpc	r31, r19
    2d5c:	a0 f4       	brcc	.+40     	; 0x2d86 <malloc+0x132>
    2d5e:	2e 1b       	sub	r18, r30
    2d60:	3f 0b       	sbc	r19, r31
    2d62:	28 17       	cp	r18, r24
    2d64:	39 07       	cpc	r19, r25
    2d66:	78 f0       	brcs	.+30     	; 0x2d86 <malloc+0x132>
    2d68:	ac 01       	movw	r20, r24
    2d6a:	4e 5f       	subi	r20, 0xFE	; 254
    2d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6e:	24 17       	cp	r18, r20
    2d70:	35 07       	cpc	r19, r21
    2d72:	48 f0       	brcs	.+18     	; 0x2d86 <malloc+0x132>
    2d74:	4e 0f       	add	r20, r30
    2d76:	5f 1f       	adc	r21, r31
    2d78:	40 93 1a 41 	sts	0x411A, r20	; 0x80411a <__brkval>
    2d7c:	50 93 1b 41 	sts	0x411B, r21	; 0x80411b <__brkval+0x1>
    2d80:	81 93       	st	Z+, r24
    2d82:	91 93       	st	Z+, r25
    2d84:	9f cf       	rjmp	.-194    	; 0x2cc4 <malloc+0x70>
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	e0 e0       	ldi	r30, 0x00	; 0
    2d8a:	9c cf       	rjmp	.-200    	; 0x2cc4 <malloc+0x70>

00002d8c <free>:
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	e9 f0       	breq	.+58     	; 0x2dce <free+0x42>
    2d94:	fc 01       	movw	r30, r24
    2d96:	32 97       	sbiw	r30, 0x02	; 2
    2d98:	12 82       	std	Z+2, r1	; 0x02
    2d9a:	13 82       	std	Z+3, r1	; 0x03
    2d9c:	a0 91 1c 41 	lds	r26, 0x411C	; 0x80411c <__flp>
    2da0:	b0 91 1d 41 	lds	r27, 0x411D	; 0x80411d <__flp+0x1>
    2da4:	ed 01       	movw	r28, r26
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	10 97       	sbiw	r26, 0x00	; 0
    2dac:	a1 f4       	brne	.+40     	; 0x2dd6 <free+0x4a>
    2dae:	20 81       	ld	r18, Z
    2db0:	31 81       	ldd	r19, Z+1	; 0x01
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	20 91 1a 41 	lds	r18, 0x411A	; 0x80411a <__brkval>
    2dba:	30 91 1b 41 	lds	r19, 0x411B	; 0x80411b <__brkval+0x1>
    2dbe:	28 17       	cp	r18, r24
    2dc0:	39 07       	cpc	r19, r25
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <free+0x3a>
    2dc4:	61 c0       	rjmp	.+194    	; 0x2e88 <free+0xfc>
    2dc6:	e0 93 1a 41 	sts	0x411A, r30	; 0x80411a <__brkval>
    2dca:	f0 93 1b 41 	sts	0x411B, r31	; 0x80411b <__brkval+0x1>
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret
    2dd4:	ea 01       	movw	r28, r20
    2dd6:	ce 17       	cp	r28, r30
    2dd8:	df 07       	cpc	r29, r31
    2dda:	e8 f5       	brcc	.+122    	; 0x2e56 <free+0xca>
    2ddc:	4a 81       	ldd	r20, Y+2	; 0x02
    2dde:	5b 81       	ldd	r21, Y+3	; 0x03
    2de0:	9e 01       	movw	r18, r28
    2de2:	41 15       	cp	r20, r1
    2de4:	51 05       	cpc	r21, r1
    2de6:	b1 f7       	brne	.-20     	; 0x2dd4 <free+0x48>
    2de8:	e9 01       	movw	r28, r18
    2dea:	ea 83       	std	Y+2, r30	; 0x02
    2dec:	fb 83       	std	Y+3, r31	; 0x03
    2dee:	49 91       	ld	r20, Y+
    2df0:	59 91       	ld	r21, Y+
    2df2:	c4 0f       	add	r28, r20
    2df4:	d5 1f       	adc	r29, r21
    2df6:	ec 17       	cp	r30, r28
    2df8:	fd 07       	cpc	r31, r29
    2dfa:	61 f4       	brne	.+24     	; 0x2e14 <free+0x88>
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	02 96       	adiw	r24, 0x02	; 2
    2e02:	84 0f       	add	r24, r20
    2e04:	95 1f       	adc	r25, r21
    2e06:	e9 01       	movw	r28, r18
    2e08:	88 83       	st	Y, r24
    2e0a:	99 83       	std	Y+1, r25	; 0x01
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	8a 83       	std	Y+2, r24	; 0x02
    2e12:	9b 83       	std	Y+3, r25	; 0x03
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	e0 e0       	ldi	r30, 0x00	; 0
    2e18:	12 96       	adiw	r26, 0x02	; 2
    2e1a:	8d 91       	ld	r24, X+
    2e1c:	9c 91       	ld	r25, X
    2e1e:	13 97       	sbiw	r26, 0x03	; 3
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	b9 f5       	brne	.+110    	; 0x2e92 <free+0x106>
    2e24:	2d 91       	ld	r18, X+
    2e26:	3c 91       	ld	r19, X
    2e28:	11 97       	sbiw	r26, 0x01	; 1
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	02 96       	adiw	r24, 0x02	; 2
    2e2e:	82 0f       	add	r24, r18
    2e30:	93 1f       	adc	r25, r19
    2e32:	20 91 1a 41 	lds	r18, 0x411A	; 0x80411a <__brkval>
    2e36:	30 91 1b 41 	lds	r19, 0x411B	; 0x80411b <__brkval+0x1>
    2e3a:	28 17       	cp	r18, r24
    2e3c:	39 07       	cpc	r19, r25
    2e3e:	39 f6       	brne	.-114    	; 0x2dce <free+0x42>
    2e40:	30 97       	sbiw	r30, 0x00	; 0
    2e42:	51 f5       	brne	.+84     	; 0x2e98 <free+0x10c>
    2e44:	10 92 1c 41 	sts	0x411C, r1	; 0x80411c <__flp>
    2e48:	10 92 1d 41 	sts	0x411D, r1	; 0x80411d <__flp+0x1>
    2e4c:	a0 93 1a 41 	sts	0x411A, r26	; 0x80411a <__brkval>
    2e50:	b0 93 1b 41 	sts	0x411B, r27	; 0x80411b <__brkval+0x1>
    2e54:	bc cf       	rjmp	.-136    	; 0x2dce <free+0x42>
    2e56:	c2 83       	std	Z+2, r28	; 0x02
    2e58:	d3 83       	std	Z+3, r29	; 0x03
    2e5a:	40 81       	ld	r20, Z
    2e5c:	51 81       	ldd	r21, Z+1	; 0x01
    2e5e:	84 0f       	add	r24, r20
    2e60:	95 1f       	adc	r25, r21
    2e62:	c8 17       	cp	r28, r24
    2e64:	d9 07       	cpc	r29, r25
    2e66:	61 f4       	brne	.+24     	; 0x2e80 <free+0xf4>
    2e68:	4e 5f       	subi	r20, 0xFE	; 254
    2e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6c:	88 81       	ld	r24, Y
    2e6e:	99 81       	ldd	r25, Y+1	; 0x01
    2e70:	48 0f       	add	r20, r24
    2e72:	59 1f       	adc	r21, r25
    2e74:	40 83       	st	Z, r20
    2e76:	51 83       	std	Z+1, r21	; 0x01
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7c:	82 83       	std	Z+2, r24	; 0x02
    2e7e:	93 83       	std	Z+3, r25	; 0x03
    2e80:	21 15       	cp	r18, r1
    2e82:	31 05       	cpc	r19, r1
    2e84:	09 f0       	breq	.+2      	; 0x2e88 <free+0xfc>
    2e86:	b0 cf       	rjmp	.-160    	; 0x2de8 <free+0x5c>
    2e88:	e0 93 1c 41 	sts	0x411C, r30	; 0x80411c <__flp>
    2e8c:	f0 93 1d 41 	sts	0x411D, r31	; 0x80411d <__flp+0x1>
    2e90:	9e cf       	rjmp	.-196    	; 0x2dce <free+0x42>
    2e92:	fd 01       	movw	r30, r26
    2e94:	dc 01       	movw	r26, r24
    2e96:	c0 cf       	rjmp	.-128    	; 0x2e18 <free+0x8c>
    2e98:	12 82       	std	Z+2, r1	; 0x02
    2e9a:	13 82       	std	Z+3, r1	; 0x03
    2e9c:	d7 cf       	rjmp	.-82     	; 0x2e4c <free+0xc0>

00002e9e <sprintf>:
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	2e 97       	sbiw	r28, 0x0e	; 14
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0d 89       	ldd	r16, Y+21	; 0x15
    2eb2:	1e 89       	ldd	r17, Y+22	; 0x16
    2eb4:	86 e0       	ldi	r24, 0x06	; 6
    2eb6:	8c 83       	std	Y+4, r24	; 0x04
    2eb8:	09 83       	std	Y+1, r16	; 0x01
    2eba:	1a 83       	std	Y+2, r17	; 0x02
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
    2ebe:	9f e7       	ldi	r25, 0x7F	; 127
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	ae 01       	movw	r20, r28
    2ec6:	47 5e       	subi	r20, 0xE7	; 231
    2ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eca:	6f 89       	ldd	r22, Y+23	; 0x17
    2ecc:	78 8d       	ldd	r23, Y+24	; 0x18
    2ece:	ce 01       	movw	r24, r28
    2ed0:	01 96       	adiw	r24, 0x01	; 1
    2ed2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <vfprintf>
    2ed6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ed8:	38 85       	ldd	r19, Y+8	; 0x08
    2eda:	02 0f       	add	r16, r18
    2edc:	13 1f       	adc	r17, r19
    2ede:	f8 01       	movw	r30, r16
    2ee0:	10 82       	st	Z, r1
    2ee2:	2e 96       	adiw	r28, 0x0e	; 14
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	08 95       	ret

00002ef2 <vfprintf>:
    2ef2:	2f 92       	push	r2
    2ef4:	3f 92       	push	r3
    2ef6:	4f 92       	push	r4
    2ef8:	5f 92       	push	r5
    2efa:	6f 92       	push	r6
    2efc:	7f 92       	push	r7
    2efe:	8f 92       	push	r8
    2f00:	9f 92       	push	r9
    2f02:	af 92       	push	r10
    2f04:	bf 92       	push	r11
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	2b 97       	sbiw	r28, 0x0b	; 11
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	7c 01       	movw	r14, r24
    2f22:	3b 01       	movw	r6, r22
    2f24:	8a 01       	movw	r16, r20
    2f26:	fc 01       	movw	r30, r24
    2f28:	16 82       	std	Z+6, r1	; 0x06
    2f2a:	17 82       	std	Z+7, r1	; 0x07
    2f2c:	83 81       	ldd	r24, Z+3	; 0x03
    2f2e:	81 ff       	sbrs	r24, 1
    2f30:	da c1       	rjmp	.+948    	; 0x32e6 <vfprintf+0x3f4>
    2f32:	ce 01       	movw	r24, r28
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	5c 01       	movw	r10, r24
    2f38:	f7 01       	movw	r30, r14
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	f3 01       	movw	r30, r6
    2f3e:	93 fd       	sbrc	r25, 3
    2f40:	85 91       	lpm	r24, Z+
    2f42:	93 ff       	sbrs	r25, 3
    2f44:	81 91       	ld	r24, Z+
    2f46:	3f 01       	movw	r6, r30
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <vfprintf+0x5c>
    2f4c:	53 c1       	rjmp	.+678    	; 0x31f4 <vfprintf+0x302>
    2f4e:	85 32       	cpi	r24, 0x25	; 37
    2f50:	39 f4       	brne	.+14     	; 0x2f60 <vfprintf+0x6e>
    2f52:	93 fd       	sbrc	r25, 3
    2f54:	85 91       	lpm	r24, Z+
    2f56:	93 ff       	sbrs	r25, 3
    2f58:	81 91       	ld	r24, Z+
    2f5a:	3f 01       	movw	r6, r30
    2f5c:	85 32       	cpi	r24, 0x25	; 37
    2f5e:	29 f4       	brne	.+10     	; 0x2f6a <vfprintf+0x78>
    2f60:	b7 01       	movw	r22, r14
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    2f68:	e7 cf       	rjmp	.-50     	; 0x2f38 <vfprintf+0x46>
    2f6a:	91 2c       	mov	r9, r1
    2f6c:	21 2c       	mov	r2, r1
    2f6e:	31 2c       	mov	r3, r1
    2f70:	ff e1       	ldi	r31, 0x1F	; 31
    2f72:	f3 15       	cp	r31, r3
    2f74:	38 f0       	brcs	.+14     	; 0x2f84 <vfprintf+0x92>
    2f76:	8b 32       	cpi	r24, 0x2B	; 43
    2f78:	11 f1       	breq	.+68     	; 0x2fbe <vfprintf+0xcc>
    2f7a:	90 f4       	brcc	.+36     	; 0x2fa0 <vfprintf+0xae>
    2f7c:	80 32       	cpi	r24, 0x20	; 32
    2f7e:	09 f1       	breq	.+66     	; 0x2fc2 <vfprintf+0xd0>
    2f80:	83 32       	cpi	r24, 0x23	; 35
    2f82:	29 f1       	breq	.+74     	; 0x2fce <vfprintf+0xdc>
    2f84:	37 fc       	sbrc	r3, 7
    2f86:	3c c0       	rjmp	.+120    	; 0x3000 <vfprintf+0x10e>
    2f88:	20 ed       	ldi	r18, 0xD0	; 208
    2f8a:	28 0f       	add	r18, r24
    2f8c:	2a 30       	cpi	r18, 0x0A	; 10
    2f8e:	50 f5       	brcc	.+84     	; 0x2fe4 <vfprintf+0xf2>
    2f90:	36 fe       	sbrs	r3, 6
    2f92:	20 c0       	rjmp	.+64     	; 0x2fd4 <vfprintf+0xe2>
    2f94:	8a e0       	ldi	r24, 0x0A	; 10
    2f96:	98 9e       	mul	r9, r24
    2f98:	20 0d       	add	r18, r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	92 2e       	mov	r9, r18
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <vfprintf+0xba>
    2fa0:	8d 32       	cpi	r24, 0x2D	; 45
    2fa2:	91 f0       	breq	.+36     	; 0x2fc8 <vfprintf+0xd6>
    2fa4:	80 33       	cpi	r24, 0x30	; 48
    2fa6:	71 f7       	brne	.-36     	; 0x2f84 <vfprintf+0x92>
    2fa8:	68 94       	set
    2faa:	30 f8       	bld	r3, 0
    2fac:	f3 01       	movw	r30, r6
    2fae:	93 fd       	sbrc	r25, 3
    2fb0:	85 91       	lpm	r24, Z+
    2fb2:	93 ff       	sbrs	r25, 3
    2fb4:	81 91       	ld	r24, Z+
    2fb6:	3f 01       	movw	r6, r30
    2fb8:	81 11       	cpse	r24, r1
    2fba:	da cf       	rjmp	.-76     	; 0x2f70 <vfprintf+0x7e>
    2fbc:	21 c0       	rjmp	.+66     	; 0x3000 <vfprintf+0x10e>
    2fbe:	68 94       	set
    2fc0:	31 f8       	bld	r3, 1
    2fc2:	68 94       	set
    2fc4:	32 f8       	bld	r3, 2
    2fc6:	f2 cf       	rjmp	.-28     	; 0x2fac <vfprintf+0xba>
    2fc8:	68 94       	set
    2fca:	33 f8       	bld	r3, 3
    2fcc:	ef cf       	rjmp	.-34     	; 0x2fac <vfprintf+0xba>
    2fce:	68 94       	set
    2fd0:	34 f8       	bld	r3, 4
    2fd2:	ec cf       	rjmp	.-40     	; 0x2fac <vfprintf+0xba>
    2fd4:	ea e0       	ldi	r30, 0x0A	; 10
    2fd6:	2e 9e       	mul	r2, r30
    2fd8:	20 0d       	add	r18, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	22 2e       	mov	r2, r18
    2fde:	68 94       	set
    2fe0:	35 f8       	bld	r3, 5
    2fe2:	e4 cf       	rjmp	.-56     	; 0x2fac <vfprintf+0xba>
    2fe4:	8e 32       	cpi	r24, 0x2E	; 46
    2fe6:	29 f4       	brne	.+10     	; 0x2ff2 <vfprintf+0x100>
    2fe8:	36 fc       	sbrc	r3, 6
    2fea:	04 c1       	rjmp	.+520    	; 0x31f4 <vfprintf+0x302>
    2fec:	68 94       	set
    2fee:	36 f8       	bld	r3, 6
    2ff0:	dd cf       	rjmp	.-70     	; 0x2fac <vfprintf+0xba>
    2ff2:	8c 36       	cpi	r24, 0x6C	; 108
    2ff4:	19 f4       	brne	.+6      	; 0x2ffc <vfprintf+0x10a>
    2ff6:	68 94       	set
    2ff8:	37 f8       	bld	r3, 7
    2ffa:	d8 cf       	rjmp	.-80     	; 0x2fac <vfprintf+0xba>
    2ffc:	88 36       	cpi	r24, 0x68	; 104
    2ffe:	b1 f2       	breq	.-84     	; 0x2fac <vfprintf+0xba>
    3000:	98 2f       	mov	r25, r24
    3002:	9f 7d       	andi	r25, 0xDF	; 223
    3004:	95 54       	subi	r25, 0x45	; 69
    3006:	93 30       	cpi	r25, 0x03	; 3
    3008:	e0 f0       	brcs	.+56     	; 0x3042 <vfprintf+0x150>
    300a:	83 36       	cpi	r24, 0x63	; 99
    300c:	a1 f1       	breq	.+104    	; 0x3076 <vfprintf+0x184>
    300e:	83 37       	cpi	r24, 0x73	; 115
    3010:	c1 f1       	breq	.+112    	; 0x3082 <vfprintf+0x190>
    3012:	83 35       	cpi	r24, 0x53	; 83
    3014:	09 f0       	breq	.+2      	; 0x3018 <vfprintf+0x126>
    3016:	63 c0       	rjmp	.+198    	; 0x30de <vfprintf+0x1ec>
    3018:	28 01       	movw	r4, r16
    301a:	f2 e0       	ldi	r31, 0x02	; 2
    301c:	4f 0e       	add	r4, r31
    301e:	51 1c       	adc	r5, r1
    3020:	f8 01       	movw	r30, r16
    3022:	c0 80       	ld	r12, Z
    3024:	d1 80       	ldd	r13, Z+1	; 0x01
    3026:	69 2d       	mov	r22, r9
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	36 fc       	sbrc	r3, 6
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <vfprintf+0x140>
    302e:	6f ef       	ldi	r22, 0xFF	; 255
    3030:	7f ef       	ldi	r23, 0xFF	; 255
    3032:	c6 01       	movw	r24, r12
    3034:	0e 94 76 19 	call	0x32ec	; 0x32ec <strnlen_P>
    3038:	4c 01       	movw	r8, r24
    303a:	68 94       	set
    303c:	37 f8       	bld	r3, 7
    303e:	82 01       	movw	r16, r4
    3040:	0a c0       	rjmp	.+20     	; 0x3056 <vfprintf+0x164>
    3042:	0c 5f       	subi	r16, 0xFC	; 252
    3044:	1f 4f       	sbci	r17, 0xFF	; 255
    3046:	ff e3       	ldi	r31, 0x3F	; 63
    3048:	f9 83       	std	Y+1, r31	; 0x01
    304a:	88 24       	eor	r8, r8
    304c:	83 94       	inc	r8
    304e:	91 2c       	mov	r9, r1
    3050:	65 01       	movw	r12, r10
    3052:	e8 94       	clt
    3054:	37 f8       	bld	r3, 7
    3056:	33 fe       	sbrs	r3, 3
    3058:	2d c0       	rjmp	.+90     	; 0x30b4 <vfprintf+0x1c2>
    305a:	52 2c       	mov	r5, r2
    305c:	81 14       	cp	r8, r1
    305e:	91 04       	cpc	r9, r1
    3060:	71 f5       	brne	.+92     	; 0x30be <vfprintf+0x1cc>
    3062:	55 20       	and	r5, r5
    3064:	09 f4       	brne	.+2      	; 0x3068 <vfprintf+0x176>
    3066:	68 cf       	rjmp	.-304    	; 0x2f38 <vfprintf+0x46>
    3068:	b7 01       	movw	r22, r14
    306a:	80 e2       	ldi	r24, 0x20	; 32
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    3072:	5a 94       	dec	r5
    3074:	f6 cf       	rjmp	.-20     	; 0x3062 <vfprintf+0x170>
    3076:	f8 01       	movw	r30, r16
    3078:	80 81       	ld	r24, Z
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	0e 5f       	subi	r16, 0xFE	; 254
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	e4 cf       	rjmp	.-56     	; 0x304a <vfprintf+0x158>
    3082:	28 01       	movw	r4, r16
    3084:	f2 e0       	ldi	r31, 0x02	; 2
    3086:	4f 0e       	add	r4, r31
    3088:	51 1c       	adc	r5, r1
    308a:	f8 01       	movw	r30, r16
    308c:	c0 80       	ld	r12, Z
    308e:	d1 80       	ldd	r13, Z+1	; 0x01
    3090:	69 2d       	mov	r22, r9
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	36 fc       	sbrc	r3, 6
    3096:	02 c0       	rjmp	.+4      	; 0x309c <vfprintf+0x1aa>
    3098:	6f ef       	ldi	r22, 0xFF	; 255
    309a:	7f ef       	ldi	r23, 0xFF	; 255
    309c:	c6 01       	movw	r24, r12
    309e:	0e 94 81 19 	call	0x3302	; 0x3302 <strnlen>
    30a2:	4c 01       	movw	r8, r24
    30a4:	82 01       	movw	r16, r4
    30a6:	d5 cf       	rjmp	.-86     	; 0x3052 <vfprintf+0x160>
    30a8:	b7 01       	movw	r22, r14
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    30b2:	2a 94       	dec	r2
    30b4:	28 14       	cp	r2, r8
    30b6:	19 04       	cpc	r1, r9
    30b8:	09 f0       	breq	.+2      	; 0x30bc <vfprintf+0x1ca>
    30ba:	b0 f7       	brcc	.-20     	; 0x30a8 <vfprintf+0x1b6>
    30bc:	ce cf       	rjmp	.-100    	; 0x305a <vfprintf+0x168>
    30be:	f6 01       	movw	r30, r12
    30c0:	37 fc       	sbrc	r3, 7
    30c2:	85 91       	lpm	r24, Z+
    30c4:	37 fe       	sbrs	r3, 7
    30c6:	81 91       	ld	r24, Z+
    30c8:	6f 01       	movw	r12, r30
    30ca:	b7 01       	movw	r22, r14
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    30d2:	51 10       	cpse	r5, r1
    30d4:	5a 94       	dec	r5
    30d6:	f1 e0       	ldi	r31, 0x01	; 1
    30d8:	8f 1a       	sub	r8, r31
    30da:	91 08       	sbc	r9, r1
    30dc:	bf cf       	rjmp	.-130    	; 0x305c <vfprintf+0x16a>
    30de:	84 36       	cpi	r24, 0x64	; 100
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <vfprintf+0x1f6>
    30e2:	89 36       	cpi	r24, 0x69	; 105
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <vfprintf+0x1f6>
    30e6:	77 c0       	rjmp	.+238    	; 0x31d6 <vfprintf+0x2e4>
    30e8:	f8 01       	movw	r30, r16
    30ea:	37 fe       	sbrs	r3, 7
    30ec:	6b c0       	rjmp	.+214    	; 0x31c4 <vfprintf+0x2d2>
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	0c 5f       	subi	r16, 0xFC	; 252
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	f3 2d       	mov	r31, r3
    30fc:	ff 76       	andi	r31, 0x6F	; 111
    30fe:	3f 2e       	mov	r3, r31
    3100:	97 ff       	sbrs	r25, 7
    3102:	09 c0       	rjmp	.+18     	; 0x3116 <vfprintf+0x224>
    3104:	90 95       	com	r25
    3106:	80 95       	com	r24
    3108:	70 95       	com	r23
    310a:	61 95       	neg	r22
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	8f 4f       	sbci	r24, 0xFF	; 255
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	68 94       	set
    3114:	37 f8       	bld	r3, 7
    3116:	2a e0       	ldi	r18, 0x0A	; 10
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	a5 01       	movw	r20, r10
    311c:	0e 94 bc 19 	call	0x3378	; 0x3378 <__ultoa_invert>
    3120:	c8 2e       	mov	r12, r24
    3122:	ca 18       	sub	r12, r10
    3124:	8c 2c       	mov	r8, r12
    3126:	43 2c       	mov	r4, r3
    3128:	36 fe       	sbrs	r3, 6
    312a:	0c c0       	rjmp	.+24     	; 0x3144 <vfprintf+0x252>
    312c:	e8 94       	clt
    312e:	40 f8       	bld	r4, 0
    3130:	c9 14       	cp	r12, r9
    3132:	40 f4       	brcc	.+16     	; 0x3144 <vfprintf+0x252>
    3134:	34 fe       	sbrs	r3, 4
    3136:	05 c0       	rjmp	.+10     	; 0x3142 <vfprintf+0x250>
    3138:	32 fc       	sbrc	r3, 2
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <vfprintf+0x250>
    313c:	f3 2d       	mov	r31, r3
    313e:	fe 7e       	andi	r31, 0xEE	; 238
    3140:	4f 2e       	mov	r4, r31
    3142:	89 2c       	mov	r8, r9
    3144:	44 fe       	sbrs	r4, 4
    3146:	a7 c0       	rjmp	.+334    	; 0x3296 <vfprintf+0x3a4>
    3148:	fe 01       	movw	r30, r28
    314a:	ec 0d       	add	r30, r12
    314c:	f1 1d       	adc	r31, r1
    314e:	80 81       	ld	r24, Z
    3150:	80 33       	cpi	r24, 0x30	; 48
    3152:	09 f0       	breq	.+2      	; 0x3156 <vfprintf+0x264>
    3154:	99 c0       	rjmp	.+306    	; 0x3288 <vfprintf+0x396>
    3156:	24 2d       	mov	r18, r4
    3158:	29 7e       	andi	r18, 0xE9	; 233
    315a:	42 2e       	mov	r4, r18
    315c:	84 2d       	mov	r24, r4
    315e:	88 70       	andi	r24, 0x08	; 8
    3160:	58 2e       	mov	r5, r24
    3162:	43 fc       	sbrc	r4, 3
    3164:	a7 c0       	rjmp	.+334    	; 0x32b4 <vfprintf+0x3c2>
    3166:	40 fe       	sbrs	r4, 0
    3168:	a1 c0       	rjmp	.+322    	; 0x32ac <vfprintf+0x3ba>
    316a:	9c 2c       	mov	r9, r12
    316c:	82 14       	cp	r8, r2
    316e:	18 f4       	brcc	.+6      	; 0x3176 <vfprintf+0x284>
    3170:	2c 0c       	add	r2, r12
    3172:	92 2c       	mov	r9, r2
    3174:	98 18       	sub	r9, r8
    3176:	44 fe       	sbrs	r4, 4
    3178:	a3 c0       	rjmp	.+326    	; 0x32c0 <vfprintf+0x3ce>
    317a:	b7 01       	movw	r22, r14
    317c:	80 e3       	ldi	r24, 0x30	; 48
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    3184:	42 fe       	sbrs	r4, 2
    3186:	09 c0       	rjmp	.+18     	; 0x319a <vfprintf+0x2a8>
    3188:	88 e7       	ldi	r24, 0x78	; 120
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	41 fe       	sbrs	r4, 1
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <vfprintf+0x2a2>
    3190:	88 e5       	ldi	r24, 0x58	; 88
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	b7 01       	movw	r22, r14
    3196:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    319a:	c9 14       	cp	r12, r9
    319c:	08 f4       	brcc	.+2      	; 0x31a0 <vfprintf+0x2ae>
    319e:	9c c0       	rjmp	.+312    	; 0x32d8 <vfprintf+0x3e6>
    31a0:	ca 94       	dec	r12
    31a2:	d1 2c       	mov	r13, r1
    31a4:	9f ef       	ldi	r25, 0xFF	; 255
    31a6:	c9 1a       	sub	r12, r25
    31a8:	d9 0a       	sbc	r13, r25
    31aa:	ca 0c       	add	r12, r10
    31ac:	db 1c       	adc	r13, r11
    31ae:	f6 01       	movw	r30, r12
    31b0:	82 91       	ld	r24, -Z
    31b2:	6f 01       	movw	r12, r30
    31b4:	b7 01       	movw	r22, r14
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    31bc:	ac 14       	cp	r10, r12
    31be:	bd 04       	cpc	r11, r13
    31c0:	b1 f7       	brne	.-20     	; 0x31ae <vfprintf+0x2bc>
    31c2:	4f cf       	rjmp	.-354    	; 0x3062 <vfprintf+0x170>
    31c4:	60 81       	ld	r22, Z
    31c6:	71 81       	ldd	r23, Z+1	; 0x01
    31c8:	07 2e       	mov	r0, r23
    31ca:	00 0c       	add	r0, r0
    31cc:	88 0b       	sbc	r24, r24
    31ce:	99 0b       	sbc	r25, r25
    31d0:	0e 5f       	subi	r16, 0xFE	; 254
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	92 cf       	rjmp	.-220    	; 0x30fa <vfprintf+0x208>
    31d6:	d3 2c       	mov	r13, r3
    31d8:	e8 94       	clt
    31da:	d4 f8       	bld	r13, 4
    31dc:	2a e0       	ldi	r18, 0x0A	; 10
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	85 37       	cpi	r24, 0x75	; 117
    31e2:	c9 f1       	breq	.+114    	; 0x3256 <vfprintf+0x364>
    31e4:	23 2d       	mov	r18, r3
    31e6:	29 7f       	andi	r18, 0xF9	; 249
    31e8:	d2 2e       	mov	r13, r18
    31ea:	8f 36       	cpi	r24, 0x6F	; 111
    31ec:	91 f1       	breq	.+100    	; 0x3252 <vfprintf+0x360>
    31ee:	d8 f4       	brcc	.+54     	; 0x3226 <vfprintf+0x334>
    31f0:	88 35       	cpi	r24, 0x58	; 88
    31f2:	39 f1       	breq	.+78     	; 0x3242 <vfprintf+0x350>
    31f4:	f7 01       	movw	r30, r14
    31f6:	86 81       	ldd	r24, Z+6	; 0x06
    31f8:	97 81       	ldd	r25, Z+7	; 0x07
    31fa:	2b 96       	adiw	r28, 0x0b	; 11
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	cf 90       	pop	r12
    3210:	bf 90       	pop	r11
    3212:	af 90       	pop	r10
    3214:	9f 90       	pop	r9
    3216:	8f 90       	pop	r8
    3218:	7f 90       	pop	r7
    321a:	6f 90       	pop	r6
    321c:	5f 90       	pop	r5
    321e:	4f 90       	pop	r4
    3220:	3f 90       	pop	r3
    3222:	2f 90       	pop	r2
    3224:	08 95       	ret
    3226:	80 37       	cpi	r24, 0x70	; 112
    3228:	49 f0       	breq	.+18     	; 0x323c <vfprintf+0x34a>
    322a:	88 37       	cpi	r24, 0x78	; 120
    322c:	19 f7       	brne	.-58     	; 0x31f4 <vfprintf+0x302>
    322e:	d4 fe       	sbrs	r13, 4
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <vfprintf+0x344>
    3232:	68 94       	set
    3234:	d2 f8       	bld	r13, 2
    3236:	20 e1       	ldi	r18, 0x10	; 16
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	0d c0       	rjmp	.+26     	; 0x3256 <vfprintf+0x364>
    323c:	68 94       	set
    323e:	d4 f8       	bld	r13, 4
    3240:	f6 cf       	rjmp	.-20     	; 0x322e <vfprintf+0x33c>
    3242:	34 fe       	sbrs	r3, 4
    3244:	03 c0       	rjmp	.+6      	; 0x324c <vfprintf+0x35a>
    3246:	82 2f       	mov	r24, r18
    3248:	86 60       	ori	r24, 0x06	; 6
    324a:	d8 2e       	mov	r13, r24
    324c:	20 e1       	ldi	r18, 0x10	; 16
    324e:	32 e0       	ldi	r19, 0x02	; 2
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <vfprintf+0x364>
    3252:	28 e0       	ldi	r18, 0x08	; 8
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	f8 01       	movw	r30, r16
    3258:	d7 fe       	sbrs	r13, 7
    325a:	0f c0       	rjmp	.+30     	; 0x327a <vfprintf+0x388>
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	0c 5f       	subi	r16, 0xFC	; 252
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	a5 01       	movw	r20, r10
    326a:	0e 94 bc 19 	call	0x3378	; 0x3378 <__ultoa_invert>
    326e:	c8 2e       	mov	r12, r24
    3270:	ca 18       	sub	r12, r10
    3272:	3d 2c       	mov	r3, r13
    3274:	e8 94       	clt
    3276:	37 f8       	bld	r3, 7
    3278:	55 cf       	rjmp	.-342    	; 0x3124 <vfprintf+0x232>
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	0e 5f       	subi	r16, 0xFE	; 254
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	f0 cf       	rjmp	.-32     	; 0x3268 <vfprintf+0x376>
    3288:	42 fc       	sbrc	r4, 2
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0x39e>
    328c:	83 94       	inc	r8
    328e:	66 cf       	rjmp	.-308    	; 0x315c <vfprintf+0x26a>
    3290:	83 94       	inc	r8
    3292:	83 94       	inc	r8
    3294:	63 cf       	rjmp	.-314    	; 0x315c <vfprintf+0x26a>
    3296:	84 2d       	mov	r24, r4
    3298:	86 78       	andi	r24, 0x86	; 134
    329a:	09 f4       	brne	.+2      	; 0x329e <vfprintf+0x3ac>
    329c:	5f cf       	rjmp	.-322    	; 0x315c <vfprintf+0x26a>
    329e:	f6 cf       	rjmp	.-20     	; 0x328c <vfprintf+0x39a>
    32a0:	b7 01       	movw	r22, r14
    32a2:	80 e2       	ldi	r24, 0x20	; 32
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    32aa:	83 94       	inc	r8
    32ac:	82 14       	cp	r8, r2
    32ae:	c0 f3       	brcs	.-16     	; 0x32a0 <vfprintf+0x3ae>
    32b0:	51 2c       	mov	r5, r1
    32b2:	61 cf       	rjmp	.-318    	; 0x3176 <vfprintf+0x284>
    32b4:	52 2c       	mov	r5, r2
    32b6:	58 18       	sub	r5, r8
    32b8:	82 14       	cp	r8, r2
    32ba:	08 f4       	brcc	.+2      	; 0x32be <vfprintf+0x3cc>
    32bc:	5c cf       	rjmp	.-328    	; 0x3176 <vfprintf+0x284>
    32be:	f8 cf       	rjmp	.-16     	; 0x32b0 <vfprintf+0x3be>
    32c0:	84 2d       	mov	r24, r4
    32c2:	86 78       	andi	r24, 0x86	; 134
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <vfprintf+0x3d6>
    32c6:	69 cf       	rjmp	.-302    	; 0x319a <vfprintf+0x2a8>
    32c8:	8b e2       	ldi	r24, 0x2B	; 43
    32ca:	41 fe       	sbrs	r4, 1
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	47 fc       	sbrc	r4, 7
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	b7 01       	movw	r22, r14
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	5f cf       	rjmp	.-322    	; 0x3196 <vfprintf+0x2a4>
    32d8:	b7 01       	movw	r22, r14
    32da:	80 e3       	ldi	r24, 0x30	; 48
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 8c 19 	call	0x3318	; 0x3318 <fputc>
    32e2:	9a 94       	dec	r9
    32e4:	5a cf       	rjmp	.-332    	; 0x319a <vfprintf+0x2a8>
    32e6:	8f ef       	ldi	r24, 0xFF	; 255
    32e8:	9f ef       	ldi	r25, 0xFF	; 255
    32ea:	87 cf       	rjmp	.-242    	; 0x31fa <vfprintf+0x308>

000032ec <strnlen_P>:
    32ec:	fc 01       	movw	r30, r24
    32ee:	05 90       	lpm	r0, Z+
    32f0:	61 50       	subi	r22, 0x01	; 1
    32f2:	70 40       	sbci	r23, 0x00	; 0
    32f4:	01 10       	cpse	r0, r1
    32f6:	d8 f7       	brcc	.-10     	; 0x32ee <strnlen_P+0x2>
    32f8:	80 95       	com	r24
    32fa:	90 95       	com	r25
    32fc:	8e 0f       	add	r24, r30
    32fe:	9f 1f       	adc	r25, r31
    3300:	08 95       	ret

00003302 <strnlen>:
    3302:	fc 01       	movw	r30, r24
    3304:	61 50       	subi	r22, 0x01	; 1
    3306:	70 40       	sbci	r23, 0x00	; 0
    3308:	01 90       	ld	r0, Z+
    330a:	01 10       	cpse	r0, r1
    330c:	d8 f7       	brcc	.-10     	; 0x3304 <strnlen+0x2>
    330e:	80 95       	com	r24
    3310:	90 95       	com	r25
    3312:	8e 0f       	add	r24, r30
    3314:	9f 1f       	adc	r25, r31
    3316:	08 95       	ret

00003318 <fputc>:
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	18 2f       	mov	r17, r24
    3322:	09 2f       	mov	r16, r25
    3324:	eb 01       	movw	r28, r22
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	81 fd       	sbrc	r24, 1
    332a:	09 c0       	rjmp	.+18     	; 0x333e <fputc+0x26>
    332c:	1f ef       	ldi	r17, 0xFF	; 255
    332e:	0f ef       	ldi	r16, 0xFF	; 255
    3330:	81 2f       	mov	r24, r17
    3332:	90 2f       	mov	r25, r16
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	08 95       	ret
    333e:	82 ff       	sbrs	r24, 2
    3340:	14 c0       	rjmp	.+40     	; 0x336a <fputc+0x52>
    3342:	2e 81       	ldd	r18, Y+6	; 0x06
    3344:	3f 81       	ldd	r19, Y+7	; 0x07
    3346:	8c 81       	ldd	r24, Y+4	; 0x04
    3348:	9d 81       	ldd	r25, Y+5	; 0x05
    334a:	28 17       	cp	r18, r24
    334c:	39 07       	cpc	r19, r25
    334e:	3c f4       	brge	.+14     	; 0x335e <fputc+0x46>
    3350:	e8 81       	ld	r30, Y
    3352:	f9 81       	ldd	r31, Y+1	; 0x01
    3354:	cf 01       	movw	r24, r30
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	88 83       	st	Y, r24
    335a:	99 83       	std	Y+1, r25	; 0x01
    335c:	10 83       	st	Z, r17
    335e:	8e 81       	ldd	r24, Y+6	; 0x06
    3360:	9f 81       	ldd	r25, Y+7	; 0x07
    3362:	01 96       	adiw	r24, 0x01	; 1
    3364:	8e 83       	std	Y+6, r24	; 0x06
    3366:	9f 83       	std	Y+7, r25	; 0x07
    3368:	e3 cf       	rjmp	.-58     	; 0x3330 <fputc+0x18>
    336a:	e8 85       	ldd	r30, Y+8	; 0x08
    336c:	f9 85       	ldd	r31, Y+9	; 0x09
    336e:	81 2f       	mov	r24, r17
    3370:	09 95       	icall
    3372:	89 2b       	or	r24, r25
    3374:	a1 f3       	breq	.-24     	; 0x335e <fputc+0x46>
    3376:	da cf       	rjmp	.-76     	; 0x332c <fputc+0x14>

00003378 <__ultoa_invert>:
    3378:	fa 01       	movw	r30, r20
    337a:	aa 27       	eor	r26, r26
    337c:	28 30       	cpi	r18, 0x08	; 8
    337e:	51 f1       	breq	.+84     	; 0x33d4 <__ultoa_invert+0x5c>
    3380:	20 31       	cpi	r18, 0x10	; 16
    3382:	81 f1       	breq	.+96     	; 0x33e4 <__ultoa_invert+0x6c>
    3384:	e8 94       	clt
    3386:	6f 93       	push	r22
    3388:	6e 7f       	andi	r22, 0xFE	; 254
    338a:	6e 5f       	subi	r22, 0xFE	; 254
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	8f 4f       	sbci	r24, 0xFF	; 255
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	af 4f       	sbci	r26, 0xFF	; 255
    3394:	b1 e0       	ldi	r27, 0x01	; 1
    3396:	3e d0       	rcall	.+124    	; 0x3414 <__ultoa_invert+0x9c>
    3398:	b4 e0       	ldi	r27, 0x04	; 4
    339a:	3c d0       	rcall	.+120    	; 0x3414 <__ultoa_invert+0x9c>
    339c:	67 0f       	add	r22, r23
    339e:	78 1f       	adc	r23, r24
    33a0:	89 1f       	adc	r24, r25
    33a2:	9a 1f       	adc	r25, r26
    33a4:	a1 1d       	adc	r26, r1
    33a6:	68 0f       	add	r22, r24
    33a8:	79 1f       	adc	r23, r25
    33aa:	8a 1f       	adc	r24, r26
    33ac:	91 1d       	adc	r25, r1
    33ae:	a1 1d       	adc	r26, r1
    33b0:	6a 0f       	add	r22, r26
    33b2:	71 1d       	adc	r23, r1
    33b4:	81 1d       	adc	r24, r1
    33b6:	91 1d       	adc	r25, r1
    33b8:	a1 1d       	adc	r26, r1
    33ba:	20 d0       	rcall	.+64     	; 0x33fc <__ultoa_invert+0x84>
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <__ultoa_invert+0x48>
    33be:	68 94       	set
    33c0:	3f 91       	pop	r19
    33c2:	2a e0       	ldi	r18, 0x0A	; 10
    33c4:	26 9f       	mul	r18, r22
    33c6:	11 24       	eor	r1, r1
    33c8:	30 19       	sub	r19, r0
    33ca:	30 5d       	subi	r19, 0xD0	; 208
    33cc:	31 93       	st	Z+, r19
    33ce:	de f6       	brtc	.-74     	; 0x3386 <__ultoa_invert+0xe>
    33d0:	cf 01       	movw	r24, r30
    33d2:	08 95       	ret
    33d4:	46 2f       	mov	r20, r22
    33d6:	47 70       	andi	r20, 0x07	; 7
    33d8:	40 5d       	subi	r20, 0xD0	; 208
    33da:	41 93       	st	Z+, r20
    33dc:	b3 e0       	ldi	r27, 0x03	; 3
    33de:	0f d0       	rcall	.+30     	; 0x33fe <__ultoa_invert+0x86>
    33e0:	c9 f7       	brne	.-14     	; 0x33d4 <__ultoa_invert+0x5c>
    33e2:	f6 cf       	rjmp	.-20     	; 0x33d0 <__ultoa_invert+0x58>
    33e4:	46 2f       	mov	r20, r22
    33e6:	4f 70       	andi	r20, 0x0F	; 15
    33e8:	40 5d       	subi	r20, 0xD0	; 208
    33ea:	4a 33       	cpi	r20, 0x3A	; 58
    33ec:	18 f0       	brcs	.+6      	; 0x33f4 <__ultoa_invert+0x7c>
    33ee:	49 5d       	subi	r20, 0xD9	; 217
    33f0:	31 fd       	sbrc	r19, 1
    33f2:	40 52       	subi	r20, 0x20	; 32
    33f4:	41 93       	st	Z+, r20
    33f6:	02 d0       	rcall	.+4      	; 0x33fc <__ultoa_invert+0x84>
    33f8:	a9 f7       	brne	.-22     	; 0x33e4 <__ultoa_invert+0x6c>
    33fa:	ea cf       	rjmp	.-44     	; 0x33d0 <__ultoa_invert+0x58>
    33fc:	b4 e0       	ldi	r27, 0x04	; 4
    33fe:	a6 95       	lsr	r26
    3400:	97 95       	ror	r25
    3402:	87 95       	ror	r24
    3404:	77 95       	ror	r23
    3406:	67 95       	ror	r22
    3408:	ba 95       	dec	r27
    340a:	c9 f7       	brne	.-14     	; 0x33fe <__ultoa_invert+0x86>
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	61 05       	cpc	r22, r1
    3410:	71 05       	cpc	r23, r1
    3412:	08 95       	ret
    3414:	9b 01       	movw	r18, r22
    3416:	ac 01       	movw	r20, r24
    3418:	0a 2e       	mov	r0, r26
    341a:	06 94       	lsr	r0
    341c:	57 95       	ror	r21
    341e:	47 95       	ror	r20
    3420:	37 95       	ror	r19
    3422:	27 95       	ror	r18
    3424:	ba 95       	dec	r27
    3426:	c9 f7       	brne	.-14     	; 0x341a <__ultoa_invert+0xa2>
    3428:	62 0f       	add	r22, r18
    342a:	73 1f       	adc	r23, r19
    342c:	84 1f       	adc	r24, r20
    342e:	95 1f       	adc	r25, r21
    3430:	a0 1d       	adc	r26, r0
    3432:	08 95       	ret

00003434 <__do_global_dtors>:
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	c6 e7       	ldi	r28, 0x76	; 118
    3438:	d0 e0       	ldi	r29, 0x00	; 0
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <__do_global_dtors+0x10>
    343c:	fe 01       	movw	r30, r28
    343e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__tablejump2__>
    3442:	21 96       	adiw	r28, 0x01	; 1
    3444:	c8 37       	cpi	r28, 0x78	; 120
    3446:	d1 07       	cpc	r29, r17
    3448:	c9 f7       	brne	.-14     	; 0x343c <__do_global_dtors+0x8>
    344a:	f8 94       	cli

0000344c <__stop_program>:
    344c:	ff cf       	rjmp	.-2      	; 0x344c <__stop_program>
