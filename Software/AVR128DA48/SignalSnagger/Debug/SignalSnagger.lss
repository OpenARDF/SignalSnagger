
SignalSnagger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00804000  0000366a  0000371e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000366a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00804034  00804034  00003752  2**0
                  ALLOC
  3 .eeprom       00000112  00810000  00810000  00003752  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000658  00000000  00000000  00003900  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ef1b  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005661  00000000  00000000  00012e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004cbf  00000000  00000000  000184d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011e0  00000000  00000000  0001d194  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005969  00000000  00000000  0001e374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005afb  00000000  00000000  00023cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000600  00000000  00000000  000297d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__dtors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_6>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_12>
      34:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__vector_13>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      60:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_24>
      64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      68:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      6c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      70:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      74:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      78:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__vector_30>
      7c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      80:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      84:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_34>
      8c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      90:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      94:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      98:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      9c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      a0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      a4:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_41>
      a8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      ac:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      b8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      bc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      c8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      cc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      d8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      dc:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      e0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      e4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

000000e8 <__ctors_start>:
      e8:	23 05       	cpc	r18, r3
      ea:	4f 06       	cpc	r4, r31

000000ec <__ctors_end>:
      ec:	32 05       	cpc	r19, r2
      ee:	60 06       	cpc	r6, r16

000000f0 <__dtors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	df e7       	ldi	r29, 0x7F	; 127
      fa:	de bf       	out	0x3e, r29	; 62

000000fc <__do_copy_data>:
      fc:	10 e4       	ldi	r17, 0x40	; 64
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e4       	ldi	r27, 0x40	; 64
     102:	ea e6       	ldi	r30, 0x6A	; 106
     104:	f6 e3       	ldi	r31, 0x36	; 54
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a4 33       	cpi	r26, 0x34	; 52
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	21 e4       	ldi	r18, 0x41	; 65
     118:	a4 e3       	ldi	r26, 0x34	; 52
     11a:	b0 e4       	ldi	r27, 0x40	; 64
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a7 32       	cpi	r26, 0x27	; 39
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	c6 e7       	ldi	r28, 0x76	; 118
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_global_ctors+0x10>
     12e:	21 97       	sbiw	r28, 0x01	; 1
     130:	fe 01       	movw	r30, r28
     132:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__tablejump2__>
     136:	c4 37       	cpi	r28, 0x74	; 116
     138:	d1 07       	cpc	r29, r17
     13a:	c9 f7       	brne	.-14     	; 0x12e <__do_global_ctors+0x8>
     13c:	0e 94 80 03 	call	0x700	; 0x700 <main>
     140:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__do_global_dtors>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <set_system_time>:
     148:	0f b6       	in	r0, 0x3f	; 63
     14a:	f8 94       	cli
     14c:	60 93 23 41 	sts	0x4123, r22	; 0x804123 <__system_time>
     150:	70 93 24 41 	sts	0x4124, r23	; 0x804124 <__system_time+0x1>
     154:	80 93 25 41 	sts	0x4125, r24	; 0x804125 <__system_time+0x2>
     158:	90 93 26 41 	sts	0x4126, r25	; 0x804126 <__system_time+0x3>
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	08 95       	ret

00000160 <time>:
     160:	fc 01       	movw	r30, r24
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	60 91 23 41 	lds	r22, 0x4123	; 0x804123 <__system_time>
     16a:	70 91 24 41 	lds	r23, 0x4124	; 0x804124 <__system_time+0x1>
     16e:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <__system_time+0x2>
     172:	90 91 26 41 	lds	r25, 0x4126	; 0x804126 <__system_time+0x3>
     176:	0f be       	out	0x3f, r0	; 63
     178:	30 97       	sbiw	r30, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <time+0x24>
     17c:	60 83       	st	Z, r22
     17e:	71 83       	std	Z+1, r23	; 0x01
     180:	82 83       	std	Z+2, r24	; 0x02
     182:	93 83       	std	Z+3, r25	; 0x03
     184:	08 95       	ret

00000186 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     186:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <system_init>
}
     18a:	08 95       	ret

0000018c <__vector_34>:
			str[5] = '\0';
			return str;
		}
	}
				
	return str;
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	11 24       	eor	r1, r1
     196:	8f 93       	push	r24
     198:	8f b1       	in	r24, 0x0f	; 15
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	8f b9       	out	0x0f, r24	; 15
     19e:	8f 91       	pop	r24
     1a0:	0f 90       	pop	r0
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	0f 90       	pop	r0
     1a6:	1f 90       	pop	r1
     1a8:	18 95       	reti

000001aa <__vector_12>:
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
     1b4:	0b b6       	in	r0, 0x3b	; 59
     1b6:	0f 92       	push	r0
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	2f 93       	push	r18
     1be:	3f 93       	push	r19
     1c0:	4f 93       	push	r20
     1c2:	5f 93       	push	r21
     1c4:	6f 93       	push	r22
     1c6:	7f 93       	push	r23
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ef 93       	push	r30
     1d6:	ff 93       	push	r31
     1d8:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     1dc:	80 ff       	sbrs	r24, 0
     1de:	1f c2       	rjmp	.+1086   	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     1e0:	20 91 09 40 	lds	r18, 0x4009	; 0x804009 <_ZZ11__vector_12E7fiftyMS>
     1e4:	2f 5f       	subi	r18, 0xFF	; 255
     1e6:	20 93 09 40 	sts	0x4009, r18	; 0x804009 <_ZZ11__vector_12E7fiftyMS>
     1ea:	8b ea       	ldi	r24, 0xAB	; 171
     1ec:	28 9f       	mul	r18, r24
     1ee:	81 2d       	mov	r24, r1
     1f0:	11 24       	eor	r1, r1
     1f2:	86 95       	lsr	r24
     1f4:	86 95       	lsr	r24
     1f6:	98 2f       	mov	r25, r24
     1f8:	99 0f       	add	r25, r25
     1fa:	89 0f       	add	r24, r25
     1fc:	88 0f       	add	r24, r24
     1fe:	28 17       	cp	r18, r24
     200:	59 f0       	breq	.+22     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
     202:	80 91 3e 40 	lds	r24, 0x403E	; 0x80403e <_ZZ11__vector_12E19conversionInProcess>
     206:	81 11       	cpse	r24, r1
     208:	3e c2       	rjmp	.+1148   	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	80 93 3d 40 	sts	0x403D, r24	; 0x80403d <_ZZ11__vector_12E24indexConversionInProcess>
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	2f ef       	ldi	r18, 0xFF	; 255
     216:	df c1       	rjmp	.+958    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     218:	0e 94 90 06 	call	0xd20	; 0xd20 <_Z18portAdebouncedValsv>
     21c:	c8 2f       	mov	r28, r24
     21e:	d8 2f       	mov	r29, r24
     220:	d7 70       	andi	r29, 0x07	; 7
     222:	0e 94 65 06 	call	0xcca	; 0xcca <_Z8debouncev>
     226:	0e 94 90 06 	call	0xd20	; 0xd20 <_Z18portAdebouncedValsv>
     22a:	98 2f       	mov	r25, r24
     22c:	97 70       	andi	r25, 0x07	; 7
     22e:	d9 17       	cp	r29, r25
     230:	09 f4       	brne	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
     232:	d7 c0       	rjmp	.+430    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     234:	9d 2f       	mov	r25, r29
     236:	92 70       	andi	r25, 0x02	; 2
     238:	0d 2f       	mov	r16, r29
     23a:	01 70       	andi	r16, 0x01	; 1
     23c:	d4 70       	andi	r29, 0x04	; 4
     23e:	c8 27       	eor	r28, r24
     240:	1c 2f       	mov	r17, r28
     242:	17 70       	andi	r17, 0x07	; 7
     244:	c1 ff       	sbrs	r28, 1
     246:	42 c0       	rjmp	.+132    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
     248:	99 23       	and	r25, r25
     24a:	a9 f0       	breq	.+42     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
     24c:	8a e4       	ldi	r24, 0x4A	; 74
     24e:	90 e4       	ldi	r25, 0x40	; 64
     250:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     254:	88 23       	and	r24, r24
     256:	61 f0       	breq	.+24     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
     258:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     25c:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	80 93 52 40 	sts	0x4052, r24	; 0x804052 <g_leftsense_presses_count>
     266:	90 93 53 40 	sts	0x4053, r25	; 0x804053 <g_leftsense_presses_count+0x1>
     26a:	10 92 36 40 	sts	0x4036, r1	; 0x804036 <_ZZ11__vector_12E17leftsenseReleased>
     26e:	13 c0       	rjmp	.+38     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     270:	10 92 08 40 	sts	0x4008, r1	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     274:	10 c0       	rjmp	.+32     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     276:	8a e4       	ldi	r24, 0x4A	; 74
     278:	90 e4       	ldi	r25, 0x40	; 64
     27a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     27e:	88 23       	and	r24, r24
     280:	01 f1       	breq	.+64     	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
     282:	10 92 5e 40 	sts	0x405E, r1	; 0x80405e <g_leftsense_closed_time>
     286:	10 92 5f 40 	sts	0x405F, r1	; 0x80405f <g_leftsense_closed_time+0x1>
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <_ZZ11__vector_12E17leftsenseReleased>
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 08 40 	sts	0x4008, r24	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     296:	10 ff       	sbrs	r17, 0
     298:	6c c0       	rjmp	.+216    	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
     29a:	00 23       	and	r16, r16
     29c:	f1 f1       	breq	.+124    	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
     29e:	8a e4       	ldi	r24, 0x4A	; 74
     2a0:	90 e4       	ldi	r25, 0x40	; 64
     2a2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     2a6:	88 23       	and	r24, r24
     2a8:	a9 f1       	breq	.+106    	; 0x314 <__EEPROM_REGION_LENGTH__+0x114>
     2aa:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     2ae:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	80 93 50 40 	sts	0x4050, r24	; 0x804050 <g_rightsense_presses_count>
     2b8:	90 93 51 40 	sts	0x4051, r25	; 0x804051 <g_rightsense_presses_count+0x1>
     2bc:	10 92 35 40 	sts	0x4035, r1	; 0x804035 <_ZZ11__vector_12E18rightsenseReleased>
     2c0:	3c c0       	rjmp	.+120    	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     2c2:	8a e4       	ldi	r24, 0x4A	; 74
     2c4:	90 e4       	ldi	r25, 0x40	; 64
     2c6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN4leds4initEv>
     2ca:	e2 cf       	rjmp	.-60     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
     2cc:	91 11       	cpse	r25, r1
     2ce:	e3 cf       	rjmp	.-58     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     2d0:	80 91 4d 40 	lds	r24, 0x404D	; 0x80404d <g_long_leftsense_press>
     2d4:	81 11       	cpse	r24, r1
     2d6:	df cf       	rjmp	.-66     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     2d8:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     2dc:	88 23       	and	r24, r24
     2de:	d9 f2       	breq	.-74     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     2e0:	80 91 5e 40 	lds	r24, 0x405E	; 0x80405e <g_leftsense_closed_time>
     2e4:	90 91 5f 40 	lds	r25, 0x405F	; 0x80405f <g_leftsense_closed_time+0x1>
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	80 93 5e 40 	sts	0x405E, r24	; 0x80405e <g_leftsense_closed_time>
     2ee:	90 93 5f 40 	sts	0x405F, r25	; 0x80405f <g_leftsense_closed_time+0x1>
     2f2:	88 3c       	cpi	r24, 0xC8	; 200
     2f4:	91 05       	cpc	r25, r1
     2f6:	78 f2       	brcs	.-98     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 4d 40 	sts	0x404D, r24	; 0x80404d <g_long_leftsense_press>
     2fe:	10 92 5e 40 	sts	0x405E, r1	; 0x80405e <g_leftsense_closed_time>
     302:	10 92 5f 40 	sts	0x405F, r1	; 0x80405f <g_leftsense_closed_time+0x1>
     306:	10 92 52 40 	sts	0x4052, r1	; 0x804052 <g_leftsense_presses_count>
     30a:	10 92 53 40 	sts	0x4053, r1	; 0x804053 <g_leftsense_presses_count+0x1>
     30e:	10 92 08 40 	sts	0x4008, r1	; 0x804008 <_ZZ11__vector_12E25leftsenseLongPressEnabled>
     312:	c1 cf       	rjmp	.-126    	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
     314:	10 92 07 40 	sts	0x4007, r1	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     318:	10 c0       	rjmp	.+32     	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     31a:	8a e4       	ldi	r24, 0x4A	; 74
     31c:	90 e4       	ldi	r25, 0x40	; 64
     31e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     322:	88 23       	and	r24, r24
     324:	09 f1       	breq	.+66     	; 0x368 <__EEPROM_REGION_LENGTH__+0x168>
     326:	10 92 5c 40 	sts	0x405C, r1	; 0x80405c <g_rightsense_closed_time>
     32a:	10 92 5d 40 	sts	0x405D, r1	; 0x80405d <g_rightsense_closed_time+0x1>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 35 40 	sts	0x4035, r24	; 0x804035 <_ZZ11__vector_12E18rightsenseReleased>
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     33a:	14 70       	andi	r17, 0x04	; 4
     33c:	09 f4       	brne	.+2      	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
     33e:	ca c0       	rjmp	.+404    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     340:	dd 23       	and	r29, r29
     342:	f1 f1       	breq	.+124    	; 0x3c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     344:	8a e4       	ldi	r24, 0x4A	; 74
     346:	90 e4       	ldi	r25, 0x40	; 64
     348:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     34c:	88 23       	and	r24, r24
     34e:	a9 f1       	breq	.+106    	; 0x3ba <__EEPROM_REGION_LENGTH__+0x1ba>
     350:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     354:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	80 93 4e 40 	sts	0x404E, r24	; 0x80404e <g_encoder_presses_count>
     35e:	90 93 4f 40 	sts	0x404F, r25	; 0x80404f <g_encoder_presses_count+0x1>
     362:	10 92 34 40 	sts	0x4034, r1	; 0x804034 <__data_end>
     366:	3d c0       	rjmp	.+122    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     368:	8a e4       	ldi	r24, 0x4A	; 74
     36a:	90 e4       	ldi	r25, 0x40	; 64
     36c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN4leds4initEv>
     370:	e1 cf       	rjmp	.-62     	; 0x334 <__EEPROM_REGION_LENGTH__+0x134>
     372:	01 11       	cpse	r16, r1
     374:	e2 cf       	rjmp	.-60     	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     376:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_long_rightsense_press>
     37a:	81 11       	cpse	r24, r1
     37c:	de cf       	rjmp	.-68     	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     37e:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     382:	88 23       	and	r24, r24
     384:	d1 f2       	breq	.-76     	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     386:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <g_rightsense_closed_time>
     38a:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <g_rightsense_closed_time+0x1>
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	80 93 5c 40 	sts	0x405C, r24	; 0x80405c <g_rightsense_closed_time>
     394:	90 93 5d 40 	sts	0x405D, r25	; 0x80405d <g_rightsense_closed_time+0x1>
     398:	88 3c       	cpi	r24, 0xC8	; 200
     39a:	91 05       	cpc	r25, r1
     39c:	70 f2       	brcs	.-100    	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 4c 40 	sts	0x404C, r24	; 0x80404c <g_long_rightsense_press>
     3a4:	10 92 5c 40 	sts	0x405C, r1	; 0x80405c <g_rightsense_closed_time>
     3a8:	10 92 5d 40 	sts	0x405D, r1	; 0x80405d <g_rightsense_closed_time+0x1>
     3ac:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_rightsense_presses_count>
     3b0:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_rightsense_presses_count+0x1>
     3b4:	10 92 07 40 	sts	0x4007, r1	; 0x804007 <_ZZ11__vector_12E26rightsenseLongPressEnabled>
     3b8:	c0 cf       	rjmp	.-128    	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
     3ba:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     3c0:	8a e4       	ldi	r24, 0x4A	; 74
     3c2:	90 e4       	ldi	r25, 0x40	; 64
     3c4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN4leds6activeEv>
     3c8:	88 23       	and	r24, r24
     3ca:	09 f4       	brne	.+2      	; 0x3ce <__EEPROM_REGION_LENGTH__+0x1ce>
     3cc:	7e c0       	rjmp	.+252    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     3ce:	10 92 5a 40 	sts	0x405A, r1	; 0x80405a <g_encoder_closed_time>
     3d2:	10 92 5b 40 	sts	0x405B, r1	; 0x80405b <g_encoder_closed_time+0x1>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <__data_end>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     3e2:	80 91 3b 40 	lds	r24, 0x403B	; 0x80403b <_ZZ11__vector_12E31leftsense_closures_count_period>
     3e6:	90 91 3c 40 	lds	r25, 0x403C	; 0x80403c <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     3ee:	98 c0       	rjmp	.+304    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	80 93 3b 40 	sts	0x403B, r24	; 0x80403b <_ZZ11__vector_12E31leftsense_closures_count_period>
     3f6:	90 93 3c 40 	sts	0x403C, r25	; 0x80403c <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     3fa:	89 2b       	or	r24, r25
     3fc:	c1 f4       	brne	.+48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3fe:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     402:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     406:	89 2b       	or	r24, r25
     408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     40a:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     40e:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     412:	03 97       	sbiw	r24, 0x03	; 3
     414:	40 f4       	brcc	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     41a:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     41e:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <g_handle_counted_leftsense_presses>
     422:	90 93 59 40 	sts	0x4059, r25	; 0x804059 <g_handle_counted_leftsense_presses+0x1>
     426:	10 92 52 40 	sts	0x4052, r1	; 0x804052 <g_leftsense_presses_count>
     42a:	10 92 53 40 	sts	0x4053, r1	; 0x804053 <g_leftsense_presses_count+0x1>
     42e:	80 91 39 40 	lds	r24, 0x4039	; 0x804039 <_ZZ11__vector_12E32rightsense_closures_count_period>
     432:	90 91 3a 40 	lds	r25, 0x403A	; 0x80403a <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	8f c0       	rjmp	.+286    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	80 93 39 40 	sts	0x4039, r24	; 0x804039 <_ZZ11__vector_12E32rightsense_closures_count_period>
     442:	90 93 3a 40 	sts	0x403A, r25	; 0x80403a <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     446:	89 2b       	or	r24, r25
     448:	c1 f4       	brne	.+48     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     44a:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     44e:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     452:	89 2b       	or	r24, r25
     454:	71 f0       	breq	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     456:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     45a:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     45e:	03 97       	sbiw	r24, 0x03	; 3
     460:	40 f4       	brcc	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     462:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     466:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     46a:	80 93 56 40 	sts	0x4056, r24	; 0x804056 <g_handle_counted_rightsense_presses>
     46e:	90 93 57 40 	sts	0x4057, r25	; 0x804057 <g_handle_counted_rightsense_presses+0x1>
     472:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_rightsense_presses_count>
     476:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_rightsense_presses_count+0x1>
     47a:	80 91 37 40 	lds	r24, 0x4037	; 0x804037 <_ZZ11__vector_12E29encoder_closures_count_period>
     47e:	90 91 38 40 	lds	r25, 0x4038	; 0x804038 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	86 c0       	rjmp	.+268    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <_ZZ11__vector_12E29encoder_closures_count_period>
     48e:	90 93 38 40 	sts	0x4038, r25	; 0x804038 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     492:	89 2b       	or	r24, r25
     494:	09 f0       	breq	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	b5 ce       	rjmp	.-662    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     498:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     49c:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     4a0:	89 2b       	or	r24, r25
     4a2:	71 f0       	breq	.+28     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4a4:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     4a8:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     4ac:	03 97       	sbiw	r24, 0x03	; 3
     4ae:	40 f4       	brcc	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4b0:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     4b4:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     4b8:	80 93 54 40 	sts	0x4054, r24	; 0x804054 <g_handle_counted_encoder_presses>
     4bc:	90 93 55 40 	sts	0x4055, r25	; 0x804055 <g_handle_counted_encoder_presses+0x1>
     4c0:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_encoder_presses_count>
     4c4:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_encoder_presses_count+0x1>
     4c8:	9c ce       	rjmp	.-712    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     4ca:	8a e4       	ldi	r24, 0x4A	; 74
     4cc:	90 e4       	ldi	r25, 0x40	; 64
     4ce:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN4leds4initEv>
     4d2:	84 cf       	rjmp	.-248    	; 0x3dc <__EEPROM_REGION_LENGTH__+0x1dc>
     4d4:	d1 11       	cpse	r29, r1
     4d6:	85 cf       	rjmp	.-246    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     4d8:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <g_long_encoder_press>
     4dc:	81 11       	cpse	r24, r1
     4de:	81 cf       	rjmp	.-254    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     4e0:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     4e4:	88 23       	and	r24, r24
     4e6:	09 f4       	brne	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	7c cf       	rjmp	.-264    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     4ea:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <g_encoder_closed_time>
     4ee:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <g_encoder_closed_time+0x1>
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	80 93 5a 40 	sts	0x405A, r24	; 0x80405a <g_encoder_closed_time>
     4f8:	90 93 5b 40 	sts	0x405B, r25	; 0x80405b <g_encoder_closed_time+0x1>
     4fc:	88 3c       	cpi	r24, 0xC8	; 200
     4fe:	91 05       	cpc	r25, r1
     500:	08 f4       	brcc	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	6f cf       	rjmp	.-290    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 4b 40 	sts	0x404B, r24	; 0x80404b <g_long_encoder_press>
     50a:	10 92 5a 40 	sts	0x405A, r1	; 0x80405a <g_encoder_closed_time>
     50e:	10 92 5b 40 	sts	0x405B, r1	; 0x80405b <g_encoder_closed_time+0x1>
     512:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_encoder_presses_count>
     516:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_encoder_presses_count+0x1>
     51a:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <_ZZ11__vector_12E23encoderLongPressEnabled>
     51e:	61 cf       	rjmp	.-318    	; 0x3e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     520:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     524:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	61 f0       	breq	.+24     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     52c:	80 91 52 40 	lds	r24, 0x4052	; 0x804052 <g_leftsense_presses_count>
     530:	90 91 53 40 	lds	r25, 0x4053	; 0x804053 <g_leftsense_presses_count+0x1>
     534:	03 97       	sbiw	r24, 0x03	; 3
     536:	08 f4       	brcc	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     538:	7a cf       	rjmp	.-268    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     53a:	10 92 52 40 	sts	0x4052, r1	; 0x804052 <g_leftsense_presses_count>
     53e:	10 92 53 40 	sts	0x4053, r1	; 0x804053 <g_leftsense_presses_count+0x1>
     542:	75 cf       	rjmp	.-278    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     544:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <_ZZ11__vector_12E17leftsenseReleased>
     548:	88 23       	and	r24, r24
     54a:	81 f3       	breq	.-32     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     54c:	82 e3       	ldi	r24, 0x32	; 50
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	80 93 3b 40 	sts	0x403B, r24	; 0x80403b <_ZZ11__vector_12E31leftsense_closures_count_period>
     554:	90 93 3c 40 	sts	0x403C, r25	; 0x80403c <_ZZ11__vector_12E31leftsense_closures_count_period+0x1>
     558:	6a cf       	rjmp	.-300    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     55a:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     55e:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	61 f0       	breq	.+24     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     566:	80 91 50 40 	lds	r24, 0x4050	; 0x804050 <g_rightsense_presses_count>
     56a:	90 91 51 40 	lds	r25, 0x4051	; 0x804051 <g_rightsense_presses_count+0x1>
     56e:	03 97       	sbiw	r24, 0x03	; 3
     570:	08 f4       	brcc	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	83 cf       	rjmp	.-250    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     574:	10 92 50 40 	sts	0x4050, r1	; 0x804050 <g_rightsense_presses_count>
     578:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <g_rightsense_presses_count+0x1>
     57c:	7e cf       	rjmp	.-260    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     57e:	80 91 35 40 	lds	r24, 0x4035	; 0x804035 <_ZZ11__vector_12E18rightsenseReleased>
     582:	88 23       	and	r24, r24
     584:	81 f3       	breq	.-32     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     586:	82 e3       	ldi	r24, 0x32	; 50
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	80 93 39 40 	sts	0x4039, r24	; 0x804039 <_ZZ11__vector_12E32rightsense_closures_count_period>
     58e:	90 93 3a 40 	sts	0x403A, r25	; 0x80403a <_ZZ11__vector_12E32rightsense_closures_count_period+0x1>
     592:	73 cf       	rjmp	.-282    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     594:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     598:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	61 f0       	breq	.+24     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5a0:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <g_encoder_presses_count>
     5a4:	90 91 4f 40 	lds	r25, 0x404F	; 0x80404f <g_encoder_presses_count+0x1>
     5a8:	03 97       	sbiw	r24, 0x03	; 3
     5aa:	08 f4       	brcc	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	2a ce       	rjmp	.-940    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     5ae:	10 92 4e 40 	sts	0x404E, r1	; 0x80404e <g_encoder_presses_count>
     5b2:	10 92 4f 40 	sts	0x404F, r1	; 0x80404f <g_encoder_presses_count+0x1>
     5b6:	25 ce       	rjmp	.-950    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     5b8:	80 91 34 40 	lds	r24, 0x4034	; 0x804034 <__data_end>
     5bc:	88 23       	and	r24, r24
     5be:	81 f3       	breq	.-32     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5c0:	82 e3       	ldi	r24, 0x32	; 50
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	80 93 37 40 	sts	0x4037, r24	; 0x804037 <_ZZ11__vector_12E29encoder_closures_count_period>
     5c8:	90 93 38 40 	sts	0x4038, r25	; 0x804038 <_ZZ11__vector_12E29encoder_closures_count_period+0x1>
     5cc:	1a ce       	rjmp	.-972    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	91 05       	cpc	r25, r1
     5d4:	01 f1       	breq	.+64     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     5d6:	fc 01       	movw	r30, r24
     5d8:	dc 01       	movw	r26, r24
     5da:	aa 0f       	add	r26, r26
     5dc:	bb 1f       	adc	r27, r27
     5de:	a6 5f       	subi	r26, 0xF6	; 246
     5e0:	bf 4b       	sbci	r27, 0xBF	; 191
     5e2:	4d 91       	ld	r20, X+
     5e4:	5c 91       	ld	r21, X
     5e6:	45 2b       	or	r20, r21
     5e8:	61 f0       	breq	.+24     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     5ea:	dc 01       	movw	r26, r24
     5ec:	aa 0f       	add	r26, r26
     5ee:	bb 1f       	adc	r27, r27
     5f0:	a6 5f       	subi	r26, 0xF6	; 246
     5f2:	bf 4b       	sbci	r27, 0xBF	; 191
     5f4:	4d 91       	ld	r20, X+
     5f6:	5c 91       	ld	r21, X
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	41 50       	subi	r20, 0x01	; 1
     5fc:	51 09       	sbc	r21, r1
     5fe:	4d 93       	st	X+, r20
     600:	5c 93       	st	X, r21
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e6 5f       	subi	r30, 0xF6	; 246
     608:	ff 4b       	sbci	r31, 0xBF	; 191
     60a:	40 81       	ld	r20, Z
     60c:	51 81       	ldd	r21, Z+1	; 0x01
     60e:	45 2b       	or	r20, r21
     610:	f1 f6       	brne	.-68     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     612:	28 2f       	mov	r18, r24
     614:	dc cf       	rjmp	.-72     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     616:	20 93 3d 40 	sts	0x403D, r18	; 0x80403d <_ZZ11__vector_12E24indexConversionInProcess>
     61a:	22 23       	and	r18, r18
     61c:	d4 f4       	brge	.+52     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	0f 90       	pop	r0
     646:	0b be       	out	0x3b, r0	; 59
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti
     652:	82 2f       	mov	r24, r18
     654:	88 0f       	add	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	fc 01       	movw	r30, r24
     65a:	e9 5d       	subi	r30, 0xD9	; 217
     65c:	ff 4b       	sbci	r31, 0xBF	; 191
     65e:	20 81       	ld	r18, Z
     660:	31 81       	ldd	r19, Z+1	; 0x01
     662:	fc 01       	movw	r30, r24
     664:	e6 5f       	subi	r30, 0xF6	; 246
     666:	ff 4b       	sbci	r31, 0xBF	; 191
     668:	20 83       	st	Z, r18
     66a:	31 83       	std	Z+1, r19	; 0x01
     66c:	83 5d       	subi	r24, 0xD3	; 211
     66e:	9f 4b       	sbci	r25, 0xBF	; 191
     670:	dc 01       	movw	r26, r24
     672:	8d 91       	ld	r24, X+
     674:	9c 91       	ld	r25, X
     676:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
     67a:	0e 94 09 06 	call	0xc12	; 0xc12 <_Z20ADC0_startConversionv>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 3e 40 	sts	0x403E, r24	; 0x80403e <_ZZ11__vector_12E19conversionInProcess>
     684:	cc cf       	rjmp	.-104    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     686:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z19ADC0_conversionDonev>
     68a:	88 23       	and	r24, r24
     68c:	41 f2       	breq	.-112    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     68e:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z9ADC0_readv>
     692:	9c 01       	movw	r18, r24
     694:	2b 50       	subi	r18, 0x0B	; 11
     696:	31 09       	sbc	r19, r1
     698:	2f 3e       	cpi	r18, 0xEF	; 239
     69a:	3f 40       	sbci	r19, 0x0F	; 15
     69c:	b0 f4       	brcc	.+44     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     69e:	20 91 3d 40 	lds	r18, 0x403D	; 0x80403d <_ZZ11__vector_12E24indexConversionInProcess>
     6a2:	02 2e       	mov	r0, r18
     6a4:	00 0c       	add	r0, r0
     6a6:	33 0b       	sbc	r19, r19
     6a8:	f9 01       	movw	r30, r18
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e0 5a       	subi	r30, 0xA0	; 160
     6b0:	ff 4b       	sbci	r31, 0xBF	; 191
     6b2:	40 81       	ld	r20, Z
     6b4:	51 81       	ldd	r21, Z+1	; 0x01
     6b6:	2a 59       	subi	r18, 0x9A	; 154
     6b8:	3f 4b       	sbci	r19, 0xBF	; 191
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	d9 01       	movw	r26, r18
     6be:	4c 93       	st	X, r20
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	10 92 3e 40 	sts	0x403E, r1	; 0x80403e <_ZZ11__vector_12E19conversionInProcess>
     6c8:	aa cf       	rjmp	.-172    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     6ca:	e0 91 3d 40 	lds	r30, 0x403D	; 0x80403d <_ZZ11__vector_12E24indexConversionInProcess>
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 0b       	sbc	r31, r31
     6d2:	e0 5a       	subi	r30, 0xA0	; 160
     6d4:	ff 4b       	sbci	r31, 0xBF	; 191
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	f4 cf       	rjmp	.-24     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>

000006dc <__vector_6>:
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	83 b9       	out	0x03, r24	; 3
     6ec:	8f 91       	pop	r24
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <_Z11powerDown5Vv>:
     6f8:	0b 98       	cbi	0x01, 3	; 1
     6fa:	08 95       	ret

000006fc <_Z9powerUp5Vv>:
     6fc:	0b 9a       	sbi	0x01, 3	; 1
     6fe:	08 95       	ret

00000700 <main>:
     700:	0e 94 c3 00 	call	0x186	; 0x186 <atmel_start_init>
     704:	64 e4       	ldi	r22, 0x44	; 68
     706:	7b e7       	ldi	r23, 0x7B	; 123
     708:	86 e3       	ldi	r24, 0x36	; 54
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_Z13init_receiverm>
     710:	60 e8       	ldi	r22, 0x80	; 128
     712:	73 e4       	ldi	r23, 0x43	; 67
     714:	8d e6       	ldi	r24, 0x6D	; 109
     716:	98 e3       	ldi	r25, 0x38	; 56
     718:	0e 94 a4 00 	call	0x148	; 0x148 <set_system_time>
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 b0 00 	call	0x160	; 0x160 <time>
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
     728:	60 ed       	ldi	r22, 0xD0	; 208
     72a:	77 e0       	ldi	r23, 0x07	; 7
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
     734:	88 23       	and	r24, r24
     736:	49 f0       	breq	.+18     	; 0x74a <main+0x4a>
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 b0 00 	call	0x160	; 0x160 <time>
     740:	6c 15       	cp	r22, r12
     742:	7d 05       	cpc	r23, r13
     744:	8e 05       	cpc	r24, r14
     746:	9f 05       	cpc	r25, r15
     748:	79 f3       	breq	.-34     	; 0x728 <main+0x28>
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 b0 00 	call	0x160	; 0x160 <time>
     752:	6c 15       	cp	r22, r12
     754:	7d 05       	cpc	r23, r13
     756:	8e 05       	cpc	r24, r14
     758:	9f 05       	cpc	r25, r15
     75a:	91 f4       	brne	.+36     	; 0x780 <main+0x80>
     75c:	80 91 6b 40 	lds	r24, 0x406B	; 0x80406b <_ZL16g_hardware_error>
     760:	90 91 6c 40 	lds	r25, 0x406C	; 0x80406c <_ZL16g_hardware_error+0x1>
     764:	81 60       	ori	r24, 0x01	; 1
     766:	80 93 6b 40 	sts	0x406B, r24	; 0x80406b <_ZL16g_hardware_error>
     76a:	90 93 6c 40 	sts	0x406C, r25	; 0x80406c <_ZL16g_hardware_error+0x1>
     76e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_Z15RTC_init_backupv>
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8a e4       	ldi	r24, 0x4A	; 74
     77a:	90 e4       	ldi	r25, 0x40	; 64
     77c:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN4leds5blinkE7Blink_tb>
     780:	0f 2e       	mov	r0, r31
     782:	f4 e2       	ldi	r31, 0x24	; 36
     784:	ef 2e       	mov	r14, r31
     786:	f0 e4       	ldi	r31, 0x40	; 64
     788:	ff 2e       	mov	r15, r31
     78a:	f0 2d       	mov	r31, r0
     78c:	01 e7       	ldi	r16, 0x71	; 113
     78e:	10 e4       	ldi	r17, 0x40	; 64
     790:	c0 e5       	ldi	r28, 0x50	; 80
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	0f 2e       	mov	r0, r31
     796:	fd ee       	ldi	r31, 0xED	; 237
     798:	cf 2e       	mov	r12, r31
     79a:	d1 2c       	mov	r13, r1
     79c:	f0 2d       	mov	r31, r0
     79e:	72 c0       	rjmp	.+228    	; 0x884 <main+0x184>
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	8a e4       	ldi	r24, 0x4A	; 74
     7a8:	90 e4       	ldi	r25, 0x40	; 64
     7aa:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN4leds5blinkE7Blink_tb>
     7ae:	7e c0       	rjmp	.+252    	; 0x8ac <main+0x1ac>
     7b0:	66 e0       	ldi	r22, 0x06	; 6
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	8a e4       	ldi	r24, 0x4A	; 74
     7b6:	90 e4       	ldi	r25, 0x40	; 64
     7b8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     7bc:	77 c0       	rjmp	.+238    	; 0x8ac <main+0x1ac>
     7be:	68 e0       	ldi	r22, 0x08	; 8
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	8a e4       	ldi	r24, 0x4A	; 74
     7c4:	90 e4       	ldi	r25, 0x40	; 64
     7c6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     7ca:	67 e0       	ldi	r22, 0x07	; 7
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	8a e4       	ldi	r24, 0x4A	; 74
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     7d6:	76 c0       	rjmp	.+236    	; 0x8c4 <main+0x1c4>
     7d8:	10 92 4d 40 	sts	0x404D, r1	; 0x80404d <g_long_leftsense_press>
     7dc:	68 e0       	ldi	r22, 0x08	; 8
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	8a e4       	ldi	r24, 0x4A	; 74
     7e2:	90 e4       	ldi	r25, 0x40	; 64
     7e4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN4leds4initE7Blink_t>
     7e8:	71 c0       	rjmp	.+226    	; 0x8cc <main+0x1cc>
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	63 e0       	ldi	r22, 0x03	; 3
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	8a e4       	ldi	r24, 0x4A	; 74
     7f2:	90 e4       	ldi	r25, 0x40	; 64
     7f4:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN4leds5blinkE7Blink_tb>
     7f8:	7d c0       	rjmp	.+250    	; 0x8f4 <main+0x1f4>
     7fa:	64 e0       	ldi	r22, 0x04	; 4
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	8a e4       	ldi	r24, 0x4A	; 74
     800:	90 e4       	ldi	r25, 0x40	; 64
     802:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     806:	76 c0       	rjmp	.+236    	; 0x8f4 <main+0x1f4>
     808:	68 e0       	ldi	r22, 0x08	; 8
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	8a e4       	ldi	r24, 0x4A	; 74
     80e:	90 e4       	ldi	r25, 0x40	; 64
     810:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     814:	67 e0       	ldi	r22, 0x07	; 7
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8a e4       	ldi	r24, 0x4A	; 74
     81a:	90 e4       	ldi	r25, 0x40	; 64
     81c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     820:	75 c0       	rjmp	.+234    	; 0x90c <main+0x20c>
     822:	10 92 4c 40 	sts	0x404C, r1	; 0x80404c <g_long_rightsense_press>
     826:	68 e0       	ldi	r22, 0x08	; 8
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8a e4       	ldi	r24, 0x4A	; 74
     82c:	90 e4       	ldi	r25, 0x40	; 64
     82e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN4leds4initE7Blink_t>
     832:	70 c0       	rjmp	.+224    	; 0x914 <main+0x214>
     834:	6b e0       	ldi	r22, 0x0B	; 11
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	8a e4       	ldi	r24, 0x4A	; 74
     83a:	90 e4       	ldi	r25, 0x40	; 64
     83c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     840:	10 92 54 40 	sts	0x4054, r1	; 0x804054 <g_handle_counted_encoder_presses>
     844:	10 92 55 40 	sts	0x4055, r1	; 0x804055 <g_handle_counted_encoder_presses+0x1>
     848:	80 91 5a 40 	lds	r24, 0x405A	; 0x80405a <g_encoder_closed_time>
     84c:	90 91 5b 40 	lds	r25, 0x405B	; 0x80405b <g_encoder_closed_time+0x1>
     850:	88 3e       	cpi	r24, 0xE8	; 232
     852:	93 40       	sbci	r25, 0x03	; 3
     854:	08 f0       	brcs	.+2      	; 0x858 <main+0x158>
     856:	7a c0       	rjmp	.+244    	; 0x94c <main+0x24c>
     858:	80 91 4b 40 	lds	r24, 0x404B	; 0x80404b <g_long_encoder_press>
     85c:	81 11       	cpse	r24, r1
     85e:	83 c0       	rjmp	.+262    	; 0x966 <main+0x266>
     860:	80 91 6f 40 	lds	r24, 0x406F	; 0x80406f <_ZL17g_last_error_code>
     864:	90 91 70 40 	lds	r25, 0x4070	; 0x804070 <_ZL17g_last_error_code+0x1>
     868:	89 2b       	or	r24, r25
     86a:	09 f0       	breq	.+2      	; 0x86e <main+0x16e>
     86c:	85 c0       	rjmp	.+266    	; 0x978 <main+0x278>
     86e:	80 91 6d 40 	lds	r24, 0x406D	; 0x80406d <_ZL18g_last_status_code>
     872:	90 91 6e 40 	lds	r25, 0x406E	; 0x80406e <_ZL18g_last_status_code+0x1>
     876:	89 2b       	or	r24, r25
     878:	09 f0       	breq	.+2      	; 0x87c <main+0x17c>
     87a:	95 c0       	rjmp	.+298    	; 0x9a6 <main+0x2a6>
     87c:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <_ZL17g_go_to_sleep_now>
     880:	81 11       	cpse	r24, r1
     882:	a8 c0       	rjmp	.+336    	; 0x9d4 <main+0x2d4>
     884:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <g_handle_counted_leftsense_presses>
     888:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <g_handle_counted_leftsense_presses+0x1>
     88c:	89 2b       	or	r24, r25
     88e:	91 f0       	breq	.+36     	; 0x8b4 <main+0x1b4>
     890:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <g_handle_counted_leftsense_presses>
     894:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <g_handle_counted_leftsense_presses+0x1>
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	09 f4       	brne	.+2      	; 0x89e <main+0x19e>
     89c:	81 cf       	rjmp	.-254    	; 0x7a0 <main+0xa0>
     89e:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <g_handle_counted_leftsense_presses>
     8a2:	90 91 59 40 	lds	r25, 0x4059	; 0x804059 <g_handle_counted_leftsense_presses+0x1>
     8a6:	02 97       	sbiw	r24, 0x02	; 2
     8a8:	09 f4       	brne	.+2      	; 0x8ac <main+0x1ac>
     8aa:	82 cf       	rjmp	.-252    	; 0x7b0 <main+0xb0>
     8ac:	10 92 58 40 	sts	0x4058, r1	; 0x804058 <g_handle_counted_leftsense_presses>
     8b0:	10 92 59 40 	sts	0x4059, r1	; 0x804059 <g_handle_counted_leftsense_presses+0x1>
     8b4:	80 91 5e 40 	lds	r24, 0x405E	; 0x80405e <g_leftsense_closed_time>
     8b8:	90 91 5f 40 	lds	r25, 0x405F	; 0x80405f <g_leftsense_closed_time+0x1>
     8bc:	88 3e       	cpi	r24, 0xE8	; 232
     8be:	93 40       	sbci	r25, 0x03	; 3
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <main+0x1c4>
     8c2:	7d cf       	rjmp	.-262    	; 0x7be <main+0xbe>
     8c4:	80 91 4d 40 	lds	r24, 0x404D	; 0x80404d <g_long_leftsense_press>
     8c8:	81 11       	cpse	r24, r1
     8ca:	86 cf       	rjmp	.-244    	; 0x7d8 <main+0xd8>
     8cc:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_rightsense_presses>
     8d0:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_rightsense_presses+0x1>
     8d4:	89 2b       	or	r24, r25
     8d6:	91 f0       	breq	.+36     	; 0x8fc <main+0x1fc>
     8d8:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_rightsense_presses>
     8dc:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_rightsense_presses+0x1>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <main+0x1e6>
     8e4:	82 cf       	rjmp	.-252    	; 0x7ea <main+0xea>
     8e6:	80 91 56 40 	lds	r24, 0x4056	; 0x804056 <g_handle_counted_rightsense_presses>
     8ea:	90 91 57 40 	lds	r25, 0x4057	; 0x804057 <g_handle_counted_rightsense_presses+0x1>
     8ee:	02 97       	sbiw	r24, 0x02	; 2
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <main+0x1f4>
     8f2:	83 cf       	rjmp	.-250    	; 0x7fa <main+0xfa>
     8f4:	10 92 56 40 	sts	0x4056, r1	; 0x804056 <g_handle_counted_rightsense_presses>
     8f8:	10 92 57 40 	sts	0x4057, r1	; 0x804057 <g_handle_counted_rightsense_presses+0x1>
     8fc:	80 91 5c 40 	lds	r24, 0x405C	; 0x80405c <g_rightsense_closed_time>
     900:	90 91 5d 40 	lds	r25, 0x405D	; 0x80405d <g_rightsense_closed_time+0x1>
     904:	88 3e       	cpi	r24, 0xE8	; 232
     906:	93 40       	sbci	r25, 0x03	; 3
     908:	08 f0       	brcs	.+2      	; 0x90c <main+0x20c>
     90a:	7e cf       	rjmp	.-260    	; 0x808 <main+0x108>
     90c:	80 91 4c 40 	lds	r24, 0x404C	; 0x80404c <g_long_rightsense_press>
     910:	81 11       	cpse	r24, r1
     912:	87 cf       	rjmp	.-242    	; 0x822 <main+0x122>
     914:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_encoder_presses>
     918:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_encoder_presses+0x1>
     91c:	89 2b       	or	r24, r25
     91e:	09 f4       	brne	.+2      	; 0x922 <main+0x222>
     920:	93 cf       	rjmp	.-218    	; 0x848 <main+0x148>
     922:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_encoder_presses>
     926:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_encoder_presses+0x1>
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <main+0x230>
     92e:	82 cf       	rjmp	.-252    	; 0x834 <main+0x134>
     930:	80 91 54 40 	lds	r24, 0x4054	; 0x804054 <g_handle_counted_encoder_presses>
     934:	90 91 55 40 	lds	r25, 0x4055	; 0x804055 <g_handle_counted_encoder_presses+0x1>
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	09 f0       	breq	.+2      	; 0x93e <main+0x23e>
     93c:	81 cf       	rjmp	.-254    	; 0x840 <main+0x140>
     93e:	6c e0       	ldi	r22, 0x0C	; 12
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8a e4       	ldi	r24, 0x4A	; 74
     944:	90 e4       	ldi	r25, 0x40	; 64
     946:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     94a:	7a cf       	rjmp	.-268    	; 0x840 <main+0x140>
     94c:	68 e0       	ldi	r22, 0x08	; 8
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	8a e4       	ldi	r24, 0x4A	; 74
     952:	90 e4       	ldi	r25, 0x40	; 64
     954:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     958:	67 e0       	ldi	r22, 0x07	; 7
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	8a e4       	ldi	r24, 0x4A	; 74
     95e:	90 e4       	ldi	r25, 0x40	; 64
     960:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
     964:	79 cf       	rjmp	.-270    	; 0x858 <main+0x158>
     966:	10 92 4b 40 	sts	0x404B, r1	; 0x80404b <g_long_encoder_press>
     96a:	68 e0       	ldi	r22, 0x08	; 8
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	8a e4       	ldi	r24, 0x4A	; 74
     970:	90 e4       	ldi	r25, 0x40	; 64
     972:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN4leds4initE7Blink_t>
     976:	74 cf       	rjmp	.-280    	; 0x860 <main+0x160>
     978:	80 91 6f 40 	lds	r24, 0x406F	; 0x80406f <_ZL17g_last_error_code>
     97c:	90 91 70 40 	lds	r25, 0x4070	; 0x804070 <_ZL17g_last_error_code+0x1>
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	ff 92       	push	r15
     986:	ef 92       	push	r14
     988:	1f 93       	push	r17
     98a:	0f 93       	push	r16
     98c:	0e 94 5d 18 	call	0x30ba	; 0x30ba <sprintf>
     990:	10 92 6f 40 	sts	0x406F, r1	; 0x80406f <_ZL17g_last_error_code>
     994:	10 92 70 40 	sts	0x4070, r1	; 0x804070 <_ZL17g_last_error_code+0x1>
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	64 cf       	rjmp	.-312    	; 0x86e <main+0x16e>
     9a6:	80 91 6d 40 	lds	r24, 0x406D	; 0x80406d <_ZL18g_last_status_code>
     9aa:	90 91 6e 40 	lds	r25, 0x406E	; 0x80406e <_ZL18g_last_status_code+0x1>
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	ff 92       	push	r15
     9b4:	ef 92       	push	r14
     9b6:	1f 93       	push	r17
     9b8:	0f 93       	push	r16
     9ba:	0e 94 5d 18 	call	0x30ba	; 0x30ba <sprintf>
     9be:	10 92 6d 40 	sts	0x406D, r1	; 0x80406d <_ZL18g_last_status_code>
     9c2:	10 92 6e 40 	sts	0x406E, r1	; 0x80406e <_ZL18g_last_status_code+0x1>
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	54 cf       	rjmp	.-344    	; 0x87c <main+0x17c>
     9d4:	8a e4       	ldi	r24, 0x4A	; 74
     9d6:	90 e4       	ldi	r25, 0x40	; 64
     9d8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN4leds10deactivateEv>
     9dc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_Z11powerDown5Vv>
     9e0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <system_sleep_settings>
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <SLPCTRL_set_sleep_mode>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 69 40 	sts	0x4069, r24	; 0x804069 <_ZL10g_sleeping>
     9f2:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <_ZL12g_awakenedBy>
     9f6:	10 92 11 40 	sts	0x4011, r1	; 0x804011 <_ZL12g_awakenedBy+0x1>
     9fa:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <_ZL17g_go_to_sleep_now>
     9fe:	88 23       	and	r24, r24
     a00:	89 f0       	breq	.+34     	; 0xa24 <main+0x324>
     a02:	88 81       	ld	r24, Y
     a04:	89 7f       	andi	r24, 0xF9	; 249
     a06:	82 60       	ori	r24, 0x02	; 2
     a08:	88 83       	st	Y, r24
     a0a:	f8 94       	cli
     a0c:	88 81       	ld	r24, Y
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	88 83       	st	Y, r24
     a12:	78 94       	sei
     a14:	88 95       	sleep
     a16:	88 81       	ld	r24, Y
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	88 83       	st	Y, r24
     a1c:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <_ZL17g_go_to_sleep_now>
     a20:	81 11       	cpse	r24, r1
     a22:	ef cf       	rjmp	.-34     	; 0xa02 <main+0x302>
     a24:	10 92 69 40 	sts	0x4069, r1	; 0x804069 <_ZL10g_sleeping>
     a28:	0e 94 c3 00 	call	0x186	; 0x186 <atmel_start_init>
     a2c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z9powerUp5Vv>
     a30:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z13init_receiverv>
     a34:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <_ZL12g_awakenedBy>
     a38:	90 91 11 40 	lds	r25, 0x4011	; 0x804011 <_ZL12g_awakenedBy+0x1>
     a3c:	c0 92 6d 40 	sts	0x406D, r12	; 0x80406d <_ZL18g_last_status_code>
     a40:	d0 92 6e 40 	sts	0x406E, r13	; 0x80406e <_ZL18g_last_status_code+0x1>
     a44:	1f cf       	rjmp	.-450    	; 0x884 <main+0x184>

00000a46 <_GLOBAL__sub_I_g_antenna_connect_state>:

volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
     a46:	8a e4       	ldi	r24, 0x4A	; 74
     a48:	90 e4       	ldi	r25, 0x40	; 64
     a4a:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN4ledsC1Ev>
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);
     a4e:	64 e6       	ldi	r22, 0x64	; 100
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	90 e4       	ldi	r25, 0x40	; 64
     a56:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN18CircularStringBuffC1Ej>

EepromManager g_ee_mgr;
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	90 e4       	ldi	r25, 0x40	; 64
     a5e:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN13EepromManagerC1Ev>

  // Write new null terminator character
  end[1] = '\0';

  return str;
     a62:	08 95       	ret

00000a64 <_GLOBAL__sub_D_g_antenna_connect_state>:
Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);

EepromManager g_ee_mgr;
     a64:	8f e3       	ldi	r24, 0x3F	; 63
     a66:	90 e4       	ldi	r25, 0x40	; 64
     a68:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN13EepromManagerD1Ev>
volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
CircularStringBuff g_text_buff = CircularStringBuff(TEXT_BUFF_SIZE);
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	90 e4       	ldi	r25, 0x40	; 64
     a70:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN18CircularStringBuffD1Ev>

volatile uint16_t g_check_temperature = 0;

Enunciation_t g_enunciator = LED_ONLY;

leds LEDS = leds();
     a74:	8a e4       	ldi	r24, 0x4A	; 74
     a76:	90 e4       	ldi	r25, 0x40	; 64
     a78:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN4ledsD1Ev>

  // Write new null terminator character
  end[1] = '\0';

  return str;
     a7c:	08 95       	ret

00000a7e <_ZL16ADC0_SYSTEM_initb>:
{
	uint16_t sigrow_offset = SIGROW.TEMPSENSE1; // Read unsigned value from signature row
	uint16_t sigrow_slope = SIGROW.TEMPSENSE0; // Read unsigned value from signature row
	static uint32_t wait = 10000;
	uint16_t adc_reading;
	int16_t temperature_in_C = -273.15;
     a7e:	e0 e6       	ldi	r30, 0x60	; 96
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	92 89       	ldd	r25, Z+18	; 0x12
     a84:	98 7f       	andi	r25, 0xF8	; 248
     a86:	92 8b       	std	Z+18, r25	; 0x12
     a88:	92 89       	ldd	r25, Z+18	; 0x12
     a8a:	94 60       	ori	r25, 0x04	; 4
     a8c:	92 8b       	std	Z+18, r25	; 0x12
     a8e:	93 89       	ldd	r25, Z+19	; 0x13
     a90:	98 7f       	andi	r25, 0xF8	; 248
     a92:	93 8b       	std	Z+19, r25	; 0x13
     a94:	93 89       	ldd	r25, Z+19	; 0x13
     a96:	94 60       	ori	r25, 0x04	; 4
     a98:	93 8b       	std	Z+19, r25	; 0x13
     a9a:	94 89       	ldd	r25, Z+20	; 0x14
     a9c:	98 7f       	andi	r25, 0xF8	; 248
     a9e:	94 8b       	std	Z+20, r25	; 0x14
     aa0:	94 89       	ldd	r25, Z+20	; 0x14
     aa2:	94 60       	ori	r25, 0x04	; 4
     aa4:	94 8b       	std	Z+20, r25	; 0x14
     aa6:	95 89       	ldd	r25, Z+21	; 0x15
     aa8:	98 7f       	andi	r25, 0xF8	; 248
     aaa:	95 8b       	std	Z+21, r25	; 0x15
     aac:	95 89       	ldd	r25, Z+21	; 0x15
     aae:	94 60       	ori	r25, 0x04	; 4
     ab0:	95 8b       	std	Z+21, r25	; 0x15
     ab2:	92 89       	ldd	r25, Z+18	; 0x12
     ab4:	97 7f       	andi	r25, 0xF7	; 247
     ab6:	92 8b       	std	Z+18, r25	; 0x12
     ab8:	93 89       	ldd	r25, Z+19	; 0x13
     aba:	97 7f       	andi	r25, 0xF7	; 247
     abc:	93 8b       	std	Z+19, r25	; 0x13
     abe:	94 89       	ldd	r25, Z+20	; 0x14
     ac0:	97 7f       	andi	r25, 0xF7	; 247
     ac2:	94 8b       	std	Z+20, r25	; 0x14
     ac4:	95 89       	ldd	r25, Z+21	; 0x15
     ac6:	97 7f       	andi	r25, 0xF7	; 247
     ac8:	95 8b       	std	Z+21, r25	; 0x15
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     ad0:	9a e0       	ldi	r25, 0x0A	; 10
     ad2:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
     ad6:	81 11       	cpse	r24, r1
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <_ZL16ADC0_SYSTEM_initb+0x74>
     ada:	e0 e0       	ldi	r30, 0x00	; 0
     adc:	f6 e0       	ldi	r31, 0x06	; 6
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 83       	st	Z, r24
     ae2:	14 86       	std	Z+12, r1	; 0x0c
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	80 93 d5 40 	sts	0x40D5, r24	; 0x8040d5 <_ZL20g_adc_initialization>
     aec:	90 93 d6 40 	sts	0x40D6, r25	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     af0:	08 95       	ret
     af2:	e0 e0       	ldi	r30, 0x00	; 0
     af4:	f6 e0       	ldi	r31, 0x06	; 6
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	80 83       	st	Z, r24
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	84 87       	std	Z+12, r24	; 0x0c
     afe:	82 87       	std	Z+10, r24	; 0x0a
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	80 93 d5 40 	sts	0x40D5, r24	; 0x8040d5 <_ZL20g_adc_initialization>
     b08:	90 93 d6 40 	sts	0x40D6, r25	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     b0c:	08 95       	ret

00000b0e <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
     b0e:	89 30       	cpi	r24, 0x09	; 9
     b10:	91 05       	cpc	r25, r1
     b12:	08 f0       	brcs	.+2      	; 0xb16 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x8>
     b14:	75 c0       	rjmp	.+234    	; 0xc00 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xf2>
     b16:	fc 01       	movw	r30, r24
     b18:	e0 57       	subi	r30, 0x70	; 112
     b1a:	fa 4f       	sbci	r31, 0xFA	; 250
     b1c:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__tablejump2__>
     b20:	99 05       	cpc	r25, r9
     b22:	a5 05       	cpc	r26, r5
     b24:	b2 05       	cpc	r27, r2
     b26:	bf 05       	cpc	r27, r15
     b28:	cc 05       	cpc	r28, r12
     b2a:	d9 05       	cpc	r29, r9
     b2c:	00 06       	cpc	r0, r16
     b2e:	e6 05       	cpc	r30, r6
     b30:	f3 05       	cpc	r31, r3
     b32:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     b36:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	19 f0       	breq	.+6      	; 0xb44 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     b44:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b48:	08 95       	ret
     b4a:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     b4e:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	19 f0       	breq	.+6      	; 0xb5c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x4e>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b62:	08 95       	ret
     b64:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     b68:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	19 f0       	breq	.+6      	; 0xb76 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x68>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b7c:	08 95       	ret
     b7e:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     b82:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	19 f0       	breq	.+6      	; 0xb90 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x82>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     b96:	08 95       	ret
     b98:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     b9c:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     ba0:	02 97       	sbiw	r24, 0x02	; 2
     ba2:	19 f0       	breq	.+6      	; 0xbaa <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x9c>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     bb0:	08 95       	ret
     bb2:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     bb6:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     bba:	02 97       	sbiw	r24, 0x02	; 2
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xb6>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     bc4:	85 e0       	ldi	r24, 0x05	; 5
     bc6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     bca:	08 95       	ret
     bcc:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     bd0:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     bd4:	02 97       	sbiw	r24, 0x02	; 2
     bd6:	19 f0       	breq	.+6      	; 0xbde <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xd0>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     be4:	08 95       	ret
     be6:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     bea:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     bee:	02 97       	sbiw	r24, 0x02	; 2
     bf0:	19 f0       	breq	.+6      	; 0xbf8 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xea>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZL16ADC0_SYSTEM_initb>
     bf8:	82 e4       	ldi	r24, 0x42	; 66
     bfa:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     bfe:	08 95       	ret
     c00:	e0 e0       	ldi	r30, 0x00	; 0
     c02:	f6 e0       	ldi	r31, 0x06	; 6
     c04:	14 86       	std	Z+12, r1	; 0x0c
     c06:	10 82       	st	Z, r1
     c08:	10 92 d5 40 	sts	0x40D5, r1	; 0x8040d5 <_ZL20g_adc_initialization>
     c0c:	10 92 d6 40 	sts	0x40D6, r1	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     c10:	08 95       	ret

00000c12 <_Z20ADC0_startConversionv>:
     c12:	80 91 d5 40 	lds	r24, 0x40D5	; 0x8040d5 <_ZL20g_adc_initialization>
     c16:	90 91 d6 40 	lds	r25, 0x40D6	; 0x8040d6 <_ZL20g_adc_initialization+0x1>
     c1a:	89 2b       	or	r24, r25
     c1c:	29 f0       	breq	.+10     	; 0xc28 <_Z20ADC0_startConversionv+0x16>
     c1e:	e0 e0       	ldi	r30, 0x00	; 0
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	14 86       	std	Z+12, r1	; 0x0c
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	82 87       	std	Z+10, r24	; 0x0a
     c28:	08 95       	ret

00000c2a <_Z19ADC0_conversionDonev>:
     c2a:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	08 95       	ret

00000c32 <_Z9ADC0_readv>:
     c32:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     c36:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
     c3a:	08 95       	ret

00000c3c <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialization = ADC_NOT_INITIALIZED;
}

ISR(ADC0_RESRDY_vect)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	0b b6       	in	r0, 0x3b	; 59
     c48:	0f 92       	push	r0
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}

int ADC0_read(void)
{
	return ADC0.RES; 	/* Reading the result also clears the interrupt flag */
     c62:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     c66:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
ISR(ADC0_RESRDY_vect)
{
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
     c6a:	87 ed       	ldi	r24, 0xD7	; 215
     c6c:	90 e4       	ldi	r25, 0x40	; 64
     c6e:	0e 94 46 08 	call	0x108c	; 0x108c <_ZN8Goertzel9DataPointEi>
     c72:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
     c74:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0b be       	out	0x3b, r0	; 59
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <_GLOBAL__sub_I_g_adcVal>:
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
	
#define FREE_RUNNING true
#define SINGLE_CONVERSION false
	
volatile int16_t g_adcVal;
Goertzel g_goertzel(N, sampling_freq);
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	10 e4       	ldi	r17, 0x40	; 64
     ca6:	2c eb       	ldi	r18, 0xBC	; 188
     ca8:	36 e4       	ldi	r19, 0x46	; 70
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	69 e4       	ldi	r22, 0x49	; 73
     cb0:	73 e4       	ldi	r23, 0x43	; 67
     cb2:	87 ed       	ldi	r24, 0xD7	; 215
     cb4:	90 e4       	ldi	r25, 0x40	; 64
     cb6:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN8GoertzelC1Eff>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
	}
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_GLOBAL__sub_D_g_adcVal>:
	
#define FREE_RUNNING true
#define SINGLE_CONVERSION false
	
volatile int16_t g_adcVal;
Goertzel g_goertzel(N, sampling_freq);
     cc0:	87 ed       	ldi	r24, 0xD7	; 215
     cc2:	90 e4       	ldi	r25, 0x40	; 64
     cc4:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN8GoertzelD1Ev>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
	}
     cc8:	08 95       	ret

00000cca <_Z8debouncev>:
}

uint8_t portFdebouncedVals(void)
{
	return portFdebounced;
}
     cca:	ea ed       	ldi	r30, 0xDA	; 218
     ccc:	f0 e4       	ldi	r31, 0x40	; 64
     cce:	21 81       	ldd	r18, Z+1	; 0x01
     cd0:	22 83       	std	Z+2, r18	; 0x02
     cd2:	30 81       	ld	r19, Z
     cd4:	31 83       	std	Z+1, r19	; 0x01
     cd6:	ad ed       	ldi	r26, 0xDD	; 221
     cd8:	b0 e4       	ldi	r27, 0x40	; 64
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	5c 91       	ld	r21, X
     cde:	11 97       	sbiw	r26, 0x01	; 1
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	5c 93       	st	X, r21
     ce4:	12 97       	sbiw	r26, 0x02	; 2
     ce6:	6c 91       	ld	r22, X
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	6c 93       	st	X, r22
     cec:	11 97       	sbiw	r26, 0x01	; 1
     cee:	92 b1       	in	r25, 0x02	; 2
     cf0:	9c 93       	st	X, r25
     cf2:	86 b3       	in	r24, 0x16	; 22
     cf4:	80 83       	st	Z, r24
     cf6:	40 91 d9 40 	lds	r20, 0x40D9	; 0x8040d9 <portAdebounced>
     cfa:	94 27       	eor	r25, r20
     cfc:	64 27       	eor	r22, r20
     cfe:	96 23       	and	r25, r22
     d00:	54 27       	eor	r21, r20
     d02:	95 23       	and	r25, r21
     d04:	94 27       	eor	r25, r20
     d06:	90 93 d9 40 	sts	0x40D9, r25	; 0x8040d9 <portAdebounced>
     d0a:	90 91 d8 40 	lds	r25, 0x40D8	; 0x8040d8 <portFdebounced>
     d0e:	89 27       	eor	r24, r25
     d10:	39 27       	eor	r19, r25
     d12:	83 23       	and	r24, r19
     d14:	29 27       	eor	r18, r25
     d16:	82 23       	and	r24, r18
     d18:	89 27       	eor	r24, r25
     d1a:	80 93 d8 40 	sts	0x40D8, r24	; 0x8040d8 <portFdebounced>
     d1e:	08 95       	ret

00000d20 <_Z18portAdebouncedValsv>:
     d20:	80 91 d9 40 	lds	r24, 0x40D9	; 0x8040d9 <portAdebounced>
     d24:	08 95       	ret

00000d26 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d26:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d28:	e0 e1       	ldi	r30, 0x10	; 16
     d2a:	f4 e0       	ldi	r31, 0x04	; 4
     d2c:	80 81       	ld	r24, Z
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d32:	01 98       	cbi	0x00, 1	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d34:	e1 e1       	ldi	r30, 0x11	; 17
     d36:	f4 e0       	ldi	r31, 0x04	; 4
     d38:	80 81       	ld	r24, Z
     d3a:	88 60       	ori	r24, 0x08	; 8
     d3c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d3e:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d40:	e2 e1       	ldi	r30, 0x12	; 18
     d42:	f4 e0       	ldi	r31, 0x04	; 4
     d44:	80 81       	ld	r24, Z
     d46:	88 60       	ori	r24, 0x08	; 8
     d48:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d4a:	03 9a       	sbi	0x00, 3	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     d4c:	0b 9a       	sbi	0x01, 3	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d4e:	04 98       	cbi	0x00, 4	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d50:	e4 e1       	ldi	r30, 0x14	; 20
     d52:	f4 e0       	ldi	r31, 0x04	; 4
     d54:	80 81       	ld	r24, Z
     d56:	88 60       	ori	r24, 0x08	; 8
     d58:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d5a:	05 9a       	sbi	0x00, 5	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d5c:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d5e:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d60:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d62:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     d64:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     d66:	24 9a       	sbi	0x04, 4	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     d68:	2c 9a       	sbi	0x05, 4	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     d6a:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d6c:	e2 e5       	ldi	r30, 0x52	; 82
     d6e:	f4 e0       	ldi	r31, 0x04	; 4
     d70:	80 81       	ld	r24, Z
     d72:	88 60       	ori	r24, 0x08	; 8
     d74:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     d76:	43 98       	cbi	0x08, 3	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d78:	e3 e5       	ldi	r30, 0x53	; 83
     d7a:	f4 e0       	ldi	r31, 0x04	; 4
     d7c:	80 81       	ld	r24, Z
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     d82:	44 9a       	sbi	0x08, 4	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     d84:	4c 9a       	sbi	0x09, 4	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     d86:	45 9a       	sbi	0x08, 5	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     d88:	4d 9a       	sbi	0x09, 5	; 9
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     d8a:	e0 e9       	ldi	r30, 0x90	; 144
     d8c:	f4 e0       	ldi	r31, 0x04	; 4
     d8e:	80 81       	ld	r24, Z
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	80 83       	st	Z, r24
     d94:	e1 e9       	ldi	r30, 0x91	; 145
     d96:	f4 e0       	ldi	r31, 0x04	; 4
     d98:	80 81       	ld	r24, Z
     d9a:	88 60       	ori	r24, 0x08	; 8
     d9c:	80 83       	st	Z, r24
     d9e:	e2 e9       	ldi	r30, 0x92	; 146
     da0:	f4 e0       	ldi	r31, 0x04	; 4
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     da8:	83 9a       	sbi	0x10, 3	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     daa:	8b 98       	cbi	0x11, 3	; 17
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     dac:	e0 eb       	ldi	r30, 0xB0	; 176
     dae:	f4 e0       	ldi	r31, 0x04	; 4
     db0:	80 81       	ld	r24, Z
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	80 83       	st	Z, r24
     db6:	e1 eb       	ldi	r30, 0xB1	; 177
     db8:	f4 e0       	ldi	r31, 0x04	; 4
     dba:	80 81       	ld	r24, Z
     dbc:	88 60       	ori	r24, 0x08	; 8
     dbe:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     dc0:	a2 9a       	sbi	0x14, 2	; 20
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     dc2:	aa 9a       	sbi	0x15, 2	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     dc4:	a3 98       	cbi	0x14, 3	; 20
     dc6:	a4 98       	cbi	0x14, 4	; 20
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     dc8:	a5 9a       	sbi	0x14, 5	; 20
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     dca:	ad 9a       	sbi	0x15, 5	; 21
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     dcc:	e6 eb       	ldi	r30, 0xB6	; 182
     dce:	f4 e0       	ldi	r31, 0x04	; 4
     dd0:	80 81       	ld	r24, Z
     dd2:	88 60       	ori	r24, 0x08	; 8
     dd4:	80 83       	st	Z, r24
	PORTF_set_pin_dir(6, PORT_DIR_OFF); /* Unused */
	
	/* PORT Pin Interrupts */
// 	PORTA.PIN2CTRL = 0x0A; /* Enable RTC SQW 1-sec interrupts */
// 	PORTD.PIN1CTRL = 0x09; /* Enable antenna change interrupts */
}
     dd6:	08 95       	ret

00000dd8 <_Z11BINIO_sleepv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     dd8:	00 98       	cbi	0x00, 0	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     dda:	e0 e1       	ldi	r30, 0x10	; 16
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
     dde:	80 81       	ld	r24, Z
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     de4:	01 98       	cbi	0x00, 1	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     de6:	e1 e1       	ldi	r30, 0x11	; 17
     de8:	f4 e0       	ldi	r31, 0x04	; 4
     dea:	80 81       	ld	r24, Z
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     df0:	02 98       	cbi	0x00, 2	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     df2:	e2 e1       	ldi	r30, 0x12	; 18
     df4:	f4 e0       	ldi	r31, 0x04	; 4
     df6:	80 81       	ld	r24, Z
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     dfc:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     dfe:	0b 98       	cbi	0x01, 3	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     e00:	04 98       	cbi	0x00, 4	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e02:	e4 e1       	ldi	r30, 0x14	; 20
     e04:	f4 e0       	ldi	r31, 0x04	; 4
     e06:	80 81       	ld	r24, Z
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     e0c:	05 9a       	sbi	0x00, 5	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     e0e:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     e10:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     e12:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     e14:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     e16:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     e18:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     e1a:	2c 98       	cbi	0x05, 4	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     e1c:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     e1e:	e2 e5       	ldi	r30, 0x52	; 82
     e20:	f4 e0       	ldi	r31, 0x04	; 4
     e22:	80 81       	ld	r24, Z
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     e28:	43 98       	cbi	0x08, 3	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     e2a:	e3 e5       	ldi	r30, 0x53	; 83
     e2c:	f4 e0       	ldi	r31, 0x04	; 4
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     e34:	44 9a       	sbi	0x08, 4	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     e36:	4c 98       	cbi	0x09, 4	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     e38:	45 9a       	sbi	0x08, 5	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     e3a:	4d 98       	cbi	0x09, 5	; 9
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     e3c:	e0 e9       	ldi	r30, 0x90	; 144
     e3e:	f4 e0       	ldi	r31, 0x04	; 4
     e40:	80 81       	ld	r24, Z
     e42:	88 60       	ori	r24, 0x08	; 8
     e44:	80 83       	st	Z, r24
     e46:	e1 e9       	ldi	r30, 0x91	; 145
     e48:	f4 e0       	ldi	r31, 0x04	; 4
     e4a:	80 81       	ld	r24, Z
     e4c:	88 60       	ori	r24, 0x08	; 8
     e4e:	80 83       	st	Z, r24
     e50:	e2 e9       	ldi	r30, 0x92	; 146
     e52:	f4 e0       	ldi	r31, 0x04	; 4
     e54:	80 81       	ld	r24, Z
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     e5a:	83 9a       	sbi	0x10, 3	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     e5c:	8b 98       	cbi	0x11, 3	; 17
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     e5e:	e0 eb       	ldi	r30, 0xB0	; 176
     e60:	f4 e0       	ldi	r31, 0x04	; 4
     e62:	80 81       	ld	r24, Z
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	80 83       	st	Z, r24
     e68:	e1 eb       	ldi	r30, 0xB1	; 177
     e6a:	f4 e0       	ldi	r31, 0x04	; 4
     e6c:	80 81       	ld	r24, Z
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     e72:	a2 9a       	sbi	0x14, 2	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     e74:	aa 98       	cbi	0x15, 2	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     e76:	a3 98       	cbi	0x14, 3	; 20
     e78:	a4 98       	cbi	0x14, 4	; 20
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     e7a:	a5 9a       	sbi	0x14, 5	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     e7c:	ad 98       	cbi	0x15, 5	; 21
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     e7e:	e6 eb       	ldi	r30, 0xB6	; 182
     e80:	f4 e0       	ldi	r31, 0x04	; 4
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	80 83       	st	Z, r24
	PORTF_set_pin_dir(6, PORT_DIR_OFF); /* Unused */
	
	/* PORT Pin Interrupts */
	// 	PORTA.PIN2CTRL = 0x0A; /* Enable RTC SQW 1-sec interrupts */
	// 	PORTD.PIN1CTRL = 0x09; /* Enable antenna change interrupts */
}
     e88:	08 95       	ret

00000e8a <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     e8a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	08 95       	ret

00000e92 <_ZN18CircularStringBuffC1Ej>:
**********************************************************************************************/
#include "CircularStringBuff.h"
#include <stdlib.h>
#include <ctype.h>

CircularStringBuff::CircularStringBuff(size_t size)
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
     e9c:	8b 01       	movw	r16, r22
{
  buf_ = (char*)malloc(size);
     e9e:	cb 01       	movw	r24, r22
     ea0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <malloc>
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	9e 83       	std	Y+6, r25	; 0x06
  max_size_ = size;
     ea8:	0f 83       	std	Y+7, r16	; 0x07
     eaa:	18 87       	std	Y+8, r17	; 0x08
  head_ = 0;
     eac:	18 82       	st	Y, r1
     eae:	19 82       	std	Y+1, r1	; 0x01
  tail_ = 0;
     eb0:	1a 82       	std	Y+2, r1	; 0x02
     eb2:	1b 82       	std	Y+3, r1	; 0x03
  full_ = false;
     eb4:	1c 82       	std	Y+4, r1	; 0x04
  busy_ = false;
     eb6:	19 86       	std	Y+9, r1	; 0x09
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <_ZN18CircularStringBuffD1Ev>:

CircularStringBuff::~CircularStringBuff() {
	free(buf_);
     ec2:	fc 01       	movw	r30, r24
     ec4:	85 81       	ldd	r24, Z+5	; 0x05
     ec6:	96 81       	ldd	r25, Z+6	; 0x06
     ec8:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <free>
}
     ecc:	08 95       	ret

00000ece <_ZN18CircularStringBuff5resetEv>:


void CircularStringBuff::reset()
{
     ece:	fc 01       	movw	r30, r24
  head_ = tail_;
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	80 83       	st	Z, r24
     ed6:	91 83       	std	Z+1, r25	; 0x01
  full_ = false;
     ed8:	14 82       	std	Z+4, r1	; 0x04
  busy_ = false;
     eda:	11 86       	std	Z+9, r1	; 0x09
}
     edc:	08 95       	ret

00000ede <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     ede:	45 e8       	ldi	r20, 0x85	; 133
     ee0:	68 ed       	ldi	r22, 0xD8	; 216
     ee2:	8c e7       	ldi	r24, 0x7C	; 124
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <protected_write_io>
     eea:	45 e2       	ldi	r20, 0x25	; 37
     eec:	68 ed       	ldi	r22, 0xD8	; 216
     eee:	88 e6       	ldi	r24, 0x68	; 104
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret

00000efa <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     efa:	78 94       	sei

	return 0;
}
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <_Z9DAC0_initv>:

static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_VDD_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.500V Internal Voltage Reference for DAC */
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     f06:	6a e0       	ldi	r22, 0x0A	; 10
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
     f12:	81 11       	cpse	r24, r1
     f14:	f8 cf       	rjmp	.-16     	; 0xf06 <_Z9DAC0_initv+0x6>
void DAC0_init(void)
{
	VREF_init();
	
    /* Disable digital input buffer */
    PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     f16:	e0 e6       	ldi	r30, 0x60	; 96
     f18:	f4 e0       	ldi	r31, 0x04	; 4
     f1a:	86 89       	ldd	r24, Z+22	; 0x16
     f1c:	88 7f       	andi	r24, 0xF8	; 248
     f1e:	86 8b       	std	Z+22, r24	; 0x16
    PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     f20:	86 89       	ldd	r24, Z+22	; 0x16
     f22:	84 60       	ori	r24, 0x04	; 4
     f24:	86 8b       	std	Z+22, r24	; 0x16
    /* Disable pull-up resistor */
    PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;   
     f26:	86 89       	ldd	r24, Z+22	; 0x16
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	86 8b       	std	Z+22, r24	; 0x16
    DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
     f2c:	81 ec       	ldi	r24, 0xC1	; 193
     f2e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
// 	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
// 	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
// 	| DAC_OUTEN_bm;           /* Enable output buffer */
// 	
// 	DAC0_setVal(DAC_DEFAULT_VALUE);
}
     f32:	08 95       	ret

00000f34 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     f34:	e0 e1       	ldi	r30, 0x10	; 16
     f36:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f38:	80 81       	ld	r24, Z
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     f3e:	e8 31       	cpi	r30, 0x18	; 24
     f40:	84 e0       	ldi	r24, 0x04	; 4
     f42:	f8 07       	cpc	r31, r24
     f44:	c9 f7       	brne	.-14     	; 0xf38 <mcu_init+0x4>
     f46:	e0 e3       	ldi	r30, 0x30	; 48
     f48:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f4a:	80 81       	ld	r24, Z
     f4c:	88 60       	ori	r24, 0x08	; 8
     f4e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f50:	e8 33       	cpi	r30, 0x38	; 56
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	f8 07       	cpc	r31, r24
     f56:	c9 f7       	brne	.-14     	; 0xf4a <mcu_init+0x16>
     f58:	e0 e5       	ldi	r30, 0x50	; 80
     f5a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f62:	e8 35       	cpi	r30, 0x58	; 88
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	f8 07       	cpc	r31, r24
     f68:	c9 f7       	brne	.-14     	; 0xf5c <mcu_init+0x28>
     f6a:	e0 e7       	ldi	r30, 0x70	; 112
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f74:	e8 37       	cpi	r30, 0x78	; 120
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	f8 07       	cpc	r31, r24
     f7a:	c9 f7       	brne	.-14     	; 0xf6e <mcu_init+0x3a>
     f7c:	e0 e9       	ldi	r30, 0x90	; 144
     f7e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f80:	80 81       	ld	r24, Z
     f82:	88 60       	ori	r24, 0x08	; 8
     f84:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f86:	e8 39       	cpi	r30, 0x98	; 152
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	f8 07       	cpc	r31, r24
     f8c:	c9 f7       	brne	.-14     	; 0xf80 <mcu_init+0x4c>
     f8e:	e0 eb       	ldi	r30, 0xB0	; 176
     f90:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f92:	80 81       	ld	r24, Z
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f98:	e8 3b       	cpi	r30, 0xB8	; 184
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	f8 07       	cpc	r31, r24
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     fa0:	08 95       	ret

00000fa2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     fa2:	0e 94 9a 07 	call	0xf34	; 0xf34 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     fa6:	0e 94 6f 07 	call	0xede	; 0xede <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     faa:	0e 94 80 14 	call	0x2900	; 0x2900 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     fae:	0e 94 7d 07 	call	0xefa	; 0xefa <CPUINT_init>
	BINIO_init();
     fb2:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z10BINIO_initv>
// 	LED_set_RED_dir(PORT_DIR_OUT);
// 	LED_set_RED_level(OFF);
// 	LED_set_GREEN_dir(PORT_DIR_OUT);
// 	LED_set_GREEN_level(OFF);

	SLPCTRL_init();
     fb6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <SLPCTRL_init>
	
	DAC0_init();
     fba:	0e 94 80 07 	call	0xf00	; 0xf00 <_Z9DAC0_initv>

	BOD_init();
     fbe:	0e 94 45 07 	call	0xe8a	; 0xe8a <BOD_init>
}
     fc2:	08 95       	ret

00000fc4 <system_sleep_settings>:

void system_sleep_settings()
{
	mcu_init();
     fc4:	0e 94 9a 07 	call	0xf34	; 0xf34 <mcu_init>

//	CLKCTRL_init(); /* Set CPU clock speed appropriately */
	TIMERB_sleep(); /* Timers must be initialized before utility_delay functions will work */
     fc8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <TIMERB_sleep>
//	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
	BINIO_sleep();
     fcc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_Z11BINIO_sleepv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     fd0:	46 9a       	sbi	0x08, 6	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     fd2:	4e 98       	cbi	0x09, 6	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     fd4:	45 9a       	sbi	0x08, 5	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     fd6:	4d 98       	cbi	0x09, 5	; 9
	LED_set_RED_dir(PORT_DIR_OUT);
	LED_set_RED_level(OFF);
	LED_set_GREEN_dir(PORT_DIR_OUT);
	LED_set_GREEN_level(OFF);

}
     fd8:	08 95       	ret

00000fda <_ZN13EepromManagerC1Ev>:
extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
{
}   /*EepromManager */
     fda:	08 95       	ret

00000fdc <_ZN13EepromManagerD1Ev>:

/* default destructor */
EepromManager::~EepromManager()
{
}   /*~EepromManager */
     fdc:	08 95       	ret

00000fde <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	6a 01       	movw	r12, r20
     fec:	7b 01       	movw	r14, r22
     fee:	00 93 e7 40 	sts	0x40E7, r16	; 0x8040e7 <_SAMPLING_FREQUENCY>
     ff2:	10 93 e8 40 	sts	0x40E8, r17	; 0x8040e8 <_SAMPLING_FREQUENCY+0x1>
     ff6:	20 93 e9 40 	sts	0x40E9, r18	; 0x8040e9 <_SAMPLING_FREQUENCY+0x2>
     ffa:	30 93 ea 40 	sts	0x40EA, r19	; 0x8040ea <_SAMPLING_FREQUENCY+0x3>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	41 e5       	ldi	r20, 0x51	; 81
    1004:	53 e4       	ldi	r21, 0x43	; 67
    1006:	cb 01       	movw	r24, r22
    1008:	b6 01       	movw	r22, r12
    100a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__gesf2>
    100e:	18 16       	cp	r1, r24
    1010:	9c f0       	brlt	.+38     	; 0x1038 <_ZN8GoertzelC1Eff+0x5a>
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	48 ec       	ldi	r20, 0xC8	; 200
    1018:	52 e4       	ldi	r21, 0x42	; 66
    101a:	c7 01       	movw	r24, r14
    101c:	b6 01       	movw	r22, r12
    101e:	0e 94 56 16 	call	0x2cac	; 0x2cac <__cmpsf2>
    1022:	88 23       	and	r24, r24
    1024:	8c f4       	brge	.+34     	; 0x1048 <_ZN8GoertzelC1Eff+0x6a>
    1026:	0f 2e       	mov	r0, r31
    1028:	c1 2c       	mov	r12, r1
    102a:	d1 2c       	mov	r13, r1
    102c:	f8 ec       	ldi	r31, 0xC8	; 200
    102e:	ef 2e       	mov	r14, r31
    1030:	f2 e4       	ldi	r31, 0x42	; 66
    1032:	ff 2e       	mov	r15, r31
    1034:	f0 2d       	mov	r31, r0
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <_ZN8GoertzelC1Eff+0x6a>
    1038:	0f 2e       	mov	r0, r31
    103a:	c1 2c       	mov	r12, r1
    103c:	d1 2c       	mov	r13, r1
    103e:	f1 e5       	ldi	r31, 0x51	; 81
    1040:	ef 2e       	mov	r14, r31
    1042:	f3 e4       	ldi	r31, 0x43	; 67
    1044:	ff 2e       	mov	r15, r31
    1046:	f0 2d       	mov	r31, r0
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fixsfsi>
    1050:	60 93 e5 40 	sts	0x40E5, r22	; 0x8040e5 <_N>
    1054:	70 93 e6 40 	sts	0x40E6, r23	; 0x8040e6 <_N+0x1>
    1058:	80 91 e5 40 	lds	r24, 0x40E5	; 0x8040e5 <_N>
    105c:	90 91 e6 40 	lds	r25, 0x40E6	; 0x8040e6 <_N+0x1>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0e 94 38 17 	call	0x2e70	; 0x2e70 <malloc>
    1068:	80 93 e0 40 	sts	0x40E0, r24	; 0x8040e0 <testData>
    106c:	90 93 e1 40 	sts	0x40E1, r25	; 0x8040e1 <testData+0x1>
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	08 95       	ret

0000107e <_ZN8GoertzelD1Ev>:
    107e:	80 91 e0 40 	lds	r24, 0x40E0	; 0x8040e0 <testData>
    1082:	90 91 e1 40 	lds	r25, 0x40E1	; 0x8040e1 <testData+0x1>
    1086:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <free>
    108a:	08 95       	ret

0000108c <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    108c:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <_samplesReady>
    1090:	81 11       	cpse	r24, r1
    1092:	2c c0       	rjmp	.+88     	; 0x10ec <_ZN8Goertzel9DataPointEi+0x60>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
    1094:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <_index>
    1098:	90 91 e4 40 	lds	r25, 0x40E4	; 0x8040e4 <_index+0x1>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	e0 91 e0 40 	lds	r30, 0x40E0	; 0x8040e0 <testData>
    10a4:	f0 91 e1 40 	lds	r31, 0x40E1	; 0x8040e1 <testData+0x1>
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	60 83       	st	Z, r22
    10ae:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    10b0:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <_index>
    10b4:	90 91 e4 40 	lds	r25, 0x40E4	; 0x8040e4 <_index+0x1>
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <_index>
    10be:	90 93 e4 40 	sts	0x40E4, r25	; 0x8040e4 <_index+0x1>
	if(_index >= _N)
    10c2:	20 91 e3 40 	lds	r18, 0x40E3	; 0x8040e3 <_index>
    10c6:	30 91 e4 40 	lds	r19, 0x40E4	; 0x8040e4 <_index+0x1>
    10ca:	80 91 e5 40 	lds	r24, 0x40E5	; 0x8040e5 <_N>
    10ce:	90 91 e6 40 	lds	r25, 0x40E6	; 0x8040e6 <_N+0x1>
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	3c f0       	brlt	.+14     	; 0x10e6 <_ZN8Goertzel9DataPointEi+0x5a>
	{
		_index = 0;
    10d8:	10 92 e3 40 	sts	0x40E3, r1	; 0x8040e3 <_index>
    10dc:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <_index+0x1>
		_samplesReady = true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 e2 40 	sts	0x40E2, r24	; 0x8040e2 <_samplesReady>
	}

	return(_samplesReady);
    10e6:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <_samplesReady>
}
    10ea:	08 95       	ret

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
	{
		return(_samplesReady);
    10ec:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <_samplesReady>
    10f0:	08 95       	ret

000010f2 <_ZL11i2c_0_WaitWv>:
void I2C_0_Shutdown(void)
{
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
	TWI0.MCTRLA = 0;
}
    10f2:	82 e3       	ldi	r24, 0x32	; 50
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_i2c0_timeout_ticks>
    10fa:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f9 e0       	ldi	r31, 0x09	; 9
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	80 7c       	andi	r24, 0xC0	; 192
    1106:	59 f4       	brne	.+22     	; 0x111e <_ZL11i2c_0_WaitWv+0x2c>
    1108:	85 81       	ldd	r24, Z+5	; 0x05
    110a:	8c 70       	andi	r24, 0x0C	; 12
    110c:	81 f4       	brne	.+32     	; 0x112e <_ZL11i2c_0_WaitWv+0x3c>
    110e:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    1112:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    1116:	89 2b       	or	r24, r25
    1118:	a1 f7       	brne	.-24     	; 0x1102 <_ZL11i2c_0_WaitWv+0x10>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <_ZL11i2c_0_WaitWv+0x3e>
    111e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1122:	84 ff       	sbrs	r24, 4
    1124:	02 c0       	rjmp	.+4      	; 0x112a <_ZL11i2c_0_WaitWv+0x38>
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <_ZL11i2c_0_WaitWv+0x3e>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <_ZL11i2c_0_WaitWv+0x3e>
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	20 91 14 40 	lds	r18, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    1134:	30 91 15 40 	lds	r19, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    1138:	23 2b       	or	r18, r19
    113a:	09 f0       	breq	.+2      	; 0x113e <_ZL11i2c_0_WaitWv+0x4c>
    113c:	08 95       	ret
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	fd cf       	rjmp	.-6      	; 0x113c <_ZL11i2c_0_WaitWv+0x4a>

00001142 <I2C_0_Init>:

void I2C_0_Init(void)
{
	PORTMUX.TWIROUTEA &= 0x0A;
    1142:	e0 ee       	ldi	r30, 0xE0	; 224
    1144:	f5 e0       	ldi	r31, 0x05	; 5
    1146:	85 81       	ldd	r24, Z+5	; 0x05
    1148:	8a 70       	andi	r24, 0x0A	; 10
    114a:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x02;
    114c:	85 81       	ldd	r24, Z+5	; 0x05
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
//	TWI0.MBAUD = TWI0_BAUD((I2C_SCL_FREQ), 0.3);
	TWI0.MBAUD = (uint8_t)TWI0_BAUD(I2C_SCL_FREQ, 0);
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	f9 e0       	ldi	r31, 0x09	; 9
    1156:	83 e7       	ldi	r24, 0x73	; 115
    1158:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI0.MCTRLA = TWI_ENABLE_bm;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI0.MADDR = 0x00;
    115e:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI0.MDATA = 0x00;
    1160:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    1162:	85 83       	std	Z+5, r24	; 0x05
	/* Select I2C pins PC2/PC3 */
}
    1164:	08 95       	ret

00001166 <I2C_0_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_0_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	16 2f       	mov	r17, r22
    1176:	ea 01       	movw	r28, r20
    1178:	f2 2e       	mov	r15, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send slave address */
	TWI0.MADDR = slaveAddr;
    117a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    117e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	51 f0       	breq	.+20     	; 0x119a <I2C_0_SendData+0x34>
	{
		return retVal;
    1186:	cf ef       	ldi	r28, 0xFF	; 255
			}
		}
	}
	
	return retVal;
}
    1188:	8c 2f       	mov	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    119a:	10 93 08 09 	sts	0x0908, r17	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    119e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	01 f5       	brne	.+64     	; 0x11e6 <I2C_0_SendData+0x80>
	{
		return retVal;
	}

	retVal = 0;
	if((len != 0) && (pData != null))
    11a6:	ff 20       	and	r15, r15
    11a8:	01 f1       	breq	.+64     	; 0x11ea <I2C_0_SendData+0x84>
    11aa:	20 97       	sbiw	r28, 0x00	; 0
    11ac:	b9 f0       	breq	.+46     	; 0x11dc <I2C_0_SendData+0x76>
    11ae:	8e 01       	movw	r16, r28
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
	if((len != 0) && (pData != null))
	{
		while(len--)
		{
			TWI0.MDATA = *pData;
    11b2:	0f 2e       	mov	r0, r31
    11b4:	c1 2c       	mov	r12, r1
    11b6:	f9 e0       	ldi	r31, 0x09	; 9
    11b8:	df 2e       	mov	r13, r31
    11ba:	f0 2d       	mov	r31, r0
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    11bc:	d3 e0       	ldi	r29, 0x03	; 3
	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
		{
			TWI0.MDATA = *pData;
    11be:	f8 01       	movw	r30, r16
    11c0:	81 91       	ld	r24, Z+
    11c2:	8f 01       	movw	r16, r30
    11c4:	f6 01       	movw	r30, r12
    11c6:	80 87       	std	Z+8, r24	; 0x08
			if(i2c_0_WaitW() == I2C_ACKED)
    11c8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	e1 f6       	brne	.-72     	; 0x1188 <I2C_0_SendData+0x22>
			{
				retVal++;
    11d0:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
				if(!len) I2C_0_EndSession();
    11d2:	fc 16       	cp	r15, r28
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <I2C_0_SendData+0x7a>
	}

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    11d6:	fc 12       	cpse	r15, r28
    11d8:	f2 cf       	rjmp	.-28     	; 0x11be <I2C_0_SendData+0x58>
    11da:	d6 cf       	rjmp	.-84     	; 0x1188 <I2C_0_SendData+0x22>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}

	retVal = 0;
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d4 cf       	rjmp	.-88     	; 0x1188 <I2C_0_SendData+0x22>
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    11e0:	f6 01       	movw	r30, r12
    11e2:	d4 83       	std	Z+4, r29	; 0x04
    11e4:	f8 cf       	rjmp	.-16     	; 0x11d6 <I2C_0_SendData+0x70>
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    11e6:	cf ef       	ldi	r28, 0xFF	; 255
    11e8:	cf cf       	rjmp	.-98     	; 0x1188 <I2C_0_SendData+0x22>
	}

	retVal = 0;
    11ea:	cf 2d       	mov	r28, r15
    11ec:	cd cf       	rjmp	.-102    	; 0x1188 <I2C_0_SendData+0x22>

000011ee <I2C_0_GetData>:
	return retVal;
}

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_0_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	c8 2f       	mov	r28, r24
    11fa:	d6 2f       	mov	r29, r22
    11fc:	7a 01       	movw	r14, r20
    11fe:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI0.MADDR = slaveAddr;
    1200:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    1204:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	39 f0       	breq	.+14     	; 0x121a <I2C_0_GetData+0x2c>
	{
		return retVal;
    120c:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	
	return retVal;
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI0.MDATA = regAddr;
    121a:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	if(i2c_0_WaitW() != I2C_ACKED)
    121e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	11 f0       	breq	.+4      	; 0x122a <I2C_0_GetData+0x3c>
	{
		return retVal;
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	f2 cf       	rjmp	.-28     	; 0x120e <I2C_0_GetData+0x20>
	}
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
    122a:	c1 60       	ori	r28, 0x01	; 1
    122c:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	if(i2c_0_WaitW() != I2C_ACKED)
    1230:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZL11i2c_0_WaitWv>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	01 f5       	brne	.+64     	; 0x1278 <I2C_0_GetData+0x8a>
	{
		return retVal;
	}
	
	retVal = 0;
    1238:	81 2f       	mov	r24, r17
	if((len != 0) && (pData !=null ))
    123a:	11 23       	and	r17, r17
    123c:	41 f3       	breq	.-48     	; 0x120e <I2C_0_GetData+0x20>
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}
	
	retVal = 0;
    123e:	80 e0       	ldi	r24, 0x00	; 0
	if((len != 0) && (pData !=null ))
    1240:	e1 14       	cp	r14, r1
    1242:	f1 04       	cpc	r15, r1
    1244:	21 f3       	breq	.-56     	; 0x120e <I2C_0_GetData+0x20>
	{
		while(len--)
    1246:	6f ef       	ldi	r22, 0xFF	; 255
    1248:	61 0f       	add	r22, r17
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
	}
	
	retVal = 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 50;
    124c:	42 e3       	ldi	r20, 0x32	; 50
    124e:	50 e0       	ldi	r21, 0x00	; 0
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    1250:	e0 e0       	ldi	r30, 0x00	; 0
    1252:	f9 e0       	ldi	r31, 0x09	; 9
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    1254:	72 e0       	ldi	r23, 0x02	; 2

static uint8_t i2c_0_WaitR(void)
{
	uint8_t state = I2C_INIT;
	
	g_i2c0_timeout_ticks = 50;
    1256:	40 93 14 40 	sts	0x4014, r20	; 0x804014 <g_i2c0_timeout_ticks>
    125a:	50 93 15 40 	sts	0x4015, r21	; 0x804015 <g_i2c0_timeout_ticks+0x1>
	
	do
	{
		if(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))
    125e:	95 81       	ldd	r25, Z+5	; 0x05
    1260:	90 7c       	andi	r25, 0xC0	; 192
    1262:	61 f4       	brne	.+24     	; 0x127c <I2C_0_GetData+0x8e>
		{
			state = I2C_READY;
		}
		else if(TWI0.MSTATUS & (TWI_BUSERR_bm | TWI_ARBLOST_bm))
    1264:	95 81       	ldd	r25, Z+5	; 0x05
    1266:	9c 70       	andi	r25, 0x0C	; 12
    1268:	91 f6       	brne	.-92     	; 0x120e <I2C_0_GetData+0x20>
		{
			/* get here only in case of bus error or arbitration lost - M4 state */
			state = I2C_ERROR;
		}
	} while(!state && g_i2c0_timeout_ticks);
    126a:	20 91 14 40 	lds	r18, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    126e:	30 91 15 40 	lds	r19, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    1272:	23 2b       	or	r18, r19
    1274:	a1 f7       	brne	.-24     	; 0x125e <I2C_0_GetData+0x70>
    1276:	cb cf       	rjmp	.-106    	; 0x120e <I2C_0_GetData+0x20>
	
	/* Send the client address for read */
	TWI0.MADDR = slaveAddr | 0x01;
	if(i2c_0_WaitW() != I2C_ACKED)
	{
		return retVal;
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	c9 cf       	rjmp	.-110    	; 0x120e <I2C_0_GetData+0x20>
	{
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
    127c:	90 85       	ldd	r25, Z+8	; 0x08
    127e:	d7 01       	movw	r26, r14
    1280:	9d 93       	st	X+, r25
    1282:	7d 01       	movw	r14, r26
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    1284:	68 13       	cpse	r22, r24
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <I2C_0_GetData+0xa4>
    1288:	87 e0       	ldi	r24, 0x07	; 7
    128a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
				retVal++;
    128e:	81 2f       	mov	r24, r17
    1290:	be cf       	rjmp	.-132    	; 0x120e <I2C_0_GetData+0x20>
		while(len--)
		{
			if(i2c_0_WaitR() == I2C_READY)
			{
				*pData = TWI0.MDATA;
				TWI0.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    1292:	74 83       	std	Z+4, r23	; 0x04
				retVal++;
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	df cf       	rjmp	.-66     	; 0x1256 <I2C_0_GetData+0x68>

00001298 <_ZN4ledsC1Ev>:
	while(!g_text_buff.full() && i<lenstr && i<TEXT_BUFF_SIZE)
	{
		g_text_buff.put(str[i++]);
	}
	
	timer_red_blink_inhibit = true; /* Prevent timer from controlling LED */
    1298:	08 95       	ret

0000129a <_ZN4ledsD1Ev>:
    129a:	08 95       	ret

0000129c <__vector_41>:
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    12b4:	80 ff       	sbrs	r24, 0
    12b6:	8c c0       	rjmp	.+280    	; 0x13d0 <__vector_41+0x134>
    12b8:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    12bc:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    12c0:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    12c4:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    12c8:	89 2b       	or	r24, r25
    12ca:	8a 2b       	or	r24, r26
    12cc:	8b 2b       	or	r24, r27
    12ce:	09 f1       	breq	.+66     	; 0x1312 <__vector_41+0x76>
    12d0:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    12d4:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    12d8:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    12dc:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	a1 09       	sbc	r26, r1
    12e4:	b1 09       	sbc	r27, r1
    12e6:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    12ea:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    12ee:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    12f2:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
    12f6:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    12fa:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    12fe:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1302:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    1306:	89 2b       	or	r24, r25
    1308:	8a 2b       	or	r24, r26
    130a:	8b 2b       	or	r24, r27
    130c:	11 f4       	brne	.+4      	; 0x1312 <__vector_41+0x76>
    130e:	4e 98       	cbi	0x09, 6	; 9
    1310:	4d 98       	cbi	0x09, 5	; 9
    1312:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    1316:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    131a:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    131e:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    1322:	89 2b       	or	r24, r25
    1324:	8a 2b       	or	r24, r26
    1326:	8b 2b       	or	r24, r27
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_41+0x90>
    132a:	52 c0       	rjmp	.+164    	; 0x13d0 <__vector_41+0x134>
    132c:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1330:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1334:	89 2b       	or	r24, r25
    1336:	19 f1       	breq	.+70     	; 0x137e <__vector_41+0xe2>
    1338:	80 91 00 41 	lds	r24, 0x4100	; 0x804100 <_ZL23timer_red_blink_inhibit>
    133c:	81 11       	cpse	r24, r1
    133e:	1f c0       	rjmp	.+62     	; 0x137e <__vector_41+0xe2>
    1340:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1344:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1348:	02 97       	sbiw	r24, 0x02	; 2
    134a:	0c f4       	brge	.+2      	; 0x134e <__vector_41+0xb2>
    134c:	4e c0       	rjmp	.+156    	; 0x13ea <__vector_41+0x14e>
    134e:	4e 9a       	sbi	0x09, 6	; 9
    1350:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1354:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	80 93 ef 40 	sts	0x40EF, r24	; 0x8040ef <_ZL15red_blink_count>
    135e:	90 93 f0 40 	sts	0x40F0, r25	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1362:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1366:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	09 f4       	brne	.+2      	; 0x1370 <__vector_41+0xd4>
    136e:	50 c0       	rjmp	.+160    	; 0x1410 <__vector_41+0x174>
    1370:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1374:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	09 f4       	brne	.+2      	; 0x137e <__vector_41+0xe2>
    137c:	64 c0       	rjmp	.+200    	; 0x1446 <__vector_41+0x1aa>
    137e:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    1382:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    1386:	89 2b       	or	r24, r25
    1388:	19 f1       	breq	.+70     	; 0x13d0 <__vector_41+0x134>
    138a:	80 91 ff 40 	lds	r24, 0x40FF	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    138e:	81 11       	cpse	r24, r1
    1390:	1f c0       	rjmp	.+62     	; 0x13d0 <__vector_41+0x134>
    1392:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    1396:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    139a:	02 97       	sbiw	r24, 0x02	; 2
    139c:	0c f4       	brge	.+2      	; 0x13a0 <__vector_41+0x104>
    139e:	5c c0       	rjmp	.+184    	; 0x1458 <__vector_41+0x1bc>
    13a0:	4d 9a       	sbi	0x09, 5	; 9
    13a2:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    13a6:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17green_blink_count>
    13b0:	90 93 ee 40 	sts	0x40EE, r25	; 0x8040ee <_ZL17green_blink_count+0x1>
    13b4:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    13b8:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <__vector_41+0x126>
    13c0:	5e c0       	rjmp	.+188    	; 0x147e <__vector_41+0x1e2>
    13c2:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    13c6:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <__vector_41+0x134>
    13ce:	72 c0       	rjmp	.+228    	; 0x14b4 <__vector_41+0x218>
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti
    13ea:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    13ee:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <__vector_41+0x15e>
    13f8:	b4 cf       	rjmp	.-152    	; 0x1362 <__vector_41+0xc6>
    13fa:	4e 98       	cbi	0x09, 6	; 9
    13fc:	80 91 ef 40 	lds	r24, 0x40EF	; 0x8040ef <_ZL15red_blink_count>
    1400:	90 91 f0 40 	lds	r25, 0x40F0	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	80 93 ef 40 	sts	0x40EF, r24	; 0x8040ef <_ZL15red_blink_count>
    140a:	90 93 f0 40 	sts	0x40F0, r25	; 0x8040f0 <_ZL15red_blink_count+0x1>
    140e:	a9 cf       	rjmp	.-174    	; 0x1362 <__vector_41+0xc6>
    1410:	80 91 f5 40 	lds	r24, 0x40F5	; 0x8040f5 <_ZL20red_blink_off_period>
    1414:	90 91 f6 40 	lds	r25, 0x40F6	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
    1418:	89 2b       	or	r24, r25
    141a:	61 f0       	breq	.+24     	; 0x1434 <__vector_41+0x198>
    141c:	80 91 f5 40 	lds	r24, 0x40F5	; 0x8040f5 <_ZL20red_blink_off_period>
    1420:	90 91 f6 40 	lds	r25, 0x40F6	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
    1424:	91 95       	neg	r25
    1426:	81 95       	neg	r24
    1428:	91 09       	sbc	r25, r1
    142a:	80 93 ef 40 	sts	0x40EF, r24	; 0x8040ef <_ZL15red_blink_count>
    142e:	90 93 f0 40 	sts	0x40F0, r25	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1432:	a5 cf       	rjmp	.-182    	; 0x137e <__vector_41+0xe2>
    1434:	80 91 f7 40 	lds	r24, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    1438:	90 91 f8 40 	lds	r25, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    143c:	80 93 ef 40 	sts	0x40EF, r24	; 0x8040ef <_ZL15red_blink_count>
    1440:	90 93 f0 40 	sts	0x40F0, r25	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1444:	9c cf       	rjmp	.-200    	; 0x137e <__vector_41+0xe2>
    1446:	80 91 f7 40 	lds	r24, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    144a:	90 91 f8 40 	lds	r25, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    144e:	80 93 ef 40 	sts	0x40EF, r24	; 0x8040ef <_ZL15red_blink_count>
    1452:	90 93 f0 40 	sts	0x40F0, r25	; 0x8040f0 <_ZL15red_blink_count+0x1>
    1456:	93 cf       	rjmp	.-218    	; 0x137e <__vector_41+0xe2>
    1458:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    145c:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    1460:	8f 3f       	cpi	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	0c f0       	brlt	.+2      	; 0x1468 <__vector_41+0x1cc>
    1466:	a6 cf       	rjmp	.-180    	; 0x13b4 <__vector_41+0x118>
    1468:	4d 98       	cbi	0x09, 5	; 9
    146a:	80 91 ed 40 	lds	r24, 0x40ED	; 0x8040ed <_ZL17green_blink_count>
    146e:	90 91 ee 40 	lds	r25, 0x40EE	; 0x8040ee <_ZL17green_blink_count+0x1>
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17green_blink_count>
    1478:	90 93 ee 40 	sts	0x40EE, r25	; 0x8040ee <_ZL17green_blink_count+0x1>
    147c:	9b cf       	rjmp	.-202    	; 0x13b4 <__vector_41+0x118>
    147e:	80 91 f1 40 	lds	r24, 0x40F1	; 0x8040f1 <_ZL22green_blink_off_period>
    1482:	90 91 f2 40 	lds	r25, 0x40F2	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
    1486:	89 2b       	or	r24, r25
    1488:	61 f0       	breq	.+24     	; 0x14a2 <__vector_41+0x206>
    148a:	80 91 f1 40 	lds	r24, 0x40F1	; 0x8040f1 <_ZL22green_blink_off_period>
    148e:	90 91 f2 40 	lds	r25, 0x40F2	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
    1492:	91 95       	neg	r25
    1494:	81 95       	neg	r24
    1496:	91 09       	sbc	r25, r1
    1498:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17green_blink_count>
    149c:	90 93 ee 40 	sts	0x40EE, r25	; 0x8040ee <_ZL17green_blink_count+0x1>
    14a0:	97 cf       	rjmp	.-210    	; 0x13d0 <__vector_41+0x134>
    14a2:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    14a6:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    14aa:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17green_blink_count>
    14ae:	90 93 ee 40 	sts	0x40EE, r25	; 0x8040ee <_ZL17green_blink_count+0x1>
    14b2:	8e cf       	rjmp	.-228    	; 0x13d0 <__vector_41+0x134>
    14b4:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    14b8:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    14bc:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17green_blink_count>
    14c0:	90 93 ee 40 	sts	0x40EE, r25	; 0x8040ee <_ZL17green_blink_count+0x1>
    14c4:	85 cf       	rjmp	.-246    	; 0x13d0 <__vector_41+0x134>

000014c6 <_ZN4leds6activeEv>:
    14c6:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    14ca:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    14ce:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    14d2:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    14d6:	89 2b       	or	r24, r25
    14d8:	8a 2b       	or	r24, r26
    14da:	8b 2b       	or	r24, r27
    14dc:	21 f0       	breq	.+8      	; 0x14e6 <_ZN4leds6activeEv+0x20>
    14de:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	08 95       	ret
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	08 95       	ret

000014ea <_ZN4leds10deactivateEv>:
    14ea:	e0 e3       	ldi	r30, 0x30	; 48
    14ec:	fb e0       	ldi	r31, 0x0B	; 11
    14ee:	85 81       	ldd	r24, Z+5	; 0x05
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	85 83       	std	Z+5, r24	; 0x05
    14f4:	4e 98       	cbi	0x09, 6	; 9
    14f6:	4d 98       	cbi	0x09, 5	; 9
    14f8:	80 e4       	ldi	r24, 0x40	; 64
    14fa:	90 e4       	ldi	r25, 0x40	; 64
    14fc:	0e 94 67 07 	call	0xece	; 0xece <_ZN18CircularStringBuff5resetEv>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 ff 40 	sts	0x40FF, r24	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    1506:	80 93 00 41 	sts	0x4100, r24	; 0x804100 <_ZL23timer_red_blink_inhibit>
    150a:	10 92 16 40 	sts	0x4016, r1	; 0x804016 <_ZL17led_timeout_count>
    150e:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL17led_timeout_count+0x1>
    1512:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL17led_timeout_count+0x2>
    1516:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL17led_timeout_count+0x3>
    151a:	08 95       	ret

0000151c <_ZN4leds5blinkE7Blink_tb>:
	blink(blinkMode, false);
}

void leds::blink(Blink_t blinkMode, bool resetTimeout)
{
	if(resetTimeout)
    151c:	44 23       	and	r20, r20
    151e:	61 f0       	breq	.+24     	; 0x1538 <_ZN4leds5blinkE7Blink_tb+0x1c>
	{
		led_timeout_count = LED_TIMEOUT_DELAY;
    1520:	80 e6       	ldi	r24, 0x60	; 96
    1522:	9a ee       	ldi	r25, 0xEA	; 234
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    152c:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    1530:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    1534:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
    1538:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZL17led_timeout_count>
    153c:	90 91 17 40 	lds	r25, 0x4017	; 0x804017 <_ZL17led_timeout_count+0x1>
    1540:	a0 91 18 40 	lds	r26, 0x4018	; 0x804018 <_ZL17led_timeout_count+0x2>
    1544:	b0 91 19 40 	lds	r27, 0x4019	; 0x804019 <_ZL17led_timeout_count+0x3>
    1548:	89 2b       	or	r24, r25
    154a:	8a 2b       	or	r24, r26
    154c:	8b 2b       	or	r24, r27
    154e:	91 f4       	brne	.+36     	; 0x1574 <_ZN4leds5blinkE7Blink_tb+0x58>
    1550:	61 15       	cp	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	71 f4       	brne	.+28     	; 0x1572 <_ZN4leds5blinkE7Blink_tb+0x56>
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	67 30       	cpi	r22, 0x07	; 7
    155a:	71 05       	cpc	r23, r1
    155c:	09 f0       	breq	.+2      	; 0x1560 <_ZN4leds5blinkE7Blink_tb+0x44>
    155e:	80 e0       	ldi	r24, 0x00	; 0
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    1560:	9b 01       	movw	r18, r22
    1562:	25 50       	subi	r18, 0x05	; 5
    1564:	31 09       	sbc	r19, r1
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	08 f0       	brcs	.+2      	; 0x156e <_ZN4leds5blinkE7Blink_tb+0x52>
    156c:	45 c0       	rjmp	.+138    	; 0x15f8 <_ZN4leds5blinkE7Blink_tb+0xdc>
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	0e c0       	rjmp	.+28     	; 0x158e <_ZN4leds5blinkE7Blink_tb+0x72>
    1572:	08 95       	ret
		led_timeout_count = LED_TIMEOUT_DELAY;
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    1574:	61 30       	cpi	r22, 0x01	; 1
    1576:	71 05       	cpc	r23, r1
    1578:	21 f0       	breq	.+8      	; 0x1582 <_ZN4leds5blinkE7Blink_tb+0x66>
    157a:	cb 01       	movw	r24, r22
    157c:	03 97       	sbiw	r24, 0x03	; 3
    157e:	02 97       	sbiw	r24, 0x02	; 2
    1580:	68 f5       	brcc	.+90     	; 0x15dc <_ZN4leds5blinkE7Blink_tb+0xc0>
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	68 30       	cpi	r22, 0x08	; 8
    1586:	71 05       	cpc	r23, r1
    1588:	09 f0       	breq	.+2      	; 0x158c <_ZN4leds5blinkE7Blink_tb+0x70>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
	bool isBoth = !isRed && !isGreen;	
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    158e:	88 23       	and	r24, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <_ZN4leds5blinkE7Blink_tb+0x78>
    1592:	46 c0       	rjmp	.+140    	; 0x1620 <_ZN4leds5blinkE7Blink_tb+0x104>
    1594:	40 91 fd 40 	lds	r20, 0x40FD	; 0x8040fd <_ZL19lastRedBlinkSetting>
    1598:	50 91 fe 40 	lds	r21, 0x40FE	; 0x8040fe <_ZL19lastRedBlinkSetting+0x1>
    159c:	46 17       	cp	r20, r22
    159e:	57 07       	cpc	r21, r23
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <_ZN4leds5blinkE7Blink_tb+0x88>
    15a2:	3e c0       	rjmp	.+124    	; 0x1620 <_ZN4leds5blinkE7Blink_tb+0x104>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
	{
		TCB3.INTCTRL &= ~TCB_CAPT_bm;   /* Capture or Timeout: disabled */
    15a6:	e0 e3       	ldi	r30, 0x30	; 48
    15a8:	fb e0       	ldi	r31, 0x0B	; 11
    15aa:	95 81       	ldd	r25, Z+5	; 0x05
    15ac:	9e 7f       	andi	r25, 0xFE	; 254
    15ae:	95 83       	std	Z+5, r25	; 0x05

		switch(blinkMode)
    15b0:	6d 30       	cpi	r22, 0x0D	; 13
    15b2:	71 05       	cpc	r23, r1
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <_ZN4leds5blinkE7Blink_tb+0x9c>
    15b6:	4f c0       	rjmp	.+158    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
    15b8:	fb 01       	movw	r30, r22
    15ba:	ef 51       	subi	r30, 0x1F	; 31
    15bc:	f5 4f       	sbci	r31, 0xF5	; 245
    15be:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__tablejump2__>
    15c2:	1d 0b       	sbc	r17, r29
    15c4:	3a 0b       	sbc	r19, r26
    15c6:	42 0b       	sbc	r20, r18
    15c8:	4a 0b       	sbc	r20, r26
    15ca:	7e 0b       	sbc	r23, r30
    15cc:	64 0b       	sbc	r22, r20
    15ce:	98 0b       	sbc	r25, r24
    15d0:	6c 0c       	add	r6, r12
    15d2:	84 0c       	add	r8, r4
    15d4:	40 0c       	add	r4, r0
    15d6:	12 0c       	add	r1, r2
    15d8:	e3 0b       	sbc	r30, r19
    15da:	b2 0b       	sbc	r27, r18
		led_timeout_count = LED_TIMEOUT_DELAY;
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	67 30       	cpi	r22, 0x07	; 7
    15e0:	71 05       	cpc	r23, r1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <_ZN4leds5blinkE7Blink_tb+0xca>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    15e6:	62 30       	cpi	r22, 0x02	; 2
    15e8:	71 05       	cpc	r23, r1
    15ea:	09 f0       	breq	.+2      	; 0x15ee <_ZN4leds5blinkE7Blink_tb+0xd2>
    15ec:	b9 cf       	rjmp	.-142    	; 0x1560 <_ZN4leds5blinkE7Blink_tb+0x44>
	bool isBoth = !isRed && !isGreen;	
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    15f0:	67 30       	cpi	r22, 0x07	; 7
    15f2:	71 05       	cpc	r23, r1
    15f4:	79 f2       	breq	.-98     	; 0x1594 <_ZN4leds5blinkE7Blink_tb+0x78>
    15f6:	17 c0       	rjmp	.+46     	; 0x1626 <_ZN4leds5blinkE7Blink_tb+0x10a>
	}
	
	if(!led_timeout_count && (blinkMode != LEDS_OFF)) return;
	
	bool isRed = ((blinkMode == LEDS_RED_OFF) || (blinkMode == LEDS_RED_BLINK_FAST) || (blinkMode == LEDS_RED_BLINK_SLOW) || (blinkMode == LEDS_RED_ON_CONSTANT));
	bool isGreen = ((blinkMode == LEDS_GREEN_OFF) || (blinkMode == LEDS_GREEN_BLINK_FAST) || (blinkMode == LEDS_GREEN_BLINK_SLOW) || (blinkMode == LEDS_GREEN_ON_CONSTANT));
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	68 30       	cpi	r22, 0x08	; 8
    15fc:	71 05       	cpc	r23, r1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <_ZN4leds5blinkE7Blink_tb+0xe6>
    1600:	20 e0       	ldi	r18, 0x00	; 0
	bool isBoth = !isRed && !isGreen;	
    1602:	81 11       	cpse	r24, r1
    1604:	c7 cf       	rjmp	.-114    	; 0x1594 <_ZN4leds5blinkE7Blink_tb+0x78>
    1606:	68 30       	cpi	r22, 0x08	; 8
    1608:	71 05       	cpc	r23, r1
    160a:	69 f0       	breq	.+26     	; 0x1626 <_ZN4leds5blinkE7Blink_tb+0x10a>
		
	if((isRed && (blinkMode != lastRedBlinkSetting)) || (isGreen && (blinkMode != lastGreenBlinkSetting)) || (isBoth && (blinkMode != lastBothBlinkSetting)))
    160c:	20 91 f9 40 	lds	r18, 0x40F9	; 0x8040f9 <_ZL20lastBothBlinkSetting>
    1610:	30 91 fa 40 	lds	r19, 0x40FA	; 0x8040fa <_ZL20lastBothBlinkSetting+0x1>
    1614:	26 17       	cp	r18, r22
    1616:	37 07       	cpc	r19, r23
    1618:	09 f4       	brne	.+2      	; 0x161c <_ZN4leds5blinkE7Blink_tb+0x100>
    161a:	98 c1       	rjmp	.+816    	; 0x194c <_ZN4leds5blinkE7Blink_tb+0x430>
    161c:	28 2f       	mov	r18, r24
    161e:	c3 cf       	rjmp	.-122    	; 0x15a6 <_ZN4leds5blinkE7Blink_tb+0x8a>
    1620:	22 23       	and	r18, r18
    1622:	09 f4       	brne	.+2      	; 0x1626 <_ZN4leds5blinkE7Blink_tb+0x10a>
    1624:	91 c1       	rjmp	.+802    	; 0x1948 <_ZN4leds5blinkE7Blink_tb+0x42c>
    1626:	20 91 fb 40 	lds	r18, 0x40FB	; 0x8040fb <_ZL21lastGreenBlinkSetting>
    162a:	30 91 fc 40 	lds	r19, 0x40FC	; 0x8040fc <_ZL21lastGreenBlinkSetting+0x1>
    162e:	26 17       	cp	r18, r22
    1630:	37 07       	cpc	r19, r23
    1632:	09 f4       	brne	.+2      	; 0x1636 <_ZN4leds5blinkE7Blink_tb+0x11a>
    1634:	81 c1       	rjmp	.+770    	; 0x1938 <_ZN4leds5blinkE7Blink_tb+0x41c>
    1636:	21 e0       	ldi	r18, 0x01	; 1
    1638:	b6 cf       	rjmp	.-148    	; 0x15a6 <_ZN4leds5blinkE7Blink_tb+0x8a>

		switch(blinkMode)
		{
			case LEDS_OFF:
			{
				red_blink_count = 0;
    163a:	10 92 ef 40 	sts	0x40EF, r1	; 0x8040ef <_ZL15red_blink_count>
    163e:	10 92 f0 40 	sts	0x40F0, r1	; 0x8040f0 <_ZL15red_blink_count+0x1>
				green_blink_count = 0;
    1642:	10 92 ed 40 	sts	0x40ED, r1	; 0x8040ed <_ZL17green_blink_count>
    1646:	10 92 ee 40 	sts	0x40EE, r1	; 0x8040ee <_ZL17green_blink_count+0x1>
    164a:	4e 98       	cbi	0x09, 6	; 9
    164c:	4d 98       	cbi	0x09, 5	; 9
				LED_set_RED_level(OFF);
				LED_set_GREEN_level(OFF);
				red_led_configured = false;
    164e:	10 92 ec 40 	sts	0x40EC, r1	; 0x8040ec <_ZL18red_led_configured>
				green_led_configured = false;
    1652:	10 92 eb 40 	sts	0x40EB, r1	; 0x8040eb <_ZL20green_led_configured>
				
			}
			break;
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	fb e0       	ldi	r31, 0x0B	; 11
    165a:	95 81       	ldd	r25, Z+5	; 0x05
    165c:	91 60       	ori	r25, 0x01	; 1
    165e:	95 83       	std	Z+5, r25	; 0x05
	}
	
	if(isRed)
    1660:	81 11       	cpse	r24, r1
    1662:	6d c1       	rjmp	.+730    	; 0x193e <_ZN4leds5blinkE7Blink_tb+0x422>
	{
		lastRedBlinkSetting = blinkMode;
	}
	else if(isGreen)
    1664:	22 23       	and	r18, r18
    1666:	09 f4       	brne	.+2      	; 0x166a <_ZN4leds5blinkE7Blink_tb+0x14e>
    1668:	71 c1       	rjmp	.+738    	; 0x194c <_ZN4leds5blinkE7Blink_tb+0x430>
	{
		lastGreenBlinkSetting = blinkMode;
    166a:	60 93 fb 40 	sts	0x40FB, r22	; 0x8040fb <_ZL21lastGreenBlinkSetting>
    166e:	70 93 fc 40 	sts	0x40FC, r23	; 0x8040fc <_ZL21lastGreenBlinkSetting+0x1>
    1672:	08 95       	ret
    1674:	4e 98       	cbi	0x09, 6	; 9
			break;
			
			case LEDS_RED_OFF:
			{
				LED_set_RED_level(OFF);
				red_blink_count = 0;
    1676:	10 92 ef 40 	sts	0x40EF, r1	; 0x8040ef <_ZL15red_blink_count>
    167a:	10 92 f0 40 	sts	0x40F0, r1	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = false;
    167e:	10 92 ec 40 	sts	0x40EC, r1	; 0x8040ec <_ZL18red_led_configured>
			}
			break;
    1682:	e9 cf       	rjmp	.-46     	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
    1684:	4d 98       	cbi	0x09, 5	; 9
			
			case LEDS_GREEN_OFF:
			{
				LED_set_GREEN_level(OFF);
				green_blink_count = 0;
    1686:	10 92 ed 40 	sts	0x40ED, r1	; 0x8040ed <_ZL17green_blink_count>
    168a:	10 92 ee 40 	sts	0x40EE, r1	; 0x8040ee <_ZL17green_blink_count+0x1>
				green_led_configured = false;
    168e:	10 92 eb 40 	sts	0x40EB, r1	; 0x8040eb <_ZL20green_led_configured>
			}
			break;
    1692:	e1 cf       	rjmp	.-62     	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_BLINK_FAST:
			{
				red_blink_on_period = BRIEF_ON;
    1694:	4f e0       	ldi	r20, 0x0F	; 15
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	40 93 f7 40 	sts	0x40F7, r20	; 0x8040f7 <_ZL19red_blink_on_period>
    169c:	50 93 f8 40 	sts	0x40F8, r21	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = BRIEF_OFF;
    16a0:	42 e3       	ldi	r20, 0x32	; 50
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	40 93 f5 40 	sts	0x40F5, r20	; 0x8040f5 <_ZL20red_blink_off_period>
    16a8:	50 93 f6 40 	sts	0x40F6, r21	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;	
    16ac:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    16b0:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    16b4:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    16b8:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    16c2:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    16c6:	c7 cf       	rjmp	.-114    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_BLINK_FAST:
			{
				green_blink_on_period = BRIEF_ON;
    16c8:	4f e0       	ldi	r20, 0x0F	; 15
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL21green_blink_on_period>
    16d0:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = BRIEF_OFF;	
    16d4:	42 e3       	ldi	r20, 0x32	; 50
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL22green_blink_off_period>
    16dc:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    16e0:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    16e4:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    16e8:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL17green_blink_count>
    16ec:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    16f6:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
			}
			break;
    16fa:	ad cf       	rjmp	.-166    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_BLINK_SLOW:
			{
				red_blink_on_period = SLOW_ON;
    16fc:	49 e1       	ldi	r20, 0x19	; 25
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	40 93 f7 40 	sts	0x40F7, r20	; 0x8040f7 <_ZL19red_blink_on_period>
    1704:	50 93 f8 40 	sts	0x40F8, r21	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    1708:	44 ef       	ldi	r20, 0xF4	; 244
    170a:	51 e0       	ldi	r21, 0x01	; 1
    170c:	40 93 f5 40 	sts	0x40F5, r20	; 0x8040f5 <_ZL20red_blink_off_period>
    1710:	50 93 f6 40 	sts	0x40F6, r21	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    1714:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    1718:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    171c:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    1720:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    172a:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    172e:	93 cf       	rjmp	.-218    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    1730:	49 e1       	ldi	r20, 0x19	; 25
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL21green_blink_on_period>
    1738:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    173c:	44 ef       	ldi	r20, 0xF4	; 244
    173e:	51 e0       	ldi	r21, 0x01	; 1
    1740:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL22green_blink_off_period>
    1744:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    1748:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    174c:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    1750:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL17green_blink_count>
    1754:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    175e:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
			}
			break;
    1762:	79 cf       	rjmp	.-270    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_THEN_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    1764:	a9 e1       	ldi	r26, 0x19	; 25
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	a0 93 f3 40 	sts	0x40F3, r26	; 0x8040f3 <_ZL21green_blink_on_period>
    176c:	b0 93 f4 40 	sts	0x40F4, r27	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    1770:	e4 ef       	ldi	r30, 0xF4	; 244
    1772:	f1 e0       	ldi	r31, 0x01	; 1
    1774:	e0 93 f1 40 	sts	0x40F1, r30	; 0x8040f1 <_ZL22green_blink_off_period>
    1778:	f0 93 f2 40 	sts	0x40F2, r31	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = -green_blink_on_period;			
    177c:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    1780:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    1784:	51 95       	neg	r21
    1786:	41 95       	neg	r20
    1788:	51 09       	sbc	r21, r1
    178a:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL17green_blink_count>
    178e:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL17green_blink_count+0x1>
				red_blink_on_period = SLOW_ON;
    1792:	a0 93 f7 40 	sts	0x40F7, r26	; 0x8040f7 <_ZL19red_blink_on_period>
    1796:	b0 93 f8 40 	sts	0x40F8, r27	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    179a:	e0 93 f5 40 	sts	0x40F5, r30	; 0x8040f5 <_ZL20red_blink_off_period>
    179e:	f0 93 f6 40 	sts	0x40F6, r31	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    17a2:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    17a6:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    17aa:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    17ae:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				green_led_configured = true;			
    17b8:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    17bc:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    17c0:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    17c4:	48 cf       	rjmp	.-368    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_THEN_GREEN_BLINK_FAST:
			{
				green_blink_on_period = FAST_ON;
    17c6:	49 e1       	ldi	r20, 0x19	; 25
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL21green_blink_on_period>
    17ce:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = FAST_OFF;	
    17d2:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL22green_blink_off_period>
    17d6:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = -green_blink_on_period;			
    17da:	e0 91 f3 40 	lds	r30, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    17de:	f0 91 f4 40 	lds	r31, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    17e2:	f1 95       	neg	r31
    17e4:	e1 95       	neg	r30
    17e6:	f1 09       	sbc	r31, r1
    17e8:	e0 93 ed 40 	sts	0x40ED, r30	; 0x8040ed <_ZL17green_blink_count>
    17ec:	f0 93 ee 40 	sts	0x40EE, r31	; 0x8040ee <_ZL17green_blink_count+0x1>
				red_blink_on_period = FAST_ON;
    17f0:	40 93 f7 40 	sts	0x40F7, r20	; 0x8040f7 <_ZL19red_blink_on_period>
    17f4:	50 93 f8 40 	sts	0x40F8, r21	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = FAST_OFF;
    17f8:	40 93 f5 40 	sts	0x40F5, r20	; 0x8040f5 <_ZL20red_blink_off_period>
    17fc:	50 93 f6 40 	sts	0x40F6, r21	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    1800:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    1804:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    1808:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    180c:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				green_led_configured = true;			
    1816:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    181a:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    181e:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    1822:	19 cf       	rjmp	.-462    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_AND_GREEN_BLINK_SLOW:
			{
				green_blink_on_period = SLOW_ON;
    1824:	e9 e1       	ldi	r30, 0x19	; 25
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	e0 93 f3 40 	sts	0x40F3, r30	; 0x8040f3 <_ZL21green_blink_on_period>
    182c:	f0 93 f4 40 	sts	0x40F4, r31	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = SLOW_OFF;	
    1830:	44 ef       	ldi	r20, 0xF4	; 244
    1832:	51 e0       	ldi	r21, 0x01	; 1
    1834:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL22green_blink_off_period>
    1838:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    183c:	a0 91 f3 40 	lds	r26, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    1840:	b0 91 f4 40 	lds	r27, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    1844:	a0 93 ed 40 	sts	0x40ED, r26	; 0x8040ed <_ZL17green_blink_count>
    1848:	b0 93 ee 40 	sts	0x40EE, r27	; 0x8040ee <_ZL17green_blink_count+0x1>
				red_blink_on_period = SLOW_ON;
    184c:	e0 93 f7 40 	sts	0x40F7, r30	; 0x8040f7 <_ZL19red_blink_on_period>
    1850:	f0 93 f8 40 	sts	0x40F8, r31	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = SLOW_OFF;
    1854:	40 93 f5 40 	sts	0x40F5, r20	; 0x8040f5 <_ZL20red_blink_off_period>
    1858:	50 93 f6 40 	sts	0x40F6, r21	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    185c:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    1860:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    1864:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    1868:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				green_led_configured = true;			
    1872:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    1876:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    187a:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    187e:	eb ce       	rjmp	.-554    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_AND_GREEN_BLINK_FAST:
			{
				green_blink_on_period = FAST_ON;
    1880:	49 e1       	ldi	r20, 0x19	; 25
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL21green_blink_on_period>
    1888:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = FAST_OFF;	
    188c:	40 93 f1 40 	sts	0x40F1, r20	; 0x8040f1 <_ZL22green_blink_off_period>
    1890:	50 93 f2 40 	sts	0x40F2, r21	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;			
    1894:	e0 91 f3 40 	lds	r30, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    1898:	f0 91 f4 40 	lds	r31, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    189c:	e0 93 ed 40 	sts	0x40ED, r30	; 0x8040ed <_ZL17green_blink_count>
    18a0:	f0 93 ee 40 	sts	0x40EE, r31	; 0x8040ee <_ZL17green_blink_count+0x1>
				red_blink_on_period = FAST_ON;
    18a4:	40 93 f7 40 	sts	0x40F7, r20	; 0x8040f7 <_ZL19red_blink_on_period>
    18a8:	50 93 f8 40 	sts	0x40F8, r21	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = FAST_OFF;
    18ac:	40 93 f5 40 	sts	0x40F5, r20	; 0x8040f5 <_ZL20red_blink_off_period>
    18b0:	50 93 f6 40 	sts	0x40F6, r21	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;				
    18b4:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    18b8:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    18bc:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    18c0:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				green_led_configured = true;			
    18ca:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    18ce:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    18d2:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    18d6:	bf ce       	rjmp	.-642    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_RED_ON_CONSTANT:
			{
				red_blink_on_period = SLOW_ON;
    18d8:	49 e1       	ldi	r20, 0x19	; 25
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	40 93 f7 40 	sts	0x40F7, r20	; 0x8040f7 <_ZL19red_blink_on_period>
    18e0:	50 93 f8 40 	sts	0x40F8, r21	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
				red_blink_off_period = 0;
    18e4:	10 92 f5 40 	sts	0x40F5, r1	; 0x8040f5 <_ZL20red_blink_off_period>
    18e8:	10 92 f6 40 	sts	0x40F6, r1	; 0x8040f6 <_ZL20red_blink_off_period+0x1>
				red_blink_count = red_blink_on_period;
    18ec:	40 91 f7 40 	lds	r20, 0x40F7	; 0x8040f7 <_ZL19red_blink_on_period>
    18f0:	50 91 f8 40 	lds	r21, 0x40F8	; 0x8040f8 <_ZL19red_blink_on_period+0x1>
    18f4:	40 93 ef 40 	sts	0x40EF, r20	; 0x8040ef <_ZL15red_blink_count>
    18f8:	50 93 f0 40 	sts	0x40F0, r21	; 0x8040f0 <_ZL15red_blink_count+0x1>
				red_led_configured = true;			
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	90 93 ec 40 	sts	0x40EC, r25	; 0x8040ec <_ZL18red_led_configured>
				timer_red_blink_inhibit = false; /* Enable timer LED control */
    1902:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
			}
			break;
    1906:	a7 ce       	rjmp	.-690    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
			
			case LEDS_GREEN_ON_CONSTANT:
			{
				green_blink_on_period = SLOW_ON;
    1908:	49 e1       	ldi	r20, 0x19	; 25
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	40 93 f3 40 	sts	0x40F3, r20	; 0x8040f3 <_ZL21green_blink_on_period>
    1910:	50 93 f4 40 	sts	0x40F4, r21	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
				green_blink_off_period = 0;
    1914:	10 92 f1 40 	sts	0x40F1, r1	; 0x8040f1 <_ZL22green_blink_off_period>
    1918:	10 92 f2 40 	sts	0x40F2, r1	; 0x8040f2 <_ZL22green_blink_off_period+0x1>
				green_blink_count = green_blink_on_period;
    191c:	40 91 f3 40 	lds	r20, 0x40F3	; 0x8040f3 <_ZL21green_blink_on_period>
    1920:	50 91 f4 40 	lds	r21, 0x40F4	; 0x8040f4 <_ZL21green_blink_on_period+0x1>
    1924:	40 93 ed 40 	sts	0x40ED, r20	; 0x8040ed <_ZL17green_blink_count>
    1928:	50 93 ee 40 	sts	0x40EE, r21	; 0x8040ee <_ZL17green_blink_count+0x1>
				green_led_configured = true;			
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <_ZL20green_led_configured>
				timer_green_blink_inhibit = false; /* Enable timer LED control */
    1932:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
			}
			break;
    1936:	8f ce       	rjmp	.-738    	; 0x1656 <_ZN4leds5blinkE7Blink_tb+0x13a>
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	}
	
	if(isRed)
    1938:	88 23       	and	r24, r24
    193a:	09 f4       	brne	.+2      	; 0x193e <_ZN4leds5blinkE7Blink_tb+0x422>
    193c:	96 ce       	rjmp	.-724    	; 0x166a <_ZN4leds5blinkE7Blink_tb+0x14e>
	{
		lastRedBlinkSetting = blinkMode;
    193e:	60 93 fd 40 	sts	0x40FD, r22	; 0x8040fd <_ZL19lastRedBlinkSetting>
    1942:	70 93 fe 40 	sts	0x40FE, r23	; 0x8040fe <_ZL19lastRedBlinkSetting+0x1>
    1946:	08 95       	ret
		}
		
		TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	}
	
	if(isRed)
    1948:	81 11       	cpse	r24, r1
    194a:	f9 cf       	rjmp	.-14     	; 0x193e <_ZN4leds5blinkE7Blink_tb+0x422>
	{
		lastGreenBlinkSetting = blinkMode;
	}
	else
	{
		lastBothBlinkSetting = blinkMode;
    194c:	60 93 f9 40 	sts	0x40F9, r22	; 0x8040f9 <_ZL20lastBothBlinkSetting>
    1950:	70 93 fa 40 	sts	0x40FA, r23	; 0x8040fa <_ZL20lastBothBlinkSetting+0x1>
	}
}
    1954:	08 95       	ret

00001956 <_ZN4leds5blinkE7Blink_t>:
	timer_red_blink_inhibit = true; /* Prevent timer from controlling LED */
}

void leds::blink(Blink_t blinkMode)
{
	blink(blinkMode, false);
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN4leds5blinkE7Blink_tb>
}
    195c:	08 95       	ret

0000195e <_ZN4leds5resetEv>:
}

/* Turns off LEDs, resets the text buffer, and disables LED character transmissions. Re-enables LED timer blink functionality. */
void leds::reset(void)
{
	blink(LEDS_OFF);
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN4leds5blinkE7Blink_t>
	g_text_buff.reset();
    1966:	80 e4       	ldi	r24, 0x40	; 64
    1968:	90 e4       	ldi	r25, 0x40	; 64
    196a:	0e 94 67 07 	call	0xece	; 0xece <_ZN18CircularStringBuff5resetEv>
	timer_red_blink_inhibit = timer_green_blink_inhibit = false; /* Enable timer LED control */
    196e:	10 92 ff 40 	sts	0x40FF, r1	; 0x8040ff <_ZL25timer_green_blink_inhibit>
    1972:	10 92 00 41 	sts	0x4100, r1	; 0x804100 <_ZL23timer_red_blink_inhibit>
	led_timeout_count = LED_TIMEOUT_DELAY;
    1976:	80 e6       	ldi	r24, 0x60	; 96
    1978:	9a ee       	ldi	r25, 0xEA	; 234
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <_ZL17led_timeout_count>
    1982:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <_ZL17led_timeout_count+0x1>
    1986:	a0 93 18 40 	sts	0x4018, r26	; 0x804018 <_ZL17led_timeout_count+0x2>
    198a:	b0 93 19 40 	sts	0x4019, r27	; 0x804019 <_ZL17led_timeout_count+0x3>
}
    198e:	08 95       	ret

00001990 <_ZN4leds4initE7Blink_t>:
{
	init(LEDS_OFF);
}

void leds::init(Blink_t setBlink)
{
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	8c 01       	movw	r16, r24
    199e:	7b 01       	movw	r14, r22
	TCB3.INTCTRL &= ~TCB_CAPT_bm; /* Disable timer interrupt */
    19a0:	c0 e3       	ldi	r28, 0x30	; 48
    19a2:	db e0       	ldi	r29, 0x0B	; 11
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	8e 7f       	andi	r24, 0xFE	; 254
    19a8:	8d 83       	std	Y+5, r24	; 0x05
	reset();
    19aa:	c8 01       	movw	r24, r16
    19ac:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN4leds5resetEv>
	TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	8d 83       	std	Y+5, r24	; 0x05
	if(setBlink != LEDS_OFF) blink(setBlink, true);
    19b6:	e1 14       	cp	r14, r1
    19b8:	f1 04       	cpc	r15, r1
    19ba:	39 f4       	brne	.+14     	; 0x19ca <_ZN4leds4initE7Blink_t+0x3a>
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	08 95       	ret
void leds::init(Blink_t setBlink)
{
	TCB3.INTCTRL &= ~TCB_CAPT_bm; /* Disable timer interrupt */
	reset();
	TCB3.INTCTRL |= TCB_CAPT_bm;   /* Capture or Timeout: enabled */
	if(setBlink != LEDS_OFF) blink(setBlink, true);
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	b7 01       	movw	r22, r14
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN4leds5blinkE7Blink_tb>
}
    19d4:	f3 cf       	rjmp	.-26     	; 0x19bc <_ZN4leds4initE7Blink_t+0x2c>

000019d6 <_ZN4leds4initEv>:
}

/* Disables LED timer while resetting settings for interrupt safety. */
void leds::init(void)
{
	init(LEDS_OFF);
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN4leds4initE7Blink_t>
}
    19de:	08 95       	ret

000019e0 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    19e0:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    19e2:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    19e4:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    19e6:	40 83       	st	Z, r20
	ret                             // Return to caller
    19e8:	08 95       	ret

000019ea <_Z15RTC_init_backupj>:

void RTC_zero(void)
{
	if(use_backup_clock)
	{
		RTC_init_backup(g_clock_calibration);
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	08 2f       	mov	r16, r24
    19f4:	19 2f       	mov	r17, r25
    19f6:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <g_clock_calibration>
    19fa:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <g_clock_calibration+0x1>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 01 41 	sts	0x4101, r24	; 0x804101 <_ZL16use_backup_clock>
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	68 ed       	ldi	r22, 0xD8	; 216
    1a08:	88 e7       	ldi	r24, 0x78	; 120
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <protected_write_io>
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	cb 01       	movw	r24, r22
    1a16:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
    1a1a:	c0 e4       	ldi	r28, 0x40	; 64
    1a1c:	d1 e0       	ldi	r29, 0x01	; 1
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	88 23       	and	r24, r24
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <_Z15RTC_init_backupj+0x4a>
    1a24:	64 ef       	ldi	r22, 0xF4	; 244
    1a26:	71 e0       	ldi	r23, 0x01	; 1
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
    1a30:	81 11       	cpse	r24, r1
    1a32:	f5 cf       	rjmp	.-22     	; 0x1a1e <_Z15RTC_init_backupj+0x34>
    1a34:	e0 e4       	ldi	r30, 0x40	; 64
    1a36:	f1 e0       	ldi	r31, 0x01	; 1
    1a38:	14 86       	std	Z+12, r1	; 0x0c
    1a3a:	15 86       	std	Z+13, r1	; 0x0d
    1a3c:	10 86       	std	Z+8, r1	; 0x08
    1a3e:	11 86       	std	Z+9, r1	; 0x09
    1a40:	80 2f       	mov	r24, r16
    1a42:	91 2f       	mov	r25, r17
    1a44:	85 3f       	cpi	r24, 0xF5	; 245
    1a46:	2f e7       	ldi	r18, 0x7F	; 127
    1a48:	92 07       	cpc	r25, r18
    1a4a:	10 f4       	brcc	.+4      	; 0x1a50 <_Z15RTC_init_backupj+0x66>
    1a4c:	85 ef       	ldi	r24, 0xF5	; 245
    1a4e:	9f e7       	ldi	r25, 0x7F	; 127
    1a50:	8a 30       	cpi	r24, 0x0A	; 10
    1a52:	20 e8       	ldi	r18, 0x80	; 128
    1a54:	92 07       	cpc	r25, r18
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <_Z15RTC_init_backupj+0x72>
    1a58:	89 e0       	ldi	r24, 0x09	; 9
    1a5a:	90 e8       	ldi	r25, 0x80	; 128
    1a5c:	e0 e4       	ldi	r30, 0x40	; 64
    1a5e:	f1 e0       	ldi	r31, 0x01	; 1
    1a60:	82 87       	std	Z+10, r24	; 0x0a
    1a62:	93 87       	std	Z+11, r25	; 0x0b
    1a64:	17 82       	std	Z+7, r1	; 0x07
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	82 83       	std	Z+2, r24	; 0x02
    1a6a:	91 e8       	ldi	r25, 0x81	; 129
    1a6c:	90 83       	st	Z, r25
    1a6e:	85 83       	std	Z+5, r24	; 0x05
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	cb 01       	movw	r24, r22
    1a76:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
    1a7a:	c0 e4       	ldi	r28, 0x40	; 64
    1a7c:	d1 e0       	ldi	r29, 0x01	; 1
    1a7e:	88 89       	ldd	r24, Y+16	; 0x10
    1a80:	88 23       	and	r24, r24
    1a82:	41 f0       	breq	.+16     	; 0x1a94 <_Z15RTC_init_backupj+0xaa>
    1a84:	64 ef       	ldi	r22, 0xF4	; 244
    1a86:	71 e0       	ldi	r23, 0x01	; 1
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 ae 14 	call	0x295c	; 0x295c <util_delay_ms>
    1a90:	81 11       	cpse	r24, r1
    1a92:	f5 cf       	rjmp	.-22     	; 0x1a7e <_Z15RTC_init_backupj+0x94>
    1a94:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__TEXT_REGION_LENGTH__+0x7e0152>
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

00001aa2 <_Z15RTC_init_backupv>:
	return RTC.PER;
}

void RTC_init_backup(void)
{
	RTC_init_backup(EEPROM_CLOCK_CALIBRATION_DEFAULT);
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f e7       	ldi	r25, 0x7F	; 127
    1aa6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_Z15RTC_init_backupj>
}
    1aaa:	08 95       	ret

00001aac <_Z13reduce_by_gcdPmS_>:
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		if(phase) *phase = data[0];
		
		return ERROR_CODE_NO_ERROR;
    1aac:	4f 92       	push	r4
    1aae:	5f 92       	push	r5
    1ab0:	6f 92       	push	r6
    1ab2:	7f 92       	push	r7
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    1ace:	8b 01       	movw	r16, r22
    1ad0:	48 80       	ld	r4, Y
    1ad2:	59 80       	ldd	r5, Y+1	; 0x01
    1ad4:	6a 80       	ldd	r6, Y+2	; 0x02
    1ad6:	7b 80       	ldd	r7, Y+3	; 0x03
    1ad8:	41 14       	cp	r4, r1
    1ada:	51 04       	cpc	r5, r1
    1adc:	61 04       	cpc	r6, r1
    1ade:	71 04       	cpc	r7, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <_Z13reduce_by_gcdPmS_+0x38>
    1ae2:	47 c0       	rjmp	.+142    	; 0x1b72 <_Z13reduce_by_gcdPmS_+0xc6>
    1ae4:	fb 01       	movw	r30, r22
    1ae6:	80 80       	ld	r8, Z
    1ae8:	91 80       	ldd	r9, Z+1	; 0x01
    1aea:	a2 80       	ldd	r10, Z+2	; 0x02
    1aec:	b3 80       	ldd	r11, Z+3	; 0x03
    1aee:	81 14       	cp	r8, r1
    1af0:	91 04       	cpc	r9, r1
    1af2:	a1 04       	cpc	r10, r1
    1af4:	b1 04       	cpc	r11, r1
    1af6:	e9 f1       	breq	.+122    	; 0x1b72 <_Z13reduce_by_gcdPmS_+0xc6>
    1af8:	c3 01       	movw	r24, r6
    1afa:	b2 01       	movw	r22, r4
    1afc:	a5 01       	movw	r20, r10
    1afe:	94 01       	movw	r18, r8
    1b00:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1b04:	6b 01       	movw	r12, r22
    1b06:	7c 01       	movw	r14, r24
    1b08:	c1 14       	cp	r12, r1
    1b0a:	d1 04       	cpc	r13, r1
    1b0c:	e1 04       	cpc	r14, r1
    1b0e:	f1 04       	cpc	r15, r1
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <_Z13reduce_by_gcdPmS_+0x70>
    1b12:	75 01       	movw	r14, r10
    1b14:	64 01       	movw	r12, r8
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <_Z13reduce_by_gcdPmS_+0x8a>
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	c5 01       	movw	r24, r10
    1b1e:	b4 01       	movw	r22, r8
    1b20:	a7 01       	movw	r20, r14
    1b22:	96 01       	movw	r18, r12
    1b24:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1b28:	46 01       	movw	r8, r12
    1b2a:	57 01       	movw	r10, r14
    1b2c:	61 15       	cp	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	81 05       	cpc	r24, r1
    1b32:	91 05       	cpc	r25, r1
    1b34:	89 f7       	brne	.-30     	; 0x1b18 <_Z13reduce_by_gcdPmS_+0x6c>
    1b36:	f2 e0       	ldi	r31, 0x02	; 2
    1b38:	cf 16       	cp	r12, r31
    1b3a:	d1 04       	cpc	r13, r1
    1b3c:	e1 04       	cpc	r14, r1
    1b3e:	f1 04       	cpc	r15, r1
    1b40:	c0 f0       	brcs	.+48     	; 0x1b72 <_Z13reduce_by_gcdPmS_+0xc6>
    1b42:	c3 01       	movw	r24, r6
    1b44:	b2 01       	movw	r22, r4
    1b46:	a7 01       	movw	r20, r14
    1b48:	96 01       	movw	r18, r12
    1b4a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1b4e:	28 83       	st	Y, r18
    1b50:	39 83       	std	Y+1, r19	; 0x01
    1b52:	4a 83       	std	Y+2, r20	; 0x02
    1b54:	5b 83       	std	Y+3, r21	; 0x03
    1b56:	f8 01       	movw	r30, r16
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	a7 01       	movw	r20, r14
    1b62:	96 01       	movw	r18, r12
    1b64:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	20 83       	st	Z, r18
    1b6c:	31 83       	std	Z+1, r19	; 0x01
    1b6e:	42 83       	std	Z+2, r20	; 0x02
    1b70:	53 83       	std	Z+3, r21	; 0x03
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	7f 90       	pop	r7
    1b8c:	6f 90       	pop	r6
    1b8e:	5f 90       	pop	r5
    1b90:	4f 90       	pop	r4
    1b92:	08 95       	ret

00001b94 <_Z8pll_calcmP13u_si5351_regs>:
    1b94:	8f 92       	push	r8
    1b96:	9f 92       	push	r9
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	28 97       	sbiw	r28, 0x08	; 8
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	8a 01       	movw	r16, r20
    1bb8:	80 90 1c 40 	lds	r8, 0x401C	; 0x80401c <_ZL9xtal_freq>
    1bbc:	90 90 1d 40 	lds	r9, 0x401D	; 0x80401d <_ZL9xtal_freq+0x1>
    1bc0:	a0 90 1e 40 	lds	r10, 0x401E	; 0x80401e <_ZL9xtal_freq+0x2>
    1bc4:	b0 90 1f 40 	lds	r11, 0x401F	; 0x80401f <_ZL9xtal_freq+0x3>
    1bc8:	a5 01       	movw	r20, r10
    1bca:	94 01       	movw	r18, r8
    1bcc:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1bd0:	69 01       	movw	r12, r18
    1bd2:	7a 01       	movw	r14, r20
    1bd4:	69 83       	std	Y+1, r22	; 0x01
    1bd6:	7a 83       	std	Y+2, r23	; 0x02
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8d 82       	std	Y+5, r8	; 0x05
    1bde:	9e 82       	std	Y+6, r9	; 0x06
    1be0:	af 82       	std	Y+7, r10	; 0x07
    1be2:	b8 86       	std	Y+8, r11	; 0x08
    1be4:	be 01       	movw	r22, r28
    1be6:	6b 5f       	subi	r22, 0xFB	; 251
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_Z13reduce_by_gcdPmS_>
    1bf2:	69 81       	ldd	r22, Y+1	; 0x01
    1bf4:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	66 0f       	add	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	8d 80       	ldd	r8, Y+5	; 0x05
    1c34:	9e 80       	ldd	r9, Y+6	; 0x06
    1c36:	af 80       	ldd	r10, Y+7	; 0x07
    1c38:	b8 84       	ldd	r11, Y+8	; 0x08
    1c3a:	a5 01       	movw	r20, r10
    1c3c:	94 01       	movw	r18, r8
    1c3e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1c42:	32 50       	subi	r19, 0x02	; 2
    1c44:	41 09       	sbc	r20, r1
    1c46:	51 09       	sbc	r21, r1
    1c48:	cc 0c       	add	r12, r12
    1c4a:	dd 1c       	adc	r13, r13
    1c4c:	ee 1c       	adc	r14, r14
    1c4e:	ff 1c       	adc	r15, r15
    1c50:	cc 0c       	add	r12, r12
    1c52:	dd 1c       	adc	r13, r13
    1c54:	ee 1c       	adc	r14, r14
    1c56:	ff 1c       	adc	r15, r15
    1c58:	cc 0c       	add	r12, r12
    1c5a:	dd 1c       	adc	r13, r13
    1c5c:	ee 1c       	adc	r14, r14
    1c5e:	ff 1c       	adc	r15, r15
    1c60:	cc 0c       	add	r12, r12
    1c62:	dd 1c       	adc	r13, r13
    1c64:	ee 1c       	adc	r14, r14
    1c66:	ff 1c       	adc	r15, r15
    1c68:	cc 0c       	add	r12, r12
    1c6a:	dd 1c       	adc	r13, r13
    1c6c:	ee 1c       	adc	r14, r14
    1c6e:	ff 1c       	adc	r15, r15
    1c70:	cc 0c       	add	r12, r12
    1c72:	dd 1c       	adc	r13, r13
    1c74:	ee 1c       	adc	r14, r14
    1c76:	ff 1c       	adc	r15, r15
    1c78:	cc 0c       	add	r12, r12
    1c7a:	dd 1c       	adc	r13, r13
    1c7c:	ee 1c       	adc	r14, r14
    1c7e:	ff 1c       	adc	r15, r15
    1c80:	c2 0e       	add	r12, r18
    1c82:	d3 1e       	adc	r13, r19
    1c84:	e4 1e       	adc	r14, r20
    1c86:	f5 1e       	adc	r15, r21
    1c88:	f8 01       	movw	r30, r16
    1c8a:	c0 82       	st	Z, r12
    1c8c:	d1 82       	std	Z+1, r13	; 0x01
    1c8e:	e2 82       	std	Z+2, r14	; 0x02
    1c90:	f3 82       	std	Z+3, r15	; 0x03
    1c92:	64 83       	std	Z+4, r22	; 0x04
    1c94:	75 83       	std	Z+5, r23	; 0x05
    1c96:	86 83       	std	Z+6, r24	; 0x06
    1c98:	97 83       	std	Z+7, r25	; 0x07
    1c9a:	80 86       	std	Z+8, r8	; 0x08
    1c9c:	91 86       	std	Z+9, r9	; 0x09
    1c9e:	a2 86       	std	Z+10, r10	; 0x0a
    1ca0:	b3 86       	std	Z+11, r11	; 0x0b
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	28 96       	adiw	r28, 0x08	; 8
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	08 95       	ret

00001cc4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    1cc4:	3f 92       	push	r3
    1cc6:	4f 92       	push	r4
    1cc8:	5f 92       	push	r5
    1cca:	6f 92       	push	r6
    1ccc:	7f 92       	push	r7
    1cce:	8f 92       	push	r8
    1cd0:	9f 92       	push	r9
    1cd2:	af 92       	push	r10
    1cd4:	bf 92       	push	r11
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	4b 01       	movw	r8, r22
    1ce8:	5c 01       	movw	r10, r24
    1cea:	ea 01       	movw	r28, r20
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	f9 01       	movw	r30, r18
    1cf0:	80 83       	st	Z, r24
    1cf2:	f0 e8       	ldi	r31, 0x80	; 128
    1cf4:	8f 16       	cp	r8, r31
    1cf6:	f1 ed       	ldi	r31, 0xD1	; 209
    1cf8:	9f 06       	cpc	r9, r31
    1cfa:	f0 ef       	ldi	r31, 0xF0	; 240
    1cfc:	af 06       	cpc	r10, r31
    1cfe:	f8 e0       	ldi	r31, 0x08	; 8
    1d00:	bf 06       	cpc	r11, r31
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x42>
    1d04:	87 c0       	rjmp	.+270    	; 0x1e14 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x150>
    1d06:	68 94       	set
    1d08:	33 24       	eor	r3, r3
    1d0a:	31 f8       	bld	r3, 1
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	79 ee       	ldi	r23, 0xE9	; 233
    1d10:	84 ea       	ldi	r24, 0xA4	; 164
    1d12:	95 e3       	ldi	r25, 0x35	; 53
    1d14:	0f 2e       	mov	r0, r31
    1d16:	41 2c       	mov	r4, r1
    1d18:	f9 ee       	ldi	r31, 0xE9	; 233
    1d1a:	5f 2e       	mov	r5, r31
    1d1c:	f4 ea       	ldi	r31, 0xA4	; 164
    1d1e:	6f 2e       	mov	r6, r31
    1d20:	f5 e3       	ldi	r31, 0x35	; 53
    1d22:	7f 2e       	mov	r7, r31
    1d24:	f0 2d       	mov	r31, r0
    1d26:	a5 01       	movw	r20, r10
    1d28:	94 01       	movw	r18, r8
    1d2a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1d2e:	69 01       	movw	r12, r18
    1d30:	7a 01       	movw	r14, r20
    1d32:	44 e0       	ldi	r20, 0x04	; 4
    1d34:	c4 16       	cp	r12, r20
    1d36:	d1 04       	cpc	r13, r1
    1d38:	e1 04       	cpc	r14, r1
    1d3a:	f1 04       	cpc	r15, r1
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x7c>
    1d3e:	79 c0       	rjmp	.+242    	; 0x1e32 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x16e>
    1d40:	a3 2d       	mov	r26, r3
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	a5 01       	movw	r20, r10
    1d46:	94 01       	movw	r18, r8
    1d48:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__muluhisi3>
    1d4c:	a3 01       	movw	r20, r6
    1d4e:	92 01       	movw	r18, r4
    1d50:	26 1b       	sub	r18, r22
    1d52:	37 0b       	sbc	r19, r23
    1d54:	48 0b       	sbc	r20, r24
    1d56:	59 0b       	sbc	r21, r25
    1d58:	ca 01       	movw	r24, r20
    1d5a:	b9 01       	movw	r22, r18
    1d5c:	33 94       	inc	r3
    1d5e:	33 94       	inc	r3
    1d60:	61 15       	cp	r22, r1
    1d62:	36 e4       	ldi	r19, 0x46	; 70
    1d64:	73 07       	cpc	r23, r19
    1d66:	33 ec       	ldi	r19, 0xC3	; 195
    1d68:	83 07       	cpc	r24, r19
    1d6a:	33 e2       	ldi	r19, 0x23	; 35
    1d6c:	93 07       	cpc	r25, r19
    1d6e:	d8 f6       	brcc	.-74     	; 0x1d26 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x62>
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	cb 01       	movw	r24, r22
    1d76:	c1 2c       	mov	r12, r1
    1d78:	d1 2c       	mov	r13, r1
    1d7a:	76 01       	movw	r14, r12
    1d7c:	21 e0       	ldi	r18, 0x01	; 1
    1d7e:	54 e0       	ldi	r21, 0x04	; 4
    1d80:	c5 16       	cp	r12, r21
    1d82:	d1 04       	cpc	r13, r1
    1d84:	e1 04       	cpc	r14, r1
    1d86:	f1 04       	cpc	r15, r1
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xc8>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	20 83       	st	Z, r18
    1d90:	cc 0c       	add	r12, r12
    1d92:	dd 1c       	adc	r13, r13
    1d94:	ee 1c       	adc	r14, r14
    1d96:	ff 1c       	adc	r15, r15
    1d98:	cc 0c       	add	r12, r12
    1d9a:	dd 1c       	adc	r13, r13
    1d9c:	ee 1c       	adc	r14, r14
    1d9e:	ff 1c       	adc	r15, r15
    1da0:	cc 0c       	add	r12, r12
    1da2:	dd 1c       	adc	r13, r13
    1da4:	ee 1c       	adc	r14, r14
    1da6:	ff 1c       	adc	r15, r15
    1da8:	cc 0c       	add	r12, r12
    1daa:	dd 1c       	adc	r13, r13
    1dac:	ee 1c       	adc	r14, r14
    1dae:	ff 1c       	adc	r15, r15
    1db0:	cc 0c       	add	r12, r12
    1db2:	dd 1c       	adc	r13, r13
    1db4:	ee 1c       	adc	r14, r14
    1db6:	ff 1c       	adc	r15, r15
    1db8:	cc 0c       	add	r12, r12
    1dba:	dd 1c       	adc	r13, r13
    1dbc:	ee 1c       	adc	r14, r14
    1dbe:	ff 1c       	adc	r15, r15
    1dc0:	cc 0c       	add	r12, r12
    1dc2:	dd 1c       	adc	r13, r13
    1dc4:	ee 1c       	adc	r14, r14
    1dc6:	ff 1c       	adc	r15, r15
    1dc8:	f2 e0       	ldi	r31, 0x02	; 2
    1dca:	df 1a       	sub	r13, r31
    1dcc:	e1 08       	sbc	r14, r1
    1dce:	f1 08       	sbc	r15, r1
    1dd0:	c8 82       	st	Y, r12
    1dd2:	d9 82       	std	Y+1, r13	; 0x01
    1dd4:	ea 82       	std	Y+2, r14	; 0x02
    1dd6:	fb 82       	std	Y+3, r15	; 0x03
    1dd8:	1c 82       	std	Y+4, r1	; 0x04
    1dda:	1d 82       	std	Y+5, r1	; 0x05
    1ddc:	1e 82       	std	Y+6, r1	; 0x06
    1dde:	1f 82       	std	Y+7, r1	; 0x07
    1de0:	01 e0       	ldi	r16, 0x01	; 1
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	08 87       	std	Y+8, r16	; 0x08
    1dea:	19 87       	std	Y+9, r17	; 0x09
    1dec:	2a 87       	std	Y+10, r18	; 0x0a
    1dee:	3b 87       	std	Y+11, r19	; 0x0b
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
    1e10:	3f 90       	pop	r3
    1e12:	08 95       	ret
    1e14:	c5 01       	movw	r24, r10
    1e16:	66 0f       	add	r22, r22
    1e18:	77 1f       	adc	r23, r23
    1e1a:	88 1f       	adc	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	66 0f       	add	r22, r22
    1e20:	77 1f       	adc	r23, r23
    1e22:	88 1f       	adc	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	c1 2c       	mov	r12, r1
    1e28:	d1 2c       	mov	r13, r1
    1e2a:	76 01       	movw	r14, r12
    1e2c:	68 94       	set
    1e2e:	c2 f8       	bld	r12, 2
    1e30:	a5 cf       	rjmp	.-182    	; 0x1d7c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xb8>
    1e32:	a5 01       	movw	r20, r10
    1e34:	94 01       	movw	r18, r8
    1e36:	c7 01       	movw	r24, r14
    1e38:	b6 01       	movw	r22, r12
    1e3a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__mulsi3>
    1e3e:	9e cf       	rjmp	.-196    	; 0x1d7c <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xb8>

00001e40 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    1e40:	2f 92       	push	r2
    1e42:	3f 92       	push	r3
    1e44:	4f 92       	push	r4
    1e46:	5f 92       	push	r5
    1e48:	6f 92       	push	r6
    1e4a:	7f 92       	push	r7
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	62 97       	sbiw	r28, 0x12	; 18
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	4b 01       	movw	r8, r22
    1e70:	5c 01       	movw	r10, r24
    1e72:	1a 01       	movw	r2, r20
    1e74:	2d 87       	std	Y+13, r18	; 0x0d
    1e76:	3e 87       	std	Y+14, r19	; 0x0e
    1e78:	80 91 11 41 	lds	r24, 0x4111	; 0x804111 <_ZL8freqVCOB>
    1e7c:	90 91 12 41 	lds	r25, 0x4112	; 0x804112 <_ZL8freqVCOB+0x1>
    1e80:	a0 91 13 41 	lds	r26, 0x4113	; 0x804113 <_ZL8freqVCOB+0x2>
    1e84:	b0 91 14 41 	lds	r27, 0x4114	; 0x804114 <_ZL8freqVCOB+0x3>
    1e88:	89 87       	std	Y+9, r24	; 0x09
    1e8a:	9a 87       	std	Y+10, r25	; 0x0a
    1e8c:	ab 87       	std	Y+11, r26	; 0x0b
    1e8e:	bc 87       	std	Y+12, r27	; 0x0c
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	a5 01       	movw	r20, r10
    1e96:	94 01       	movw	r18, r8
    1e98:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1e9c:	69 01       	movw	r12, r18
    1e9e:	7a 01       	movw	r14, r20
    1ea0:	cf 86       	std	Y+15, r12	; 0x0f
    1ea2:	d8 8a       	std	Y+16, r13	; 0x10
    1ea4:	e9 8a       	std	Y+17, r14	; 0x11
    1ea6:	fa 8a       	std	Y+18, r15	; 0x12
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	7a 83       	std	Y+2, r23	; 0x02
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8d 82       	std	Y+5, r8	; 0x05
    1eb2:	9e 82       	std	Y+6, r9	; 0x06
    1eb4:	af 82       	std	Y+7, r10	; 0x07
    1eb6:	b8 86       	std	Y+8, r11	; 0x08
    1eb8:	be 01       	movw	r22, r28
    1eba:	6b 5f       	subi	r22, 0xFB	; 251
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_Z13reduce_by_gcdPmS_>
    1ec6:	4d 80       	ldd	r4, Y+5	; 0x05
    1ec8:	5e 80       	ldd	r5, Y+6	; 0x06
    1eca:	6f 80       	ldd	r6, Y+7	; 0x07
    1ecc:	78 84       	ldd	r7, Y+8	; 0x08
    1ece:	89 80       	ldd	r8, Y+1	; 0x01
    1ed0:	9a 80       	ldd	r9, Y+2	; 0x02
    1ed2:	ab 80       	ldd	r10, Y+3	; 0x03
    1ed4:	bc 80       	ldd	r11, Y+4	; 0x04
    1ed6:	a3 01       	movw	r20, r6
    1ed8:	92 01       	movw	r18, r4
    1eda:	c7 01       	movw	r24, r14
    1edc:	b6 01       	movw	r22, r12
    1ede:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__mulsi3>
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	28 0d       	add	r18, r8
    1ee8:	39 1d       	adc	r19, r9
    1eea:	4a 1d       	adc	r20, r10
    1eec:	5b 1d       	adc	r21, r11
    1eee:	69 85       	ldd	r22, Y+9	; 0x09
    1ef0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ef6:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1efa:	c3 01       	movw	r24, r6
    1efc:	b2 01       	movw	r22, r4
    1efe:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__mulsi3>
    1f02:	69 87       	std	Y+9, r22	; 0x09
    1f04:	7a 87       	std	Y+10, r23	; 0x0a
    1f06:	8b 87       	std	Y+11, r24	; 0x0b
    1f08:	9c 87       	std	Y+12, r25	; 0x0c
    1f0a:	81 14       	cp	r8, r1
    1f0c:	91 04       	cpc	r9, r1
    1f0e:	a1 04       	cpc	r10, r1
    1f10:	b1 04       	cpc	r11, r1
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xd8>
    1f14:	c0 fe       	sbrs	r12, 0
    1f16:	71 c0       	rjmp	.+226    	; 0x1ffa <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x1ba>
    1f18:	ad 85       	ldd	r26, Y+13	; 0x0d
    1f1a:	be 85       	ldd	r27, Y+14	; 0x0e
    1f1c:	1c 92       	st	X, r1
    1f1e:	d8 01       	movw	r26, r16
    1f20:	1c 92       	st	X, r1
    1f22:	88 0c       	add	r8, r8
    1f24:	99 1c       	adc	r9, r9
    1f26:	aa 1c       	adc	r10, r10
    1f28:	bb 1c       	adc	r11, r11
    1f2a:	88 0c       	add	r8, r8
    1f2c:	99 1c       	adc	r9, r9
    1f2e:	aa 1c       	adc	r10, r10
    1f30:	bb 1c       	adc	r11, r11
    1f32:	c5 01       	movw	r24, r10
    1f34:	b4 01       	movw	r22, r8
    1f36:	66 0f       	add	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	66 0f       	add	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	66 0f       	add	r22, r22
    1f50:	77 1f       	adc	r23, r23
    1f52:	88 1f       	adc	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	66 0f       	add	r22, r22
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	a3 01       	movw	r20, r6
    1f60:	92 01       	movw	r18, r4
    1f62:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    1f66:	32 50       	subi	r19, 0x02	; 2
    1f68:	41 09       	sbc	r20, r1
    1f6a:	51 09       	sbc	r21, r1
    1f6c:	cc 0c       	add	r12, r12
    1f6e:	dd 1c       	adc	r13, r13
    1f70:	ee 1c       	adc	r14, r14
    1f72:	ff 1c       	adc	r15, r15
    1f74:	cc 0c       	add	r12, r12
    1f76:	dd 1c       	adc	r13, r13
    1f78:	ee 1c       	adc	r14, r14
    1f7a:	ff 1c       	adc	r15, r15
    1f7c:	cc 0c       	add	r12, r12
    1f7e:	dd 1c       	adc	r13, r13
    1f80:	ee 1c       	adc	r14, r14
    1f82:	ff 1c       	adc	r15, r15
    1f84:	cc 0c       	add	r12, r12
    1f86:	dd 1c       	adc	r13, r13
    1f88:	ee 1c       	adc	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	cc 0c       	add	r12, r12
    1f8e:	dd 1c       	adc	r13, r13
    1f90:	ee 1c       	adc	r14, r14
    1f92:	ff 1c       	adc	r15, r15
    1f94:	cc 0c       	add	r12, r12
    1f96:	dd 1c       	adc	r13, r13
    1f98:	ee 1c       	adc	r14, r14
    1f9a:	ff 1c       	adc	r15, r15
    1f9c:	cc 0c       	add	r12, r12
    1f9e:	dd 1c       	adc	r13, r13
    1fa0:	ee 1c       	adc	r14, r14
    1fa2:	ff 1c       	adc	r15, r15
    1fa4:	c2 0e       	add	r12, r18
    1fa6:	d3 1e       	adc	r13, r19
    1fa8:	e4 1e       	adc	r14, r20
    1faa:	f5 1e       	adc	r15, r21
    1fac:	f1 01       	movw	r30, r2
    1fae:	c0 82       	st	Z, r12
    1fb0:	d1 82       	std	Z+1, r13	; 0x01
    1fb2:	e2 82       	std	Z+2, r14	; 0x02
    1fb4:	f3 82       	std	Z+3, r15	; 0x03
    1fb6:	64 83       	std	Z+4, r22	; 0x04
    1fb8:	75 83       	std	Z+5, r23	; 0x05
    1fba:	86 83       	std	Z+6, r24	; 0x06
    1fbc:	97 83       	std	Z+7, r25	; 0x07
    1fbe:	40 86       	std	Z+8, r4	; 0x08
    1fc0:	51 86       	std	Z+9, r5	; 0x09
    1fc2:	62 86       	std	Z+10, r6	; 0x0a
    1fc4:	73 86       	std	Z+11, r7	; 0x0b
    1fc6:	69 85       	ldd	r22, Y+9	; 0x09
    1fc8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fce:	62 96       	adiw	r28, 0x12	; 18
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	bf 90       	pop	r11
    1fe6:	af 90       	pop	r10
    1fe8:	9f 90       	pop	r9
    1fea:	8f 90       	pop	r8
    1fec:	7f 90       	pop	r7
    1fee:	6f 90       	pop	r6
    1ff0:	5f 90       	pop	r5
    1ff2:	4f 90       	pop	r4
    1ff4:	3f 90       	pop	r3
    1ff6:	2f 90       	pop	r2
    1ff8:	08 95       	ret
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ffe:	be 85       	ldd	r27, Y+14	; 0x0e
    2000:	8c 93       	st	X, r24
    2002:	8f 85       	ldd	r24, Y+15	; 0x0f
    2004:	98 89       	ldd	r25, Y+16	; 0x10
    2006:	a9 89       	ldd	r26, Y+17	; 0x11
    2008:	ba 89       	ldd	r27, Y+18	; 0x12
    200a:	04 97       	sbiw	r24, 0x04	; 4
    200c:	a1 05       	cpc	r26, r1
    200e:	b1 05       	cpc	r27, r1
    2010:	09 f0       	breq	.+2      	; 0x2014 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x1d4>
    2012:	85 cf       	rjmp	.-246    	; 0x1f1e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xde>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	d8 01       	movw	r26, r16
    2018:	8c 93       	st	X, r24
    201a:	f1 01       	movw	r30, r2
    201c:	10 82       	st	Z, r1
    201e:	11 82       	std	Z+1, r1	; 0x01
    2020:	12 82       	std	Z+2, r1	; 0x02
    2022:	13 82       	std	Z+3, r1	; 0x03
    2024:	14 82       	std	Z+4, r1	; 0x04
    2026:	15 82       	std	Z+5, r1	; 0x05
    2028:	16 82       	std	Z+6, r1	; 0x06
    202a:	17 82       	std	Z+7, r1	; 0x07
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	80 87       	std	Z+8, r24	; 0x08
    2036:	91 87       	std	Z+9, r25	; 0x09
    2038:	a2 87       	std	Z+10, r26	; 0x0a
    203a:	b3 87       	std	Z+11, r27	; 0x0b
    203c:	c4 cf       	rjmp	.-120    	; 0x1fc6 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x186>

0000203e <_Z17si5351_write_bulkhPhh>:
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	f8 2e       	mov	r15, r24
    204a:	8b 01       	movw	r16, r22
    204c:	d4 2f       	mov	r29, r20
    204e:	c5 e0       	ldi	r28, 0x05	; 5
    2050:	2d 2f       	mov	r18, r29
    2052:	a8 01       	movw	r20, r16
    2054:	6f 2d       	mov	r22, r15
    2056:	80 ec       	ldi	r24, 0xC0	; 192
    2058:	0e 94 b3 08 	call	0x1166	; 0x1166 <I2C_0_SendData>
    205c:	8d 17       	cp	r24, r29
    205e:	49 f0       	breq	.+18     	; 0x2072 <_Z17si5351_write_bulkhPhh+0x34>
    2060:	c1 50       	subi	r28, 0x01	; 1
    2062:	b1 f7       	brne	.-20     	; 0x2050 <_Z17si5351_write_bulkhPhh+0x12>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	08 95       	ret
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	f8 cf       	rjmp	.-16     	; 0x2066 <_Z17si5351_write_bulkhPhh+0x28>

00002076 <_Z16si5351_set_phase12si5351_clockh>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	00 d0       	rcall	.+0      	; 0x207c <_Z16si5351_set_phase12si5351_clockh+0x6>
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	6f 77       	andi	r22, 0x7F	; 127
    2082:	69 83       	std	Y+1, r22	; 0x01
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	be 01       	movw	r22, r28
    2088:	6f 5f       	subi	r22, 0xFF	; 255
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	80 5f       	subi	r24, 0xF0	; 240
    208e:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2092:	81 11       	cpse	r24, r1
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <_Z16si5351_set_phase12si5351_clockh+0x2e>
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret
    20a4:	8b ef       	ldi	r24, 0xFB	; 251
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	f8 cf       	rjmp	.-16     	; 0x209a <_Z16si5351_set_phase12si5351_clockh+0x24>

000020aa <_Z7set_pllm10si5351_pll>:
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	66 97       	sbiw	r28, 0x16	; 22
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	8a 01       	movw	r16, r20
    20be:	ae 01       	movw	r20, r28
    20c0:	4f 5f       	subi	r20, 0xFF	; 255
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_Z8pll_calcmP13u_si5351_regs>
    20c8:	81 11       	cpse	r24, r1
    20ca:	20 c0       	rjmp	.+64     	; 0x210c <_Z7set_pllm10si5351_pll+0x62>
    20cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ce:	8d 87       	std	Y+13, r24	; 0x0d
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	8e 87       	std	Y+14, r24	; 0x0e
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	83 70       	andi	r24, 0x03	; 3
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	88 8b       	std	Y+16, r24	; 0x10
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	89 8b       	std	Y+17, r24	; 0x11
    20e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e4:	82 95       	swap	r24
    20e6:	80 7f       	andi	r24, 0xF0	; 240
    20e8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ea:	9f 70       	andi	r25, 0x0F	; 15
    20ec:	89 0f       	add	r24, r25
    20ee:	8a 8b       	std	Y+18, r24	; 0x12
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	8c 8b       	std	Y+20, r24	; 0x14
    20f8:	01 30       	cpi	r16, 0x01	; 1
    20fa:	11 05       	cpc	r17, r1
    20fc:	79 f0       	breq	.+30     	; 0x211c <_Z7set_pllm10si5351_pll+0x72>
    20fe:	48 e0       	ldi	r20, 0x08	; 8
    2100:	be 01       	movw	r22, r28
    2102:	63 5f       	subi	r22, 0xF3	; 243
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	82 e2       	ldi	r24, 0x22	; 34
    2108:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    210c:	66 96       	adiw	r28, 0x16	; 22
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret
    211c:	48 e0       	ldi	r20, 0x08	; 8
    211e:	be 01       	movw	r22, r28
    2120:	63 5f       	subi	r22, 0xF3	; 243
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	8a e1       	ldi	r24, 0x1A	; 26
    2126:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    212a:	f0 cf       	rjmp	.-32     	; 0x210c <_Z7set_pllm10si5351_pll+0x62>

0000212c <_Z16si5351_read_bulkhPhh>:
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	f8 2e       	mov	r15, r24
    2138:	8b 01       	movw	r16, r22
    213a:	d4 2f       	mov	r29, r20
    213c:	c5 e0       	ldi	r28, 0x05	; 5
    213e:	2d 2f       	mov	r18, r29
    2140:	a8 01       	movw	r20, r16
    2142:	6f 2d       	mov	r22, r15
    2144:	80 ec       	ldi	r24, 0xC0	; 192
    2146:	0e 94 f7 08 	call	0x11ee	; 0x11ee <I2C_0_GetData>
    214a:	8d 17       	cp	r24, r29
    214c:	49 f0       	breq	.+18     	; 0x2160 <_Z16si5351_read_bulkhPhh+0x34>
    214e:	c1 50       	subi	r28, 0x01	; 1
    2150:	b1 f7       	brne	.-20     	; 0x213e <_Z16si5351_read_bulkhPhh+0x12>
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	ff 90       	pop	r15
    215e:	08 95       	ret
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	f8 cf       	rjmp	.-16     	; 0x2154 <_Z16si5351_read_bulkhPhh+0x28>

00002164 <si5351_init>:
    2164:	cf 92       	push	r12
    2166:	df 92       	push	r13
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	00 d0       	rcall	.+0      	; 0x2174 <si5351_init+0x10>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	18 2f       	mov	r17, r24
    217a:	6a 01       	movw	r12, r20
    217c:	7b 01       	movw	r14, r22
    217e:	0e 94 a1 08 	call	0x1142	; 0x1142 <I2C_0_Init>
    2182:	10 92 11 41 	sts	0x4111, r1	; 0x804111 <_ZL8freqVCOB>
    2186:	10 92 12 41 	sts	0x4112, r1	; 0x804112 <_ZL8freqVCOB+0x1>
    218a:	10 92 13 41 	sts	0x4113, r1	; 0x804113 <_ZL8freqVCOB+0x2>
    218e:	10 92 14 41 	sts	0x4114, r1	; 0x804114 <_ZL8freqVCOB+0x3>
    2192:	80 e4       	ldi	r24, 0x40	; 64
    2194:	98 e7       	ldi	r25, 0x78	; 120
    2196:	ad e7       	ldi	r26, 0x7D	; 125
    2198:	b1 e0       	ldi	r27, 0x01	; 1
    219a:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <_ZL9xtal_freq>
    219e:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZL9xtal_freq+0x1>
    21a2:	a0 93 1e 40 	sts	0x401E, r26	; 0x80401e <_ZL9xtal_freq+0x2>
    21a6:	b0 93 1f 40 	sts	0x401F, r27	; 0x80401f <_ZL9xtal_freq+0x3>
    21aa:	10 92 10 41 	sts	0x4110, r1	; 0x804110 <_ZL17enabledClocksMask>
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	be 01       	movw	r22, r28
    21b6:	6f 5f       	subi	r22, 0xFF	; 255
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    21c0:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    21c4:	88 23       	and	r24, r24
    21c6:	51 f0       	breq	.+20     	; 0x21dc <si5351_init+0x78>
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	df 90       	pop	r13
    21d8:	cf 90       	pop	r12
    21da:	08 95       	ret
    21dc:	8c ec       	ldi	r24, 0xCC	; 204
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	be 01       	movw	r22, r28
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	80 e1       	ldi	r24, 0x10	; 16
    21ea:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    21ee:	90 91 02 41 	lds	r25, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    21f2:	89 2b       	or	r24, r25
    21f4:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	be 01       	movw	r22, r28
    21fc:	6f 5f       	subi	r22, 0xFF	; 255
    21fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2200:	81 e1       	ldi	r24, 0x11	; 17
    2202:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2206:	90 91 02 41 	lds	r25, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    220a:	89 2b       	or	r24, r25
    220c:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	be 01       	movw	r22, r28
    2214:	6f 5f       	subi	r22, 0xFF	; 255
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	82 e1       	ldi	r24, 0x12	; 18
    221a:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    221e:	90 91 02 41 	lds	r25, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    2222:	89 2b       	or	r24, r25
    2224:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    2228:	12 61       	ori	r17, 0x12	; 18
    222a:	19 83       	std	Y+1, r17	; 0x01
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	be 01       	movw	r22, r28
    2230:	6f 5f       	subi	r22, 0xFF	; 255
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	87 eb       	ldi	r24, 0xB7	; 183
    2236:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    223a:	90 91 02 41 	lds	r25, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    223e:	89 2b       	or	r24, r25
    2240:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    2244:	c1 14       	cp	r12, r1
    2246:	d1 04       	cpc	r13, r1
    2248:	e1 04       	cpc	r14, r1
    224a:	f1 04       	cpc	r15, r1
    224c:	51 f4       	brne	.+20     	; 0x2262 <si5351_init+0xfe>
    224e:	0f 2e       	mov	r0, r31
    2250:	f0 e4       	ldi	r31, 0x40	; 64
    2252:	cf 2e       	mov	r12, r31
    2254:	f8 e7       	ldi	r31, 0x78	; 120
    2256:	df 2e       	mov	r13, r31
    2258:	fd e7       	ldi	r31, 0x7D	; 125
    225a:	ef 2e       	mov	r14, r31
    225c:	ff 24       	eor	r15, r15
    225e:	f3 94       	inc	r15
    2260:	f0 2d       	mov	r31, r0
    2262:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <_ZL9xtal_freq>
    2266:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZL9xtal_freq+0x1>
    226a:	a0 91 1e 40 	lds	r26, 0x401E	; 0x80401e <_ZL9xtal_freq+0x2>
    226e:	b0 91 1f 40 	lds	r27, 0x401F	; 0x80401f <_ZL9xtal_freq+0x3>
    2272:	8c 15       	cp	r24, r12
    2274:	9d 05       	cpc	r25, r13
    2276:	ae 05       	cpc	r26, r14
    2278:	bf 05       	cpc	r27, r15
    227a:	39 f4       	brne	.+14     	; 0x228a <si5351_init+0x126>
    227c:	80 91 02 41 	lds	r24, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	98 27       	eor	r25, r24
    2284:	90 93 03 41 	sts	0x4103, r25	; 0x804103 <g_si5351_initialized>
    2288:	9f cf       	rjmp	.-194    	; 0x21c8 <si5351_init+0x64>
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	be 01       	movw	r22, r28
    228e:	6f 5f       	subi	r22, 0xFF	; 255
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	8f e0       	ldi	r24, 0x0F	; 15
    2294:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    2298:	81 11       	cpse	r24, r1
    229a:	96 cf       	rjmp	.-212    	; 0x21c8 <si5351_init+0x64>
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	c0 92 1c 40 	sts	0x401C, r12	; 0x80401c <_ZL9xtal_freq>
    22a2:	d0 92 1d 40 	sts	0x401D, r13	; 0x80401d <_ZL9xtal_freq+0x1>
    22a6:	e0 92 1e 40 	sts	0x401E, r14	; 0x80401e <_ZL9xtal_freq+0x2>
    22aa:	f0 92 1f 40 	sts	0x401F, r15	; 0x80401f <_ZL9xtal_freq+0x3>
    22ae:	8f 73       	andi	r24, 0x3F	; 63
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	be 01       	movw	r22, r28
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f e0       	ldi	r24, 0x0F	; 15
    22bc:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    22c0:	90 91 02 41 	lds	r25, 0x4102	; 0x804102 <_ZZ11si5351_initE3err>
    22c4:	89 2b       	or	r24, r25
    22c6:	80 93 02 41 	sts	0x4102, r24	; 0x804102 <_ZZ11si5351_initE3err>
    22ca:	d8 cf       	rjmp	.-80     	; 0x227c <si5351_init+0x118>

000022cc <si5351_clock_enable>:
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <si5351_clock_enable+0xa>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	18 2f       	mov	r17, r24
    22dc:	06 2f       	mov	r16, r22
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	be 01       	movw	r22, r28
    22e2:	6f 5f       	subi	r22, 0xFF	; 255
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    22ec:	81 11       	cpse	r24, r1
    22ee:	28 c0       	rjmp	.+80     	; 0x2340 <si5351_clock_enable+0x74>
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	00 23       	and	r16, r16
    22f4:	e1 f0       	breq	.+56     	; 0x232e <si5351_clock_enable+0x62>
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <si5351_clock_enable+0x34>
    22fc:	22 0f       	add	r18, r18
    22fe:	33 1f       	adc	r19, r19
    2300:	1a 95       	dec	r17
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <si5351_clock_enable+0x30>
    2304:	20 95       	com	r18
    2306:	82 23       	and	r24, r18
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	be 01       	movw	r22, r28
    230e:	6f 5f       	subi	r22, 0xFF	; 255
    2310:	7f 4f       	sbci	r23, 0xFF	; 255
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2318:	81 11       	cpse	r24, r1
    231a:	15 c0       	rjmp	.+42     	; 0x2346 <si5351_clock_enable+0x7a>
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	08 95       	ret
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <si5351_clock_enable+0x6c>
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	1a 95       	dec	r17
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <si5351_clock_enable+0x68>
    233c:	82 2b       	or	r24, r18
    233e:	e4 cf       	rjmp	.-56     	; 0x2308 <si5351_clock_enable+0x3c>
    2340:	8c ef       	ldi	r24, 0xFC	; 252
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	ed cf       	rjmp	.-38     	; 0x2320 <si5351_clock_enable+0x54>
    2346:	8c ef       	ldi	r24, 0xFC	; 252
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	ea cf       	rjmp	.-44     	; 0x2320 <si5351_clock_enable+0x54>

0000234c <si5351_drive_strength>:
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	00 d0       	rcall	.+0      	; 0x2358 <si5351_drive_strength+0xc>
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	8b 01       	movw	r16, r22
    235e:	68 94       	set
    2360:	ff 24       	eor	r15, r15
    2362:	f4 f8       	bld	r15, 4
    2364:	f8 0e       	add	r15, r24
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	be 01       	movw	r22, r28
    236a:	6f 5f       	subi	r22, 0xFF	; 255
    236c:	7f 4f       	sbci	r23, 0xFF	; 255
    236e:	8f 2d       	mov	r24, r15
    2370:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    2374:	81 11       	cpse	r24, r1
    2376:	29 c0       	rjmp	.+82     	; 0x23ca <si5351_drive_strength+0x7e>
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	01 30       	cpi	r16, 0x01	; 1
    237c:	11 05       	cpc	r17, r1
    237e:	e9 f0       	breq	.+58     	; 0x23ba <si5351_drive_strength+0x6e>
    2380:	d0 f0       	brcs	.+52     	; 0x23b6 <si5351_drive_strength+0x6a>
    2382:	02 30       	cpi	r16, 0x02	; 2
    2384:	11 05       	cpc	r17, r1
    2386:	e1 f0       	breq	.+56     	; 0x23c0 <si5351_drive_strength+0x74>
    2388:	03 30       	cpi	r16, 0x03	; 3
    238a:	11 05       	cpc	r17, r1
    238c:	e1 f0       	breq	.+56     	; 0x23c6 <si5351_drive_strength+0x7a>
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	be 01       	movw	r22, r28
    2394:	6f 5f       	subi	r22, 0xFF	; 255
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	8f 2d       	mov	r24, r15
    239a:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    239e:	81 11       	cpse	r24, r1
    23a0:	17 c0       	rjmp	.+46     	; 0x23d0 <si5351_drive_strength+0x84>
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	08 95       	ret
    23b6:	8c 7f       	andi	r24, 0xFC	; 252
    23b8:	ea cf       	rjmp	.-44     	; 0x238e <si5351_drive_strength+0x42>
    23ba:	8c 7f       	andi	r24, 0xFC	; 252
    23bc:	81 60       	ori	r24, 0x01	; 1
    23be:	e7 cf       	rjmp	.-50     	; 0x238e <si5351_drive_strength+0x42>
    23c0:	8c 7f       	andi	r24, 0xFC	; 252
    23c2:	82 60       	ori	r24, 0x02	; 2
    23c4:	e4 cf       	rjmp	.-56     	; 0x238e <si5351_drive_strength+0x42>
    23c6:	83 60       	ori	r24, 0x03	; 3
    23c8:	e2 cf       	rjmp	.-60     	; 0x238e <si5351_drive_strength+0x42>
    23ca:	8b ef       	ldi	r24, 0xFB	; 251
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	eb cf       	rjmp	.-42     	; 0x23a6 <si5351_drive_strength+0x5a>
    23d0:	8b ef       	ldi	r24, 0xFB	; 251
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	e8 cf       	rjmp	.-48     	; 0x23a6 <si5351_drive_strength+0x5a>

000023d6 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xc>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	7b 01       	movw	r14, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    23e8:	10 e1       	ldi	r17, 0x10	; 16
    23ea:	18 0f       	add	r17, r24
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	be 01       	movw	r22, r28
    23f0:	6f 5f       	subi	r22, 0xFF	; 255
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255
    23f4:	81 2f       	mov	r24, r17
    23f6:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    23fa:	81 11       	cpse	r24, r1
    23fc:	11 c0       	rjmp	.+34     	; 0x2420 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4a>
		{
			return(true);
		}
		
		reg_val = data[0];
    23fe:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	e9 16       	cp	r14, r25
    2404:	f1 04       	cpc	r15, r1
    2406:	a1 f0       	breq	.+40     	; 0x2430 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x5a>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
		}
		else if(pll == SI5351_PLLB)
    2408:	92 e0       	ldi	r25, 0x02	; 2
    240a:	e9 16       	cp	r14, r25
    240c:	f1 04       	cpc	r15, r1
    240e:	91 f0       	breq	.+36     	; 0x2434 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x5e>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
		}

		data[0] = reg_val;
    2410:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	be 01       	movw	r22, r28
    2416:	6f 5f       	subi	r22, 0xFF	; 255
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	81 2f       	mov	r24, r17
    241c:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret
		
		reg_val = data[0];

		if(pll == SI5351_PLLA)
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    2430:	8f 7d       	andi	r24, 0xDF	; 223
    2432:	ee cf       	rjmp	.-36     	; 0x2410 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x3a>
		}
		else if(pll == SI5351_PLLB)
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    2434:	80 62       	ori	r24, 0x20	; 32
    2436:	ec cf       	rjmp	.-40     	; 0x2410 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x3a>

00002438 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <_Z16set_integer_mode12si5351_clockb+0xa>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    2448:	10 e1       	ldi	r17, 0x10	; 16
    244a:	18 0f       	add	r17, r24
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	be 01       	movw	r22, r28
    2450:	6f 5f       	subi	r22, 0xFF	; 255
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	81 2f       	mov	r24, r17
    2456:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    245a:	81 11       	cpse	r24, r1
    245c:	0c c0       	rjmp	.+24     	; 0x2476 <_Z16set_integer_mode12si5351_clockb+0x3e>
		{
			return(true);
		}
		
		reg_val = data[0];
    245e:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    2460:	00 23       	and	r16, r16
    2462:	81 f0       	breq	.+32     	; 0x2484 <_Z16set_integer_mode12si5351_clockb+0x4c>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    2464:	80 64       	ori	r24, 0x40	; 64
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
		}

		data[0] = reg_val;
    2466:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	be 01       	movw	r22, r28
    246c:	6f 5f       	subi	r22, 0xFF	; 255
    246e:	7f 4f       	sbci	r23, 0xFF	; 255
    2470:	81 2f       	mov	r24, r17
    2472:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
	}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	08 95       	ret
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    2484:	8f 7b       	andi	r24, 0xBF	; 191
    2486:	ef cf       	rjmp	.-34     	; 0x2466 <_Z16set_integer_mode12si5351_clockb+0x2e>

00002488 <_Z6ms_div12si5351_clockhb>:
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
	}


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    2488:	ff 92       	push	r15
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	00 d0       	rcall	.+0      	; 0x2494 <_Z6ms_div12si5351_clockhb+0xc>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	91 05       	cpc	r25, r1
    249c:	29 f0       	breq	.+10     	; 0x24a8 <_Z6ms_div12si5351_clockhb+0x20>
    249e:	88 f1       	brcs	.+98     	; 0x2502 <_Z6ms_div12si5351_clockhb+0x7a>
    24a0:	02 97       	sbiw	r24, 0x02	; 2
    24a2:	51 f1       	breq	.+84     	; 0x24f8 <_Z6ms_div12si5351_clockhb+0x70>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	20 c0       	rjmp	.+64     	; 0x24e8 <_Z6ms_div12si5351_clockhb+0x60>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    24a8:	0f 2e       	mov	r0, r31
    24aa:	f4 e3       	ldi	r31, 0x34	; 52
    24ac:	ff 2e       	mov	r15, r31
    24ae:	f0 2d       	mov	r31, r0
    24b0:	04 2f       	mov	r16, r20
    24b2:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	be 01       	movw	r22, r28
    24b8:	6f 5f       	subi	r22, 0xFF	; 255
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 2d       	mov	r24, r15
    24be:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    24c2:	81 11       	cpse	r24, r1
    24c4:	11 c0       	rjmp	.+34     	; 0x24e8 <_Z6ms_div12si5351_clockhb+0x60>
		{
			return(true);
		}
		
		reg_val = data[0];
    24c6:	89 81       	ldd	r24, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    24c8:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    24ca:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    24cc:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    24ce:	90 e1       	ldi	r25, 0x10	; 16
    24d0:	19 9f       	mul	r17, r25
    24d2:	b0 01       	movw	r22, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	68 2b       	or	r22, r24

		data[0] = reg_val;
    24d8:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	be 01       	movw	r22, r28
    24de:	6f 5f       	subi	r22, 0xFF	; 255
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	8f 2d       	mov	r24, r15
    24e4:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
	}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	08 95       	ret
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    24f8:	0f 2e       	mov	r0, r31
    24fa:	fc e3       	ldi	r31, 0x3C	; 60
    24fc:	ff 2e       	mov	r15, r31
    24fe:	f0 2d       	mov	r31, r0
			}
			break;
    2500:	d7 cf       	rjmp	.-82     	; 0x24b0 <_Z6ms_div12si5351_clockhb+0x28>

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    2502:	0f 2e       	mov	r0, r31
    2504:	fc e2       	ldi	r31, 0x2C	; 44
    2506:	ff 2e       	mov	r15, r31
    2508:	f0 2d       	mov	r31, r0
    250a:	d2 cf       	rjmp	.-92     	; 0x24b0 <_Z6ms_div12si5351_clockhb+0x28>

0000250c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    250c:	6f 92       	push	r6
    250e:	7f 92       	push	r7
    2510:	8f 92       	push	r8
    2512:	af 92       	push	r10
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	69 97       	sbiw	r28, 0x19	; 25
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	3c 01       	movw	r6, r24
    2530:	ce 86       	std	Y+14, r12	; 0x0e
    2532:	df 86       	std	Y+15, r13	; 0x0f
    2534:	e8 8a       	std	Y+16, r14	; 0x10
    2536:	0a 8b       	std	Y+18, r16	; 0x12
    2538:	1b 8b       	std	Y+19, r17	; 0x13
    253a:	2c 8b       	std	Y+20, r18	; 0x14
    253c:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    253e:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    2540:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    2542:	88 0f       	add	r24, r24
    2544:	88 0f       	add	r24, r24
    2546:	88 0f       	add	r24, r24
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	be 01       	movw	r22, r28
    254c:	64 5f       	subi	r22, 0xF4	; 244
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	84 5d       	subi	r24, 0xD4	; 212
    2552:	0e 94 96 10 	call	0x212c	; 0x212c <_Z16si5351_read_bulkhPhh>
    2556:	81 11       	cpse	r24, r1
    2558:	24 c0       	rjmp	.+72     	; 0x25a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
		{
			return(true);
		}
		
		reg_val = data[0];
    255a:	9c 85       	ldd	r25, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    255c:	88 89       	ldd	r24, Y+16	; 0x10
    255e:	83 70       	andi	r24, 0x03	; 3
			return(true);
		}
		
		reg_val = data[0];

		reg_val &= 0xFC;    /*~(0x03); */
    2560:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    2562:	89 2b       	or	r24, r25
    2564:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    2566:	8f 85       	ldd	r24, Y+15	; 0x0f
    2568:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    256a:	8e 85       	ldd	r24, Y+14	; 0x0e
    256c:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    256e:	88 8d       	ldd	r24, Y+24	; 0x18
    2570:	82 95       	swap	r24
    2572:	80 7f       	andi	r24, 0xF0	; 240
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    2574:	9c 89       	ldd	r25, Y+20	; 0x14
    2576:	9f 70       	andi	r25, 0x0F	; 15
    2578:	89 0f       	add	r24, r25
    257a:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    257c:	8b 89       	ldd	r24, Y+19	; 0x13
    257e:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    2580:	8a 89       	ldd	r24, Y+18	; 0x12
    2582:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	68 16       	cp	r6, r24
    2588:	71 04       	cpc	r7, r1
    258a:	29 f1       	breq	.+74     	; 0x25d6 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xca>
    258c:	d0 f0       	brcs	.+52     	; 0x25c2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb6>
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	68 16       	cp	r6, r24
    2592:	71 04       	cpc	r7, r1
    2594:	51 f1       	breq	.+84     	; 0x25ea <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xde>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    2596:	6a 2d       	mov	r22, r10
    2598:	c3 01       	movw	r24, r6
    259a:	0e 94 1c 12 	call	0x2438	; 0x2438 <_Z16set_integer_mode12si5351_clockb>
    259e:	88 23       	and	r24, r24
    25a0:	71 f1       	breq	.+92     	; 0x25fe <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xf2>
		{
			return(true);
		}
		
		return(false);
	}
    25a2:	69 96       	adiw	r28, 0x19	; 25
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
    25b8:	af 90       	pop	r10
    25ba:	8f 90       	pop	r8
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	08 95       	ret
		/* Write the parameters */
		switch(clk)
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    25c2:	48 e0       	ldi	r20, 0x08	; 8
    25c4:	be 01       	movw	r22, r28
    25c6:	6f 5f       	subi	r22, 0xFF	; 255
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8a e2       	ldi	r24, 0x2A	; 42
    25cc:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    25d0:	88 23       	and	r24, r24
    25d2:	09 f3       	breq	.-62     	; 0x2596 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    25d4:	e6 cf       	rjmp	.-52     	; 0x25a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    25d6:	48 e0       	ldi	r20, 0x08	; 8
    25d8:	be 01       	movw	r22, r28
    25da:	6f 5f       	subi	r22, 0xFF	; 255
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	82 e3       	ldi	r24, 0x32	; 50
    25e0:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    25e4:	88 23       	and	r24, r24
    25e6:	b9 f2       	breq	.-82     	; 0x2596 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    25e8:	dc cf       	rjmp	.-72     	; 0x25a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    25ea:	48 e0       	ldi	r20, 0x08	; 8
    25ec:	be 01       	movw	r22, r28
    25ee:	6f 5f       	subi	r22, 0xFF	; 255
    25f0:	7f 4f       	sbci	r23, 0xFF	; 255
    25f2:	8a e3       	ldi	r24, 0x3A	; 58
    25f4:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    25f8:	88 23       	and	r24, r24
    25fa:	69 f2       	breq	.-102    	; 0x2596 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    25fc:	d2 cf       	rjmp	.-92     	; 0x25a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>
		if(set_integer_mode(clk, int_mode))
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    25fe:	48 a5       	ldd	r20, Y+40	; 0x28
    2600:	68 2d       	mov	r22, r8
    2602:	c3 01       	movw	r24, r6
    2604:	0e 94 44 12 	call	0x2488	; 0x2488 <_Z6ms_div12si5351_clockhb>
    2608:	cc cf       	rjmp	.-104    	; 0x25a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x96>

0000260a <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff, uint8_t phase)
	{
    260a:	4f 92       	push	r4
    260c:	5f 92       	push	r5
    260e:	6f 92       	push	r6
    2610:	7f 92       	push	r7
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	65 97       	sbiw	r28, 0x15	; 21
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	6b 01       	movw	r12, r22
    2636:	7c 01       	movw	r14, r24
    2638:	3a 01       	movw	r6, r20
    263a:	92 2e       	mov	r9, r18
    263c:	b0 2e       	mov	r11, r16
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    263e:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    2640:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    2642:	10 91 03 41 	lds	r17, 0x4103	; 0x804103 <g_si5351_initialized>
    2646:	11 23       	and	r17, r17
    2648:	09 f4       	brne	.+2      	; 0x264c <si5351_set_freq+0x42>
    264a:	34 c1       	rjmp	.+616    	; 0x28b4 <si5351_set_freq+0x2aa>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    264c:	80 e4       	ldi	r24, 0x40	; 64
    264e:	c8 16       	cp	r12, r24
    2650:	82 e4       	ldi	r24, 0x42	; 66
    2652:	d8 06       	cpc	r13, r24
    2654:	8f e0       	ldi	r24, 0x0F	; 15
    2656:	e8 06       	cpc	r14, r24
    2658:	f1 04       	cpc	r15, r1
    265a:	68 f0       	brcs	.+26     	; 0x2676 <si5351_set_freq+0x6c>
			{
				freq_Fout /= 100;
    265c:	c7 01       	movw	r24, r14
    265e:	24 e6       	ldi	r18, 0x64	; 100
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
				freq_Fout *= 100;
    266a:	a4 e6       	ldi	r26, 0x64	; 100
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__muluhisi3>
    2672:	6b 01       	movw	r12, r22
    2674:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	69 16       	cp	r6, r25
    267a:	71 04       	cpc	r7, r1
    267c:	09 f4       	brne	.+2      	; 0x2680 <si5351_set_freq+0x76>
    267e:	a3 c0       	rjmp	.+326    	; 0x27c6 <si5351_set_freq+0x1bc>
    2680:	10 f1       	brcs	.+68     	; 0x26c6 <si5351_set_freq+0xbc>
    2682:	b2 e0       	ldi	r27, 0x02	; 2
    2684:	6b 16       	cp	r6, r27
    2686:	71 04       	cpc	r7, r1
    2688:	09 f0       	breq	.+2      	; 0x268c <si5351_set_freq+0x82>
    268a:	15 c1       	rjmp	.+554    	; 0x28b6 <si5351_set_freq+0x2ac>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    268c:	80 91 10 41 	lds	r24, 0x4110	; 0x804110 <_ZL17enabledClocksMask>
    2690:	84 60       	ori	r24, 0x04	; 4
    2692:	80 93 10 41 	sts	0x4110, r24	; 0x804110 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    2696:	80 95       	com	r24
    2698:	8c 6f       	ori	r24, 0xFC	; 252
    269a:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	be 01       	movw	r22, r28
    26a0:	61 5f       	subi	r22, 0xF1	; 241
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    26aa:	18 2f       	mov	r17, r24
    26ac:	81 11       	cpse	r24, r1
    26ae:	03 c1       	rjmp	.+518    	; 0x28b6 <si5351_set_freq+0x2ac>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    26b0:	c0 92 0c 41 	sts	0x410C, r12	; 0x80410c <_ZL9clock_out+0x8>
    26b4:	d0 92 0d 41 	sts	0x410D, r13	; 0x80410d <_ZL9clock_out+0x9>
    26b8:	e0 92 0e 41 	sts	0x410E, r14	; 0x80410e <_ZL9clock_out+0xa>
    26bc:	f0 92 0f 41 	sts	0x410F, r15	; 0x80410f <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    26c0:	a2 e1       	ldi	r26, 0x12	; 18
    26c2:	ad 8b       	std	Y+21, r26	; 0x15
    26c4:	9c c0       	rjmp	.+312    	; 0x27fe <si5351_set_freq+0x1f4>
		/* Only good for Si5351A3 variant */
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    26c6:	80 91 10 41 	lds	r24, 0x4110	; 0x804110 <_ZL17enabledClocksMask>
    26ca:	81 60       	ori	r24, 0x01	; 1
    26cc:	80 93 10 41 	sts	0x4110, r24	; 0x804110 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    26d0:	c0 92 04 41 	sts	0x4104, r12	; 0x804104 <_ZL9clock_out>
    26d4:	d0 92 05 41 	sts	0x4105, r13	; 0x804105 <_ZL9clock_out+0x1>
    26d8:	e0 92 06 41 	sts	0x4106, r14	; 0x804106 <_ZL9clock_out+0x2>
    26dc:	f0 92 07 41 	sts	0x4107, r15	; 0x804107 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    26e0:	80 e1       	ldi	r24, 0x10	; 16
    26e2:	8d 8b       	std	Y+21, r24	; 0x15
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    26e4:	44 24       	eor	r4, r4
    26e6:	43 94       	inc	r4
    26e8:	51 2c       	mov	r5, r1
		if((target_pll == SI5351_PLLA) || !freqVCOB)
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    26ea:	8e 01       	movw	r16, r28
    26ec:	02 5f       	subi	r16, 0xF2	; 242
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	9e 01       	movw	r18, r28
    26f2:	23 5f       	subi	r18, 0xF3	; 243
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	ae 01       	movw	r20, r28
    26f8:	4f 5f       	subi	r20, 0xFF	; 255
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
    26fc:	c7 01       	movw	r24, r14
    26fe:	b6 01       	movw	r22, r12
    2700:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    2704:	69 8b       	std	Y+17, r22	; 0x11
    2706:	7a 8b       	std	Y+18, r23	; 0x12
    2708:	8b 8b       	std	Y+19, r24	; 0x13
    270a:	9c 8b       	std	Y+20, r25	; 0x14
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    270c:	b2 01       	movw	r22, r4
    270e:	c3 01       	movw	r24, r6
    2710:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    2714:	18 2f       	mov	r17, r24
    2716:	81 11       	cpse	r24, r1
    2718:	ce c0       	rjmp	.+412    	; 0x28b6 <si5351_set_freq+0x2ac>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    271a:	8e 85       	ldd	r24, Y+14	; 0x0e
    271c:	8f 93       	push	r24
    271e:	81 2c       	mov	r8, r1
    2720:	ad 84       	ldd	r10, Y+13	; 0x0d
    2722:	c9 80       	ldd	r12, Y+1	; 0x01
    2724:	da 80       	ldd	r13, Y+2	; 0x02
    2726:	eb 80       	ldd	r14, Y+3	; 0x03
    2728:	fc 80       	ldd	r15, Y+4	; 0x04
    272a:	0d 81       	ldd	r16, Y+5	; 0x05
    272c:	1e 81       	ldd	r17, Y+6	; 0x06
    272e:	2f 81       	ldd	r18, Y+7	; 0x07
    2730:	38 85       	ldd	r19, Y+8	; 0x08
    2732:	49 85       	ldd	r20, Y+9	; 0x09
    2734:	5a 85       	ldd	r21, Y+10	; 0x0a
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	c3 01       	movw	r24, r6
    273c:	0e 94 86 12 	call	0x250c	; 0x250c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    2740:	18 2f       	mov	r17, r24
    2742:	0f 90       	pop	r0
    2744:	81 11       	cpse	r24, r1
    2746:	b7 c0       	rjmp	.+366    	; 0x28b6 <si5351_set_freq+0x2ac>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    2748:	89 89       	ldd	r24, Y+17	; 0x11
    274a:	9a 89       	ldd	r25, Y+18	; 0x12
    274c:	ab 89       	ldd	r26, Y+19	; 0x13
    274e:	bc 89       	ldd	r27, Y+20	; 0x14
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	a1 05       	cpc	r26, r1
    2754:	b1 05       	cpc	r27, r1
    2756:	09 f0       	breq	.+2      	; 0x275a <si5351_set_freq+0x150>
    2758:	79 c0       	rjmp	.+242    	; 0x284c <si5351_set_freq+0x242>
		/* Block 5: */
		/* Apply PLLA or PLLB soft reset */
		/* Reg. 177 = 0xAC */
/*	pll_reset(target_pll); */

		if(phase)
    275a:	b1 10       	cpse	r11, r1
    275c:	7d c0       	rjmp	.+250    	; 0x2858 <si5351_set_freq+0x24e>
		}

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    275e:	99 20       	and	r9, r9
    2760:	09 f4       	brne	.+2      	; 0x2764 <si5351_set_freq+0x15a>
    2762:	7f c0       	rjmp	.+254    	; 0x2862 <si5351_set_freq+0x258>
		{
 			data[0] = enabledClocksMask;
    2764:	80 91 10 41 	lds	r24, 0x4110	; 0x804110 <_ZL17enabledClocksMask>
    2768:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	be 01       	movw	r22, r28
    276e:	61 5f       	subi	r22, 0xF1	; 241
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2778:	81 11       	cpse	r24, r1
    277a:	b2 c0       	rjmp	.+356    	; 0x28e0 <si5351_set_freq+0x2d6>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    277c:	4a 94       	dec	r4
    277e:	45 28       	or	r4, r5
    2780:	09 f4       	brne	.+2      	; 0x2784 <si5351_set_freq+0x17a>
    2782:	7f c0       	rjmp	.+254    	; 0x2882 <si5351_set_freq+0x278>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	88 23       	and	r24, r24
    2788:	09 f4       	brne	.+2      	; 0x278c <si5351_set_freq+0x182>
    278a:	86 c0       	rjmp	.+268    	; 0x2898 <si5351_set_freq+0x28e>
			{
 				data[0] = 0x6C;
    278c:	8c e6       	ldi	r24, 0x6C	; 108
    278e:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	be 01       	movw	r22, r28
    2794:	61 5f       	subi	r22, 0xF1	; 241
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	8d 89       	ldd	r24, Y+21	; 0x15
    279a:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    279e:	81 11       	cpse	r24, r1
    27a0:	a1 c0       	rjmp	.+322    	; 0x28e4 <si5351_set_freq+0x2da>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	9a 89       	ldd	r25, Y+18	; 0x12
    27a6:	ab 89       	ldd	r26, Y+19	; 0x13
    27a8:	bc 89       	ldd	r27, Y+20	; 0x14
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	a1 05       	cpc	r26, r1
    27ae:	b1 05       	cpc	r27, r1
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <si5351_set_freq+0x1aa>
    27b2:	81 c0       	rjmp	.+258    	; 0x28b6 <si5351_set_freq+0x2ac>
			{
				freqVCOB = freq_VCO;
    27b4:	80 93 11 41 	sts	0x4111, r24	; 0x804111 <_ZL8freqVCOB>
    27b8:	90 93 12 41 	sts	0x4112, r25	; 0x804112 <_ZL8freqVCOB+0x1>
    27bc:	a0 93 13 41 	sts	0x4113, r26	; 0x804113 <_ZL8freqVCOB+0x2>
    27c0:	b0 93 14 41 	sts	0x4114, r27	; 0x804114 <_ZL8freqVCOB+0x3>
    27c4:	78 c0       	rjmp	.+240    	; 0x28b6 <si5351_set_freq+0x2ac>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    27c6:	80 91 10 41 	lds	r24, 0x4110	; 0x804110 <_ZL17enabledClocksMask>
    27ca:	82 60       	ori	r24, 0x02	; 2
    27cc:	80 93 10 41 	sts	0x4110, r24	; 0x804110 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    27d0:	80 95       	com	r24
    27d2:	8a 6f       	ori	r24, 0xFA	; 250
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	be 01       	movw	r22, r28
    27da:	61 5f       	subi	r22, 0xF1	; 241
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255
    27de:	83 e0       	ldi	r24, 0x03	; 3
    27e0:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    27e4:	18 2f       	mov	r17, r24
    27e6:	81 11       	cpse	r24, r1
    27e8:	66 c0       	rjmp	.+204    	; 0x28b6 <si5351_set_freq+0x2ac>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    27ea:	c0 92 08 41 	sts	0x4108, r12	; 0x804108 <_ZL9clock_out+0x4>
    27ee:	d0 92 09 41 	sts	0x4109, r13	; 0x804109 <_ZL9clock_out+0x5>
    27f2:	e0 92 0a 41 	sts	0x410A, r14	; 0x80410a <_ZL9clock_out+0x6>
    27f6:	f0 92 0b 41 	sts	0x410B, r15	; 0x80410b <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    27fa:	91 e1       	ldi	r25, 0x11	; 17
    27fc:	9d 8b       	std	Y+21, r25	; 0x15
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    27fe:	80 91 11 41 	lds	r24, 0x4111	; 0x804111 <_ZL8freqVCOB>
    2802:	90 91 12 41 	lds	r25, 0x4112	; 0x804112 <_ZL8freqVCOB+0x1>
    2806:	a0 91 13 41 	lds	r26, 0x4113	; 0x804113 <_ZL8freqVCOB+0x2>
    280a:	b0 91 14 41 	lds	r27, 0x4114	; 0x804114 <_ZL8freqVCOB+0x3>
    280e:	89 2b       	or	r24, r25
    2810:	8a 2b       	or	r24, r26
    2812:	8b 2b       	or	r24, r27
    2814:	29 f4       	brne	.+10     	; 0x2820 <si5351_set_freq+0x216>
    2816:	68 94       	set
    2818:	44 24       	eor	r4, r4
    281a:	41 f8       	bld	r4, 1
    281c:	51 2c       	mov	r5, r1
    281e:	65 cf       	rjmp	.-310    	; 0x26ea <si5351_set_freq+0xe0>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    2820:	8e 01       	movw	r16, r28
    2822:	02 5f       	subi	r16, 0xF2	; 242
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	9e 01       	movw	r18, r28
    2828:	23 5f       	subi	r18, 0xF3	; 243
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	ae 01       	movw	r20, r28
    282e:	4f 5f       	subi	r20, 0xFF	; 255
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	c7 01       	movw	r24, r14
    2834:	b6 01       	movw	r22, r12
    2836:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
    283a:	68 94       	set
    283c:	44 24       	eor	r4, r4
    283e:	41 f8       	bld	r4, 1
    2840:	51 2c       	mov	r5, r1
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff, uint8_t phase)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    2842:	19 8a       	std	Y+17, r1	; 0x11
    2844:	1a 8a       	std	Y+18, r1	; 0x12
    2846:	1b 8a       	std	Y+19, r1	; 0x13
    2848:	1c 8a       	std	Y+20, r1	; 0x14
    284a:	60 cf       	rjmp	.-320    	; 0x270c <si5351_set_freq+0x102>

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
			{
				set_pll(freq_VCO, target_pll);
    284c:	a2 01       	movw	r20, r4
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 55 10 	call	0x20aa	; 0x20aa <_Z7set_pllm10si5351_pll>
    2856:	81 cf       	rjmp	.-254    	; 0x275a <si5351_set_freq+0x150>
		/* Reg. 177 = 0xAC */
/*	pll_reset(target_pll); */

		if(phase)
		{
			si5351_set_phase(clk, phase);
    2858:	6b 2d       	mov	r22, r11
    285a:	c3 01       	movw	r24, r6
    285c:	0e 94 3b 10 	call	0x2076	; 0x2076 <_Z16si5351_set_phase12si5351_clockh>
    2860:	7e cf       	rjmp	.-260    	; 0x275e <si5351_set_freq+0x154>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    2862:	80 91 10 41 	lds	r24, 0x4110	; 0x804110 <_ZL17enabledClocksMask>
    2866:	80 95       	com	r24
    2868:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	be 01       	movw	r22, r28
    286e:	61 5f       	subi	r22, 0xF1	; 241
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	83 e0       	ldi	r24, 0x03	; 3
    2874:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <si5351_set_freq+0x274>
    287c:	7f cf       	rjmp	.-258    	; 0x277c <si5351_set_freq+0x172>
			{
				return true;
    287e:	18 2f       	mov	r17, r24
    2880:	1a c0       	rjmp	.+52     	; 0x28b6 <si5351_set_freq+0x2ac>
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
		{
 			data[0] = 0x4C;
    2882:	8c e4       	ldi	r24, 0x4C	; 76
    2884:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	be 01       	movw	r22, r28
    288a:	61 5f       	subi	r22, 0xF1	; 241
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	8d 89       	ldd	r24, Y+21	; 0x15
    2890:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    2894:	18 2f       	mov	r17, r24
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <si5351_set_freq+0x2ac>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    2898:	8c e2       	ldi	r24, 0x2C	; 44
    289a:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	be 01       	movw	r22, r28
    28a0:	61 5f       	subi	r22, 0xF1	; 241
    28a2:	7f 4f       	sbci	r23, 0xFF	; 255
    28a4:	8d 89       	ldd	r24, Y+21	; 0x15
    28a6:	0e 94 1f 10 	call	0x203e	; 0x203e <_Z17si5351_write_bulkhPhh>
    28aa:	88 23       	and	r24, r24
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <si5351_set_freq+0x2a6>
    28ae:	79 cf       	rjmp	.-270    	; 0x27a2 <si5351_set_freq+0x198>
				{
					return true;
    28b0:	18 2f       	mov	r17, r24
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <si5351_set_freq+0x2ac>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    28b4:	11 e0       	ldi	r17, 0x01	; 1
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    28b6:	81 2f       	mov	r24, r17
    28b8:	65 96       	adiw	r28, 0x15	; 21
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	bf 90       	pop	r11
    28d0:	af 90       	pop	r10
    28d2:	9f 90       	pop	r9
    28d4:	8f 90       	pop	r8
    28d6:	7f 90       	pop	r7
    28d8:	6f 90       	pop	r6
    28da:	5f 90       	pop	r5
    28dc:	4f 90       	pop	r4
    28de:	08 95       	ret
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    28e0:	18 2f       	mov	r17, r24
    28e2:	e9 cf       	rjmp	.-46     	; 0x28b6 <si5351_set_freq+0x2ac>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    28e4:	18 2f       	mov	r17, r24
    28e6:	e7 cf       	rjmp	.-50     	; 0x28b6 <si5351_set_freq+0x2ac>

000028e8 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp; /* Sleep enable: disabled */
    28e8:	10 92 50 00 	sts	0x0050, r1	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
//			 | SLPCTRL_SMODE_IDLE_gc;  /* Idle mode */
//			 | SLPCTRL_SMODE_STDBY_gc; /* Standby Mode */
//			 | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	08 95       	ret

000028f0 <SLPCTRL_set_sleep_mode>:

void SLPCTRL_set_sleep_mode(SLPCTRL_SMODE_t setmode)
{
	SLPCTRL.CTRLA = (SLPCTRL.CTRLA & ~SLPCTRL_SMODE_gm) | (setmode & SLPCTRL_SMODE_gm);
    28f0:	e0 e5       	ldi	r30, 0x50	; 80
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	90 81       	ld	r25, Z
    28f6:	99 7f       	andi	r25, 0xF9	; 249
    28f8:	86 70       	andi	r24, 0x06	; 6
    28fa:	98 2b       	or	r25, r24
    28fc:	90 83       	st	Z, r25
}
    28fe:	08 95       	ret

00002900 <TIMERB_init>:
 *
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2900:	e0 e0       	ldi	r30, 0x00	; 0
    2902:	fb e0       	ldi	r31, 0x0B	; 11
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB0.CCMP = 0x9C40;
    2908:	20 e4       	ldi	r18, 0x40	; 64
    290a:	3c e9       	ldi	r19, 0x9C	; 156
    290c:	24 87       	std	Z+12, r18	; 0x0c
    290e:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    2910:	93 e0       	ldi	r25, 0x03	; 3
    2912:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB0.INTFLAGS = (TCB_CAPT_bm | TCB_OVF_bm); /* Clear flag */
    2914:	96 83       	std	Z+6, r25	; 0x06

/********************************************************************************/
/** 
LED Timer
*/
TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2916:	e0 e1       	ldi	r30, 0x10	; 16
    2918:	fb e0       	ldi	r31, 0x0B	; 11
    291a:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB1.CCMP = 0x5DC0;
    291c:	40 ec       	ldi	r20, 0xC0	; 192
    291e:	5d e5       	ldi	r21, 0x5D	; 93
    2920:	44 87       	std	Z+12, r20	; 0x0c
    2922:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    2924:	80 83       	st	Z, r24
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    2926:	86 83       	std	Z+6, r24	; 0x06
/********************************************************************************/
/** 
I2C Timeout Flag Timer
*/

CPUINT.LVL1VEC = 30; /* Set to level 1 - highest priority interrupt */
    2928:	a0 e1       	ldi	r26, 0x10	; 16
    292a:	b1 e0       	ldi	r27, 0x01	; 1
    292c:	4e e1       	ldi	r20, 0x1E	; 30
    292e:	13 96       	adiw	r26, 0x03	; 3
    2930:	4c 93       	st	X, r20
    2932:	13 97       	sbiw	r26, 0x03	; 3
TCB2.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2934:	e0 e2       	ldi	r30, 0x20	; 32
    2936:	fb e0       	ldi	r31, 0x0B	; 11
    2938:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB2.CCMP = 0xFFFF;
    293a:	6f ef       	ldi	r22, 0xFF	; 255
    293c:	7f ef       	ldi	r23, 0xFF	; 255
    293e:	64 87       	std	Z+12, r22	; 0x0c
    2940:	75 87       	std	Z+13, r23	; 0x0d

TCB2.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    2942:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB2.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    2944:	86 83       	std	Z+6, r24	; 0x06
CPUINT.LVL1VEC = 30; /* Set to level 1 - highest priority interrupt */
    2946:	13 96       	adiw	r26, 0x03	; 3
    2948:	4c 93       	st	X, r20


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    294a:	e0 e3       	ldi	r30, 0x30	; 48
    294c:	fb e0       	ldi	r31, 0x0B	; 11
    294e:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB3.CCMP = 0x9C40;
    2950:	24 87       	std	Z+12, r18	; 0x0c
    2952:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    2954:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    2956:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	08 95       	ret

0000295c <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    2960:	61 15       	cp	r22, r1
    2962:	71 05       	cpc	r23, r1
    2964:	81 05       	cpc	r24, r1
    2966:	91 05       	cpc	r25, r1
    2968:	09 f4       	brne	.+2      	; 0x296c <util_delay_ms+0x10>
    296a:	6a c0       	rjmp	.+212    	; 0x2a40 <util_delay_ms+0xe4>
	{
		if(counting)
    296c:	20 91 15 41 	lds	r18, 0x4115	; 0x804115 <_ZZ13util_delay_msE8counting>
    2970:	22 23       	and	r18, r18
    2972:	f1 f1       	breq	.+124    	; 0x29f0 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    2974:	00 91 1a 41 	lds	r16, 0x411A	; 0x80411a <_ZL12g_ms_counter>
    2978:	10 91 1b 41 	lds	r17, 0x411B	; 0x80411b <_ZL12g_ms_counter+0x1>
    297c:	20 91 1c 41 	lds	r18, 0x411C	; 0x80411c <_ZL12g_ms_counter+0x2>
    2980:	30 91 1d 41 	lds	r19, 0x411D	; 0x80411d <_ZL12g_ms_counter+0x3>
    2984:	01 2b       	or	r16, r17
    2986:	02 2b       	or	r16, r18
    2988:	03 2b       	or	r16, r19
    298a:	21 f1       	breq	.+72     	; 0x29d4 <util_delay_ms+0x78>

				counting = false;
				countdownValue = 0;
				return(false); /* time expired */
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    298c:	00 91 16 41 	lds	r16, 0x4116	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    2990:	10 91 17 41 	lds	r17, 0x4117	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    2994:	20 91 18 41 	lds	r18, 0x4118	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    2998:	30 91 19 41 	lds	r19, 0x4119	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
    299c:	06 17       	cp	r16, r22
    299e:	17 07       	cpc	r17, r23
    29a0:	28 07       	cpc	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <util_delay_ms+0x4c>
    29a6:	48 c0       	rjmp	.+144    	; 0x2a38 <util_delay_ms+0xdc>
			{
				TCB1.CNT = 0x0000;
    29a8:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    29ac:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    29b0:	60 93 16 41 	sts	0x4116, r22	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    29b4:	70 93 17 41 	sts	0x4117, r23	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    29b8:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    29bc:	90 93 19 41 	sts	0x4119, r25	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    29c0:	60 93 1a 41 	sts	0x411A, r22	; 0x80411a <_ZL12g_ms_counter>
    29c4:	70 93 1b 41 	sts	0x411B, r23	; 0x80411b <_ZL12g_ms_counter+0x1>
    29c8:	80 93 1c 41 	sts	0x411C, r24	; 0x80411c <_ZL12g_ms_counter+0x2>
    29cc:	90 93 1d 41 	sts	0x411D, r25	; 0x80411d <_ZL12g_ms_counter+0x3>
				return(false);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	4b c0       	rjmp	.+150    	; 0x2a6a <util_delay_ms+0x10e>
	{
		if(counting)
		{
			if(!g_ms_counter)
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    29d4:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

				counting = false;
    29d8:	10 92 15 41 	sts	0x4115, r1	; 0x804115 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    29dc:	10 92 16 41 	sts	0x4116, r1	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    29e0:	10 92 17 41 	sts	0x4117, r1	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    29e4:	10 92 18 41 	sts	0x4118, r1	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    29e8:	10 92 19 41 	sts	0x4119, r1	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	3d c0       	rjmp	.+122    	; 0x2a6a <util_delay_ms+0x10e>
				countdownValue = delayValue;
				g_ms_counter = delayValue;
				return(false);
			}
		}
		else if(delayValue != countdownValue)
    29f0:	00 91 16 41 	lds	r16, 0x4116	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    29f4:	10 91 17 41 	lds	r17, 0x4117	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    29f8:	20 91 18 41 	lds	r18, 0x4118	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    29fc:	30 91 19 41 	lds	r19, 0x4119	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
    2a00:	06 17       	cp	r16, r22
    2a02:	17 07       	cpc	r17, r23
    2a04:	28 07       	cpc	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	b9 f0       	breq	.+46     	; 0x2a38 <util_delay_ms+0xdc>
		{
			TCB1.CNT = 0x0000;
    2a0a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    2a0e:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    2a12:	60 93 16 41 	sts	0x4116, r22	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    2a16:	70 93 17 41 	sts	0x4117, r23	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    2a1a:	80 93 18 41 	sts	0x4118, r24	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    2a1e:	90 93 19 41 	sts	0x4119, r25	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    2a22:	60 93 1a 41 	sts	0x411A, r22	; 0x80411a <_ZL12g_ms_counter>
    2a26:	70 93 1b 41 	sts	0x411B, r23	; 0x80411b <_ZL12g_ms_counter+0x1>
    2a2a:	80 93 1c 41 	sts	0x411C, r24	; 0x80411c <_ZL12g_ms_counter+0x2>
    2a2e:	90 93 1d 41 	sts	0x411D, r25	; 0x80411d <_ZL12g_ms_counter+0x3>
			counting = true;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	80 93 15 41 	sts	0x4115, r24	; 0x804115 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
		g_ms_counter = 0;
		return(false); /* timer reset */
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
    2a3e:	15 c0       	rjmp	.+42     	; 0x2a6a <util_delay_ms+0x10e>
			counting = true;
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    2a40:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

		counting = false;
    2a44:	10 92 15 41 	sts	0x4115, r1	; 0x804115 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    2a48:	10 92 16 41 	sts	0x4116, r1	; 0x804116 <_ZZ13util_delay_msE14countdownValue>
    2a4c:	10 92 17 41 	sts	0x4117, r1	; 0x804117 <_ZZ13util_delay_msE14countdownValue+0x1>
    2a50:	10 92 18 41 	sts	0x4118, r1	; 0x804118 <_ZZ13util_delay_msE14countdownValue+0x2>
    2a54:	10 92 19 41 	sts	0x4119, r1	; 0x804119 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    2a58:	10 92 1a 41 	sts	0x411A, r1	; 0x80411a <_ZL12g_ms_counter>
    2a5c:	10 92 1b 41 	sts	0x411B, r1	; 0x80411b <_ZL12g_ms_counter+0x1>
    2a60:	10 92 1c 41 	sts	0x411C, r1	; 0x80411c <_ZL12g_ms_counter+0x2>
    2a64:	10 92 1d 41 	sts	0x411D, r1	; 0x80411d <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    2a68:	80 e0       	ldi	r24, 0x00	; 0
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
}
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	08 95       	ret

00002a70 <__vector_30>:

ISR(TCB2_INT_vect)
{
    2a70:	1f 92       	push	r1
    2a72:	0f 92       	push	r0
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	0f 92       	push	r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	8f 93       	push	r24
    2a7c:	9f 93       	push	r25
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
    2a7e:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    2a82:	80 ff       	sbrs	r24, 0
    2a84:	1e c0       	rjmp	.+60     	; 0x2ac2 <__vector_30+0x52>
	{
		if(g_i2c1_timeout_ticks) g_i2c1_timeout_ticks--;
    2a86:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <g_i2c1_timeout_ticks>
    2a8a:	90 91 13 40 	lds	r25, 0x4013	; 0x804013 <g_i2c1_timeout_ticks+0x1>
    2a8e:	89 2b       	or	r24, r25
    2a90:	49 f0       	breq	.+18     	; 0x2aa4 <__vector_30+0x34>
    2a92:	80 91 12 40 	lds	r24, 0x4012	; 0x804012 <g_i2c1_timeout_ticks>
    2a96:	90 91 13 40 	lds	r25, 0x4013	; 0x804013 <g_i2c1_timeout_ticks+0x1>
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <g_i2c1_timeout_ticks>
    2aa0:	90 93 13 40 	sts	0x4013, r25	; 0x804013 <g_i2c1_timeout_ticks+0x1>
		if(g_i2c0_timeout_ticks) g_i2c0_timeout_ticks--;
    2aa4:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    2aa8:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    2aac:	89 2b       	or	r24, r25
    2aae:	49 f0       	breq	.+18     	; 0x2ac2 <__vector_30+0x52>
    2ab0:	80 91 14 40 	lds	r24, 0x4014	; 0x804014 <g_i2c0_timeout_ticks>
    2ab4:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <g_i2c0_timeout_ticks+0x1>
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	80 93 14 40 	sts	0x4014, r24	; 0x804014 <g_i2c0_timeout_ticks>
    2abe:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <g_i2c0_timeout_ticks+0x1>
	}
	TCB2.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* Clear flags */
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
}
    2ac8:	9f 91       	pop	r25
    2aca:	8f 91       	pop	r24
    2acc:	0f 90       	pop	r0
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	0f 90       	pop	r0
    2ad2:	1f 90       	pop	r1
    2ad4:	18 95       	reti

00002ad6 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    2ad6:	1f 92       	push	r1
    2ad8:	0f 92       	push	r0
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	0f 92       	push	r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	8f 93       	push	r24
    2ae2:	9f 93       	push	r25
    2ae4:	af 93       	push	r26
    2ae6:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    2ae8:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    2aec:	80 ff       	sbrs	r24, 0
    2aee:	0e c0       	rjmp	.+28     	; 0x2b0c <__vector_13+0x36>
    {
		if(g_ms_counter) /* check for 1-second interval */
    2af0:	80 91 1a 41 	lds	r24, 0x411A	; 0x80411a <_ZL12g_ms_counter>
    2af4:	90 91 1b 41 	lds	r25, 0x411B	; 0x80411b <_ZL12g_ms_counter+0x1>
    2af8:	a0 91 1c 41 	lds	r26, 0x411C	; 0x80411c <_ZL12g_ms_counter+0x2>
    2afc:	b0 91 1d 41 	lds	r27, 0x411D	; 0x80411d <_ZL12g_ms_counter+0x3>
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	a1 05       	cpc	r26, r1
    2b04:	b1 05       	cpc	r27, r1
    2b06:	71 f4       	brne	.+28     	; 0x2b24 <__vector_13+0x4e>
		{
			g_ms_counter--;	
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    2b08:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
		}
    }

    TCB1.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* clear interrupt flags */
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
}
    2b12:	bf 91       	pop	r27
    2b14:	af 91       	pop	r26
    2b16:	9f 91       	pop	r25
    2b18:	8f 91       	pop	r24
    2b1a:	0f 90       	pop	r0
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	0f 90       	pop	r0
    2b20:	1f 90       	pop	r1
    2b22:	18 95       	reti
{
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    {
		if(g_ms_counter) /* check for 1-second interval */
		{
			g_ms_counter--;	
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	a1 09       	sbc	r26, r1
    2b28:	b1 09       	sbc	r27, r1
    2b2a:	80 93 1a 41 	sts	0x411A, r24	; 0x80411a <_ZL12g_ms_counter>
    2b2e:	90 93 1b 41 	sts	0x411B, r25	; 0x80411b <_ZL12g_ms_counter+0x1>
    2b32:	a0 93 1c 41 	sts	0x411C, r26	; 0x80411c <_ZL12g_ms_counter+0x2>
    2b36:	b0 93 1d 41 	sts	0x411D, r27	; 0x80411d <_ZL12g_ms_counter+0x3>
    2b3a:	e8 cf       	rjmp	.-48     	; 0x2b0c <__vector_13+0x36>

00002b3c <TIMERB_sleep>:
    TCB1.INTFLAGS = TCB_CAPT_bm | TCB_OVF_bm; /* clear interrupt flags */
}

int8_t TIMERB_sleep()
{
	TCB0.INTCTRL = 0;   /* Capture or Timeout: disable interrupts */
    2b3c:	e0 e0       	ldi	r30, 0x00	; 0
    2b3e:	fb e0       	ldi	r31, 0x0B	; 11
    2b40:	15 82       	std	Z+5, r1	; 0x05
	TCB0.CTRLA = 0; /* Disable timer */
    2b42:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB1.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    2b44:	e0 e1       	ldi	r30, 0x10	; 16
    2b46:	fb e0       	ldi	r31, 0x0B	; 11
    2b48:	15 82       	std	Z+5, r1	; 0x05
	TCB1.CTRLA = 0; /* Disable timer */
    2b4a:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB2.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    2b4c:	e0 e2       	ldi	r30, 0x20	; 32
    2b4e:	fb e0       	ldi	r31, 0x0B	; 11
    2b50:	15 82       	std	Z+5, r1	; 0x05
	TCB2.CTRLA = 0; /* Disable timer */
    2b52:	10 82       	st	Z, r1

	/********************************************************************************/

	TCB3.INTCTRL = 0; /* OverFlow Interrupt: disabled */
    2b54:	e0 e3       	ldi	r30, 0x30	; 48
    2b56:	fb e0       	ldi	r31, 0x0B	; 11
    2b58:	15 82       	std	Z+5, r1	; 0x05
	TCB3.CTRLA = 0; /* Disable timer */
    2b5a:	10 82       	st	Z, r1


	return 0;
}
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	08 95       	ret

00002b60 <_Z14rxSetFrequencyPmb>:
	}
	
	void restart_receiver(void)
	{
		si5351_start_comms();
	}
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	b6 2e       	mov	r11, r22
    2b74:	11 e0       	ldi	r17, 0x01	; 1
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	89 f0       	breq	.+34     	; 0x2b9c <_Z14rxSetFrequencyPmb+0x3c>
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	c0 80       	ld	r12, Z
    2b7e:	d1 80       	ldd	r13, Z+1	; 0x01
    2b80:	e2 80       	ldd	r14, Z+2	; 0x02
    2b82:	f3 80       	ldd	r15, Z+3	; 0x03
    2b84:	b7 01       	movw	r22, r14
    2b86:	a6 01       	movw	r20, r12
    2b88:	41 5e       	subi	r20, 0xE1	; 225
    2b8a:	57 46       	sbci	r21, 0x67	; 103
    2b8c:	65 43       	sbci	r22, 0x35	; 53
    2b8e:	71 09       	sbc	r23, r1
    2b90:	11 e0       	ldi	r17, 0x01	; 1
    2b92:	4f 31       	cpi	r20, 0x1F	; 31
    2b94:	51 4a       	sbci	r21, 0xA1	; 161
    2b96:	67 40       	sbci	r22, 0x07	; 7
    2b98:	71 05       	cpc	r23, r1
    2b9a:	58 f0       	brcs	.+22     	; 0x2bb2 <_Z14rxSetFrequencyPmb+0x52>
    2b9c:	81 2f       	mov	r24, r17
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	bf 90       	pop	r11
    2bb0:	08 95       	ret
    2bb2:	ec 01       	movw	r28, r24
    2bb4:	00 e0       	ldi	r16, 0x00	; 0
    2bb6:	2b 2d       	mov	r18, r11
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	c7 01       	movw	r24, r14
    2bbe:	b6 01       	movw	r22, r12
    2bc0:	0e 94 05 13 	call	0x260a	; 0x260a <si5351_set_freq>
    2bc4:	18 2f       	mov	r17, r24
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	0c c0       	rjmp	.+24     	; 0x2be2 <_Z14rxSetFrequencyPmb+0x82>
    2bca:	88 81       	ld	r24, Y
    2bcc:	99 81       	ldd	r25, Y+1	; 0x01
    2bce:	aa 81       	ldd	r26, Y+2	; 0x02
    2bd0:	bb 81       	ldd	r27, Y+3	; 0x03
    2bd2:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_rx_frequency>
    2bd6:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_rx_frequency+0x1>
    2bda:	a0 93 22 40 	sts	0x4022, r26	; 0x804022 <g_rx_frequency+0x2>
    2bde:	b0 93 23 40 	sts	0x4023, r27	; 0x804023 <g_rx_frequency+0x3>
    2be2:	68 81       	ld	r22, Y
    2be4:	79 81       	ldd	r23, Y+1	; 0x01
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bea:	02 e3       	ldi	r16, 0x32	; 50
    2bec:	2b 2d       	mov	r18, r11
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	0e 94 05 13 	call	0x260a	; 0x260a <si5351_set_freq>
    2bf6:	81 11       	cpse	r24, r1
    2bf8:	d1 cf       	rjmp	.-94     	; 0x2b9c <_Z14rxSetFrequencyPmb+0x3c>
    2bfa:	48 81       	ld	r20, Y
    2bfc:	59 81       	ldd	r21, Y+1	; 0x01
    2bfe:	6a 81       	ldd	r22, Y+2	; 0x02
    2c00:	7b 81       	ldd	r23, Y+3	; 0x03
    2c02:	40 93 20 40 	sts	0x4020, r20	; 0x804020 <g_rx_frequency>
    2c06:	50 93 21 40 	sts	0x4021, r21	; 0x804021 <g_rx_frequency+0x1>
    2c0a:	60 93 22 40 	sts	0x4022, r22	; 0x804022 <g_rx_frequency+0x2>
    2c0e:	70 93 23 40 	sts	0x4023, r23	; 0x804023 <g_rx_frequency+0x3>
    2c12:	18 2f       	mov	r17, r24
    2c14:	c3 cf       	rjmp	.-122    	; 0x2b9c <_Z14rxSetFrequencyPmb+0x3c>

00002c16 <_Z13init_receiverm>:

	EC init_receiver(Frequency_Hz freq)
	{
		g_rx_frequency = freq;
    2c16:	60 93 20 40 	sts	0x4020, r22	; 0x804020 <g_rx_frequency>
    2c1a:	70 93 21 40 	sts	0x4021, r23	; 0x804021 <g_rx_frequency+0x1>
    2c1e:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <g_rx_frequency+0x2>
    2c22:	90 93 23 40 	sts	0x4023, r25	; 0x804023 <g_rx_frequency+0x3>
		return init_receiver();
    2c26:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_Z13init_receiverv>
	}
    2c2a:	08 95       	ret

00002c2c <_Z13init_receiverv>:
	
	EC init_receiver(void)
	{
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
		EC code;
		bool err;
		
		DAC0_init();
    2c30:	0e 94 80 07 	call	0xf00	; 0xf00 <_Z9DAC0_initv>

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	ba 01       	movw	r22, r20
    2c3a:	80 e4       	ldi	r24, 0x40	; 64
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 b2 10 	call	0x2164	; 0x2164 <si5351_init>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
    2c42:	c2 ed       	ldi	r28, 0xD2	; 210
    2c44:	d0 e0       	ldi	r29, 0x00	; 0
		EC code;
		bool err;
		
		DAC0_init();

		if((err = si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    2c46:	81 11       	cpse	r24, r1
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <_Z13init_receiverv+0x30>
		{
			return(ERROR_CODE_RF_OSCILLATOR_ERROR);
		}

		if((code = si5351_drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA)))
    2c4a:	63 e0       	ldi	r22, 0x03	; 3
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	0e 94 a6 11 	call	0x234c	; 0x234c <si5351_drive_strength>
    2c56:	ec 01       	movw	r28, r24
    2c58:	89 2b       	or	r24, r25
    2c5a:	21 f0       	breq	.+8      	; 0x2c64 <_Z13init_receiverv+0x38>
		{
			g_rx_initialized = true;
		}

		return( code);
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret
		if((code = si5351_drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}

		if((code = si5351_clock_enable(SI5351_CLK0, SI5351_CLK_DISABLED)))
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0e 94 66 11 	call	0x22cc	; 0x22cc <si5351_clock_enable>
    2c6e:	ec 01       	movw	r28, r24
    2c70:	89 2b       	or	r24, r25
    2c72:	a1 f7       	brne	.-24     	; 0x2c5c <_Z13init_receiverv+0x30>
		{
			return( code);
		}

		if((code = si5351_drive_strength(SI5351_CLK1, SI5351_DRIVE_8MA)))
    2c74:	63 e0       	ldi	r22, 0x03	; 3
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 a6 11 	call	0x234c	; 0x234c <si5351_drive_strength>
    2c80:	ec 01       	movw	r28, r24
    2c82:	89 2b       	or	r24, r25
    2c84:	59 f7       	brne	.-42     	; 0x2c5c <_Z13init_receiverv+0x30>
		{
			return( code);
		}

		if((code = si5351_clock_enable(SI5351_CLK1, SI5351_CLK_DISABLED)))
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 66 11 	call	0x22cc	; 0x22cc <si5351_clock_enable>
    2c90:	ec 01       	movw	r28, r24
    2c92:	89 2b       	or	r24, r25
    2c94:	19 f7       	brne	.-58     	; 0x2c5c <_Z13init_receiverv+0x30>
		{
			return( code);
		}

		err = rxSetFrequency((Frequency_Hz*)&g_rx_frequency, false);
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	80 e2       	ldi	r24, 0x20	; 32
    2c9a:	90 e4       	ldi	r25, 0x40	; 64
    2c9c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_Z14rxSetFrequencyPmb>
		if(!err)
    2ca0:	81 11       	cpse	r24, r1
    2ca2:	dc cf       	rjmp	.-72     	; 0x2c5c <_Z13init_receiverv+0x30>
		{
			g_rx_initialized = true;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	80 93 1e 41 	sts	0x411E, r24	; 0x80411e <_ZL16g_rx_initialized>
    2caa:	d8 cf       	rjmp	.-80     	; 0x2c5c <_Z13init_receiverv+0x30>

00002cac <__cmpsf2>:
    2cac:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__fp_cmp>
    2cb0:	08 f4       	brcc	.+2      	; 0x2cb4 <__cmpsf2+0x8>
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	08 95       	ret

00002cb6 <__fixsfsi>:
    2cb6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__fixunssfsi>
    2cba:	68 94       	set
    2cbc:	b1 11       	cpse	r27, r1
    2cbe:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__fp_szero>
    2cc2:	08 95       	ret

00002cc4 <__fixunssfsi>:
    2cc4:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__fp_splitA>
    2cc8:	88 f0       	brcs	.+34     	; 0x2cec <__fixunssfsi+0x28>
    2cca:	9f 57       	subi	r25, 0x7F	; 127
    2ccc:	98 f0       	brcs	.+38     	; 0x2cf4 <__fixunssfsi+0x30>
    2cce:	b9 2f       	mov	r27, r25
    2cd0:	99 27       	eor	r25, r25
    2cd2:	b7 51       	subi	r27, 0x17	; 23
    2cd4:	b0 f0       	brcs	.+44     	; 0x2d02 <__fixunssfsi+0x3e>
    2cd6:	e1 f0       	breq	.+56     	; 0x2d10 <__fixunssfsi+0x4c>
    2cd8:	66 0f       	add	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	1a f0       	brmi	.+6      	; 0x2ce8 <__fixunssfsi+0x24>
    2ce2:	ba 95       	dec	r27
    2ce4:	c9 f7       	brne	.-14     	; 0x2cd8 <__fixunssfsi+0x14>
    2ce6:	14 c0       	rjmp	.+40     	; 0x2d10 <__fixunssfsi+0x4c>
    2ce8:	b1 30       	cpi	r27, 0x01	; 1
    2cea:	91 f0       	breq	.+36     	; 0x2d10 <__fixunssfsi+0x4c>
    2cec:	0e 94 d7 16 	call	0x2dae	; 0x2dae <__fp_zero>
    2cf0:	b1 e0       	ldi	r27, 0x01	; 1
    2cf2:	08 95       	ret
    2cf4:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_zero>
    2cf8:	67 2f       	mov	r22, r23
    2cfa:	78 2f       	mov	r23, r24
    2cfc:	88 27       	eor	r24, r24
    2cfe:	b8 5f       	subi	r27, 0xF8	; 248
    2d00:	39 f0       	breq	.+14     	; 0x2d10 <__fixunssfsi+0x4c>
    2d02:	b9 3f       	cpi	r27, 0xF9	; 249
    2d04:	cc f3       	brlt	.-14     	; 0x2cf8 <__fixunssfsi+0x34>
    2d06:	86 95       	lsr	r24
    2d08:	77 95       	ror	r23
    2d0a:	67 95       	ror	r22
    2d0c:	b3 95       	inc	r27
    2d0e:	d9 f7       	brne	.-10     	; 0x2d06 <__fixunssfsi+0x42>
    2d10:	3e f4       	brtc	.+14     	; 0x2d20 <__fixunssfsi+0x5c>
    2d12:	90 95       	com	r25
    2d14:	80 95       	com	r24
    2d16:	70 95       	com	r23
    2d18:	61 95       	neg	r22
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	08 95       	ret

00002d22 <__fp_cmp>:
    2d22:	99 0f       	add	r25, r25
    2d24:	00 08       	sbc	r0, r0
    2d26:	55 0f       	add	r21, r21
    2d28:	aa 0b       	sbc	r26, r26
    2d2a:	e0 e8       	ldi	r30, 0x80	; 128
    2d2c:	fe ef       	ldi	r31, 0xFE	; 254
    2d2e:	16 16       	cp	r1, r22
    2d30:	17 06       	cpc	r1, r23
    2d32:	e8 07       	cpc	r30, r24
    2d34:	f9 07       	cpc	r31, r25
    2d36:	c0 f0       	brcs	.+48     	; 0x2d68 <__fp_cmp+0x46>
    2d38:	12 16       	cp	r1, r18
    2d3a:	13 06       	cpc	r1, r19
    2d3c:	e4 07       	cpc	r30, r20
    2d3e:	f5 07       	cpc	r31, r21
    2d40:	98 f0       	brcs	.+38     	; 0x2d68 <__fp_cmp+0x46>
    2d42:	62 1b       	sub	r22, r18
    2d44:	73 0b       	sbc	r23, r19
    2d46:	84 0b       	sbc	r24, r20
    2d48:	95 0b       	sbc	r25, r21
    2d4a:	39 f4       	brne	.+14     	; 0x2d5a <__fp_cmp+0x38>
    2d4c:	0a 26       	eor	r0, r26
    2d4e:	61 f0       	breq	.+24     	; 0x2d68 <__fp_cmp+0x46>
    2d50:	23 2b       	or	r18, r19
    2d52:	24 2b       	or	r18, r20
    2d54:	25 2b       	or	r18, r21
    2d56:	21 f4       	brne	.+8      	; 0x2d60 <__fp_cmp+0x3e>
    2d58:	08 95       	ret
    2d5a:	0a 26       	eor	r0, r26
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <__fp_cmp+0x3e>
    2d5e:	a1 40       	sbci	r26, 0x01	; 1
    2d60:	a6 95       	lsr	r26
    2d62:	8f ef       	ldi	r24, 0xFF	; 255
    2d64:	81 1d       	adc	r24, r1
    2d66:	81 1d       	adc	r24, r1
    2d68:	08 95       	ret

00002d6a <__fp_split3>:
    2d6a:	57 fd       	sbrc	r21, 7
    2d6c:	90 58       	subi	r25, 0x80	; 128
    2d6e:	44 0f       	add	r20, r20
    2d70:	55 1f       	adc	r21, r21
    2d72:	59 f0       	breq	.+22     	; 0x2d8a <__fp_splitA+0x10>
    2d74:	5f 3f       	cpi	r21, 0xFF	; 255
    2d76:	71 f0       	breq	.+28     	; 0x2d94 <__fp_splitA+0x1a>
    2d78:	47 95       	ror	r20

00002d7a <__fp_splitA>:
    2d7a:	88 0f       	add	r24, r24
    2d7c:	97 fb       	bst	r25, 7
    2d7e:	99 1f       	adc	r25, r25
    2d80:	61 f0       	breq	.+24     	; 0x2d9a <__fp_splitA+0x20>
    2d82:	9f 3f       	cpi	r25, 0xFF	; 255
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <__fp_splitA+0x2a>
    2d86:	87 95       	ror	r24
    2d88:	08 95       	ret
    2d8a:	12 16       	cp	r1, r18
    2d8c:	13 06       	cpc	r1, r19
    2d8e:	14 06       	cpc	r1, r20
    2d90:	55 1f       	adc	r21, r21
    2d92:	f2 cf       	rjmp	.-28     	; 0x2d78 <__fp_split3+0xe>
    2d94:	46 95       	lsr	r20
    2d96:	f1 df       	rcall	.-30     	; 0x2d7a <__fp_splitA>
    2d98:	08 c0       	rjmp	.+16     	; 0x2daa <__fp_splitA+0x30>
    2d9a:	16 16       	cp	r1, r22
    2d9c:	17 06       	cpc	r1, r23
    2d9e:	18 06       	cpc	r1, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	f1 cf       	rjmp	.-30     	; 0x2d86 <__fp_splitA+0xc>
    2da4:	86 95       	lsr	r24
    2da6:	71 05       	cpc	r23, r1
    2da8:	61 05       	cpc	r22, r1
    2daa:	08 94       	sec
    2dac:	08 95       	ret

00002dae <__fp_zero>:
    2dae:	e8 94       	clt

00002db0 <__fp_szero>:
    2db0:	bb 27       	eor	r27, r27
    2db2:	66 27       	eor	r22, r22
    2db4:	77 27       	eor	r23, r23
    2db6:	cb 01       	movw	r24, r22
    2db8:	97 f9       	bld	r25, 7
    2dba:	08 95       	ret

00002dbc <__gesf2>:
    2dbc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__fp_cmp>
    2dc0:	08 f4       	brcc	.+2      	; 0x2dc4 <__gesf2+0x8>
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	08 95       	ret

00002dc6 <__mulsi3>:
    2dc6:	db 01       	movw	r26, r22
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__muluhisi3>
    2dd0:	bf 91       	pop	r27
    2dd2:	af 91       	pop	r26
    2dd4:	a2 9f       	mul	r26, r18
    2dd6:	80 0d       	add	r24, r0
    2dd8:	91 1d       	adc	r25, r1
    2dda:	a3 9f       	mul	r26, r19
    2ddc:	90 0d       	add	r25, r0
    2dde:	b2 9f       	mul	r27, r18
    2de0:	90 0d       	add	r25, r0
    2de2:	11 24       	eor	r1, r1
    2de4:	08 95       	ret

00002de6 <__udivmodsi4>:
    2de6:	a1 e2       	ldi	r26, 0x21	; 33
    2de8:	1a 2e       	mov	r1, r26
    2dea:	aa 1b       	sub	r26, r26
    2dec:	bb 1b       	sub	r27, r27
    2dee:	fd 01       	movw	r30, r26
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <__udivmodsi4_ep>

00002df2 <__udivmodsi4_loop>:
    2df2:	aa 1f       	adc	r26, r26
    2df4:	bb 1f       	adc	r27, r27
    2df6:	ee 1f       	adc	r30, r30
    2df8:	ff 1f       	adc	r31, r31
    2dfa:	a2 17       	cp	r26, r18
    2dfc:	b3 07       	cpc	r27, r19
    2dfe:	e4 07       	cpc	r30, r20
    2e00:	f5 07       	cpc	r31, r21
    2e02:	20 f0       	brcs	.+8      	; 0x2e0c <__udivmodsi4_ep>
    2e04:	a2 1b       	sub	r26, r18
    2e06:	b3 0b       	sbc	r27, r19
    2e08:	e4 0b       	sbc	r30, r20
    2e0a:	f5 0b       	sbc	r31, r21

00002e0c <__udivmodsi4_ep>:
    2e0c:	66 1f       	adc	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	88 1f       	adc	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	1a 94       	dec	r1
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <__udivmodsi4_loop>
    2e18:	60 95       	com	r22
    2e1a:	70 95       	com	r23
    2e1c:	80 95       	com	r24
    2e1e:	90 95       	com	r25
    2e20:	9b 01       	movw	r18, r22
    2e22:	ac 01       	movw	r20, r24
    2e24:	bd 01       	movw	r22, r26
    2e26:	cf 01       	movw	r24, r30
    2e28:	08 95       	ret

00002e2a <__tablejump2__>:
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	00 24       	eor	r0, r0
    2e30:	00 1c       	adc	r0, r0
    2e32:	0b be       	out	0x3b, r0	; 59
    2e34:	07 90       	elpm	r0, Z+
    2e36:	f6 91       	elpm	r31, Z
    2e38:	e0 2d       	mov	r30, r0
    2e3a:	09 94       	ijmp

00002e3c <__umulhisi3>:
    2e3c:	a2 9f       	mul	r26, r18
    2e3e:	b0 01       	movw	r22, r0
    2e40:	b3 9f       	mul	r27, r19
    2e42:	c0 01       	movw	r24, r0
    2e44:	a3 9f       	mul	r26, r19
    2e46:	70 0d       	add	r23, r0
    2e48:	81 1d       	adc	r24, r1
    2e4a:	11 24       	eor	r1, r1
    2e4c:	91 1d       	adc	r25, r1
    2e4e:	b2 9f       	mul	r27, r18
    2e50:	70 0d       	add	r23, r0
    2e52:	81 1d       	adc	r24, r1
    2e54:	11 24       	eor	r1, r1
    2e56:	91 1d       	adc	r25, r1
    2e58:	08 95       	ret

00002e5a <__muluhisi3>:
    2e5a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__umulhisi3>
    2e5e:	a5 9f       	mul	r26, r21
    2e60:	90 0d       	add	r25, r0
    2e62:	b4 9f       	mul	r27, r20
    2e64:	90 0d       	add	r25, r0
    2e66:	a4 9f       	mul	r26, r20
    2e68:	80 0d       	add	r24, r0
    2e6a:	91 1d       	adc	r25, r1
    2e6c:	11 24       	eor	r1, r1
    2e6e:	08 95       	ret

00002e70 <malloc>:
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	10 f4       	brcc	.+4      	; 0x2e82 <malloc+0x12>
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	e0 91 21 41 	lds	r30, 0x4121	; 0x804121 <__flp>
    2e86:	f0 91 22 41 	lds	r31, 0x4122	; 0x804122 <__flp+0x1>
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	30 97       	sbiw	r30, 0x00	; 0
    2e94:	99 f4       	brne	.+38     	; 0x2ebc <malloc+0x4c>
    2e96:	21 15       	cp	r18, r1
    2e98:	31 05       	cpc	r19, r1
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <malloc+0x2e>
    2e9c:	4a c0       	rjmp	.+148    	; 0x2f32 <malloc+0xc2>
    2e9e:	28 1b       	sub	r18, r24
    2ea0:	39 0b       	sbc	r19, r25
    2ea2:	24 30       	cpi	r18, 0x04	; 4
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	d8 f5       	brcc	.+118    	; 0x2f1e <malloc+0xae>
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	61 15       	cp	r22, r1
    2eae:	71 05       	cpc	r23, r1
    2eb0:	89 f1       	breq	.+98     	; 0x2f14 <malloc+0xa4>
    2eb2:	fb 01       	movw	r30, r22
    2eb4:	82 83       	std	Z+2, r24	; 0x02
    2eb6:	93 83       	std	Z+3, r25	; 0x03
    2eb8:	fe 01       	movw	r30, r28
    2eba:	11 c0       	rjmp	.+34     	; 0x2ede <malloc+0x6e>
    2ebc:	40 81       	ld	r20, Z
    2ebe:	51 81       	ldd	r21, Z+1	; 0x01
    2ec0:	02 81       	ldd	r16, Z+2	; 0x02
    2ec2:	13 81       	ldd	r17, Z+3	; 0x03
    2ec4:	48 17       	cp	r20, r24
    2ec6:	59 07       	cpc	r21, r25
    2ec8:	e0 f0       	brcs	.+56     	; 0x2f02 <malloc+0x92>
    2eca:	48 17       	cp	r20, r24
    2ecc:	59 07       	cpc	r21, r25
    2ece:	99 f4       	brne	.+38     	; 0x2ef6 <malloc+0x86>
    2ed0:	10 97       	sbiw	r26, 0x00	; 0
    2ed2:	61 f0       	breq	.+24     	; 0x2eec <malloc+0x7c>
    2ed4:	12 96       	adiw	r26, 0x02	; 2
    2ed6:	0c 93       	st	X, r16
    2ed8:	12 97       	sbiw	r26, 0x02	; 2
    2eda:	13 96       	adiw	r26, 0x03	; 3
    2edc:	1c 93       	st	X, r17
    2ede:	32 96       	adiw	r30, 0x02	; 2
    2ee0:	cf 01       	movw	r24, r30
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret
    2eec:	00 93 21 41 	sts	0x4121, r16	; 0x804121 <__flp>
    2ef0:	10 93 22 41 	sts	0x4122, r17	; 0x804122 <__flp+0x1>
    2ef4:	f4 cf       	rjmp	.-24     	; 0x2ede <malloc+0x6e>
    2ef6:	21 15       	cp	r18, r1
    2ef8:	31 05       	cpc	r19, r1
    2efa:	51 f0       	breq	.+20     	; 0x2f10 <malloc+0xa0>
    2efc:	42 17       	cp	r20, r18
    2efe:	53 07       	cpc	r21, r19
    2f00:	38 f0       	brcs	.+14     	; 0x2f10 <malloc+0xa0>
    2f02:	a9 01       	movw	r20, r18
    2f04:	db 01       	movw	r26, r22
    2f06:	9a 01       	movw	r18, r20
    2f08:	bd 01       	movw	r22, r26
    2f0a:	df 01       	movw	r26, r30
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	c1 cf       	rjmp	.-126    	; 0x2e92 <malloc+0x22>
    2f10:	ef 01       	movw	r28, r30
    2f12:	f9 cf       	rjmp	.-14     	; 0x2f06 <malloc+0x96>
    2f14:	80 93 21 41 	sts	0x4121, r24	; 0x804121 <__flp>
    2f18:	90 93 22 41 	sts	0x4122, r25	; 0x804122 <__flp+0x1>
    2f1c:	cd cf       	rjmp	.-102    	; 0x2eb8 <malloc+0x48>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e2 0f       	add	r30, r18
    2f22:	f3 1f       	adc	r31, r19
    2f24:	81 93       	st	Z+, r24
    2f26:	91 93       	st	Z+, r25
    2f28:	22 50       	subi	r18, 0x02	; 2
    2f2a:	31 09       	sbc	r19, r1
    2f2c:	28 83       	st	Y, r18
    2f2e:	39 83       	std	Y+1, r19	; 0x01
    2f30:	d7 cf       	rjmp	.-82     	; 0x2ee0 <malloc+0x70>
    2f32:	20 91 1f 41 	lds	r18, 0x411F	; 0x80411f <__brkval>
    2f36:	30 91 20 41 	lds	r19, 0x4120	; 0x804120 <__brkval+0x1>
    2f3a:	23 2b       	or	r18, r19
    2f3c:	41 f4       	brne	.+16     	; 0x2f4e <malloc+0xde>
    2f3e:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    2f42:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    2f46:	20 93 1f 41 	sts	0x411F, r18	; 0x80411f <__brkval>
    2f4a:	30 93 20 41 	sts	0x4120, r19	; 0x804120 <__brkval+0x1>
    2f4e:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2f52:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    2f56:	21 15       	cp	r18, r1
    2f58:	31 05       	cpc	r19, r1
    2f5a:	41 f4       	brne	.+16     	; 0x2f6c <malloc+0xfc>
    2f5c:	2d b7       	in	r18, 0x3d	; 61
    2f5e:	3e b7       	in	r19, 0x3e	; 62
    2f60:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    2f64:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    2f68:	24 1b       	sub	r18, r20
    2f6a:	35 0b       	sbc	r19, r21
    2f6c:	e0 91 1f 41 	lds	r30, 0x411F	; 0x80411f <__brkval>
    2f70:	f0 91 20 41 	lds	r31, 0x4120	; 0x804120 <__brkval+0x1>
    2f74:	e2 17       	cp	r30, r18
    2f76:	f3 07       	cpc	r31, r19
    2f78:	a0 f4       	brcc	.+40     	; 0x2fa2 <malloc+0x132>
    2f7a:	2e 1b       	sub	r18, r30
    2f7c:	3f 0b       	sbc	r19, r31
    2f7e:	28 17       	cp	r18, r24
    2f80:	39 07       	cpc	r19, r25
    2f82:	78 f0       	brcs	.+30     	; 0x2fa2 <malloc+0x132>
    2f84:	ac 01       	movw	r20, r24
    2f86:	4e 5f       	subi	r20, 0xFE	; 254
    2f88:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8a:	24 17       	cp	r18, r20
    2f8c:	35 07       	cpc	r19, r21
    2f8e:	48 f0       	brcs	.+18     	; 0x2fa2 <malloc+0x132>
    2f90:	4e 0f       	add	r20, r30
    2f92:	5f 1f       	adc	r21, r31
    2f94:	40 93 1f 41 	sts	0x411F, r20	; 0x80411f <__brkval>
    2f98:	50 93 20 41 	sts	0x4120, r21	; 0x804120 <__brkval+0x1>
    2f9c:	81 93       	st	Z+, r24
    2f9e:	91 93       	st	Z+, r25
    2fa0:	9f cf       	rjmp	.-194    	; 0x2ee0 <malloc+0x70>
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	e0 e0       	ldi	r30, 0x00	; 0
    2fa6:	9c cf       	rjmp	.-200    	; 0x2ee0 <malloc+0x70>

00002fa8 <free>:
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	e9 f0       	breq	.+58     	; 0x2fea <free+0x42>
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	32 97       	sbiw	r30, 0x02	; 2
    2fb4:	12 82       	std	Z+2, r1	; 0x02
    2fb6:	13 82       	std	Z+3, r1	; 0x03
    2fb8:	a0 91 21 41 	lds	r26, 0x4121	; 0x804121 <__flp>
    2fbc:	b0 91 22 41 	lds	r27, 0x4122	; 0x804122 <__flp+0x1>
    2fc0:	ed 01       	movw	r28, r26
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	10 97       	sbiw	r26, 0x00	; 0
    2fc8:	a1 f4       	brne	.+40     	; 0x2ff2 <free+0x4a>
    2fca:	20 81       	ld	r18, Z
    2fcc:	31 81       	ldd	r19, Z+1	; 0x01
    2fce:	82 0f       	add	r24, r18
    2fd0:	93 1f       	adc	r25, r19
    2fd2:	20 91 1f 41 	lds	r18, 0x411F	; 0x80411f <__brkval>
    2fd6:	30 91 20 41 	lds	r19, 0x4120	; 0x804120 <__brkval+0x1>
    2fda:	28 17       	cp	r18, r24
    2fdc:	39 07       	cpc	r19, r25
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <free+0x3a>
    2fe0:	61 c0       	rjmp	.+194    	; 0x30a4 <free+0xfc>
    2fe2:	e0 93 1f 41 	sts	0x411F, r30	; 0x80411f <__brkval>
    2fe6:	f0 93 20 41 	sts	0x4120, r31	; 0x804120 <__brkval+0x1>
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret
    2ff0:	ea 01       	movw	r28, r20
    2ff2:	ce 17       	cp	r28, r30
    2ff4:	df 07       	cpc	r29, r31
    2ff6:	e8 f5       	brcc	.+122    	; 0x3072 <free+0xca>
    2ff8:	4a 81       	ldd	r20, Y+2	; 0x02
    2ffa:	5b 81       	ldd	r21, Y+3	; 0x03
    2ffc:	9e 01       	movw	r18, r28
    2ffe:	41 15       	cp	r20, r1
    3000:	51 05       	cpc	r21, r1
    3002:	b1 f7       	brne	.-20     	; 0x2ff0 <free+0x48>
    3004:	e9 01       	movw	r28, r18
    3006:	ea 83       	std	Y+2, r30	; 0x02
    3008:	fb 83       	std	Y+3, r31	; 0x03
    300a:	49 91       	ld	r20, Y+
    300c:	59 91       	ld	r21, Y+
    300e:	c4 0f       	add	r28, r20
    3010:	d5 1f       	adc	r29, r21
    3012:	ec 17       	cp	r30, r28
    3014:	fd 07       	cpc	r31, r29
    3016:	61 f4       	brne	.+24     	; 0x3030 <free+0x88>
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	02 96       	adiw	r24, 0x02	; 2
    301e:	84 0f       	add	r24, r20
    3020:	95 1f       	adc	r25, r21
    3022:	e9 01       	movw	r28, r18
    3024:	88 83       	st	Y, r24
    3026:	99 83       	std	Y+1, r25	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	8a 83       	std	Y+2, r24	; 0x02
    302e:	9b 83       	std	Y+3, r25	; 0x03
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	e0 e0       	ldi	r30, 0x00	; 0
    3034:	12 96       	adiw	r26, 0x02	; 2
    3036:	8d 91       	ld	r24, X+
    3038:	9c 91       	ld	r25, X
    303a:	13 97       	sbiw	r26, 0x03	; 3
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	b9 f5       	brne	.+110    	; 0x30ae <free+0x106>
    3040:	2d 91       	ld	r18, X+
    3042:	3c 91       	ld	r19, X
    3044:	11 97       	sbiw	r26, 0x01	; 1
    3046:	cd 01       	movw	r24, r26
    3048:	02 96       	adiw	r24, 0x02	; 2
    304a:	82 0f       	add	r24, r18
    304c:	93 1f       	adc	r25, r19
    304e:	20 91 1f 41 	lds	r18, 0x411F	; 0x80411f <__brkval>
    3052:	30 91 20 41 	lds	r19, 0x4120	; 0x804120 <__brkval+0x1>
    3056:	28 17       	cp	r18, r24
    3058:	39 07       	cpc	r19, r25
    305a:	39 f6       	brne	.-114    	; 0x2fea <free+0x42>
    305c:	30 97       	sbiw	r30, 0x00	; 0
    305e:	51 f5       	brne	.+84     	; 0x30b4 <free+0x10c>
    3060:	10 92 21 41 	sts	0x4121, r1	; 0x804121 <__flp>
    3064:	10 92 22 41 	sts	0x4122, r1	; 0x804122 <__flp+0x1>
    3068:	a0 93 1f 41 	sts	0x411F, r26	; 0x80411f <__brkval>
    306c:	b0 93 20 41 	sts	0x4120, r27	; 0x804120 <__brkval+0x1>
    3070:	bc cf       	rjmp	.-136    	; 0x2fea <free+0x42>
    3072:	c2 83       	std	Z+2, r28	; 0x02
    3074:	d3 83       	std	Z+3, r29	; 0x03
    3076:	40 81       	ld	r20, Z
    3078:	51 81       	ldd	r21, Z+1	; 0x01
    307a:	84 0f       	add	r24, r20
    307c:	95 1f       	adc	r25, r21
    307e:	c8 17       	cp	r28, r24
    3080:	d9 07       	cpc	r29, r25
    3082:	61 f4       	brne	.+24     	; 0x309c <free+0xf4>
    3084:	4e 5f       	subi	r20, 0xFE	; 254
    3086:	5f 4f       	sbci	r21, 0xFF	; 255
    3088:	88 81       	ld	r24, Y
    308a:	99 81       	ldd	r25, Y+1	; 0x01
    308c:	48 0f       	add	r20, r24
    308e:	59 1f       	adc	r21, r25
    3090:	40 83       	st	Z, r20
    3092:	51 83       	std	Z+1, r21	; 0x01
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	82 83       	std	Z+2, r24	; 0x02
    309a:	93 83       	std	Z+3, r25	; 0x03
    309c:	21 15       	cp	r18, r1
    309e:	31 05       	cpc	r19, r1
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <free+0xfc>
    30a2:	b0 cf       	rjmp	.-160    	; 0x3004 <free+0x5c>
    30a4:	e0 93 21 41 	sts	0x4121, r30	; 0x804121 <__flp>
    30a8:	f0 93 22 41 	sts	0x4122, r31	; 0x804122 <__flp+0x1>
    30ac:	9e cf       	rjmp	.-196    	; 0x2fea <free+0x42>
    30ae:	fd 01       	movw	r30, r26
    30b0:	dc 01       	movw	r26, r24
    30b2:	c0 cf       	rjmp	.-128    	; 0x3034 <free+0x8c>
    30b4:	12 82       	std	Z+2, r1	; 0x02
    30b6:	13 82       	std	Z+3, r1	; 0x03
    30b8:	d7 cf       	rjmp	.-82     	; 0x3068 <free+0xc0>

000030ba <sprintf>:
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	2e 97       	sbiw	r28, 0x0e	; 14
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0d 89       	ldd	r16, Y+21	; 0x15
    30ce:	1e 89       	ldd	r17, Y+22	; 0x16
    30d0:	86 e0       	ldi	r24, 0x06	; 6
    30d2:	8c 83       	std	Y+4, r24	; 0x04
    30d4:	09 83       	std	Y+1, r16	; 0x01
    30d6:	1a 83       	std	Y+2, r17	; 0x02
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	9f e7       	ldi	r25, 0x7F	; 127
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	9e 83       	std	Y+6, r25	; 0x06
    30e0:	ae 01       	movw	r20, r28
    30e2:	47 5e       	subi	r20, 0xE7	; 231
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	6f 89       	ldd	r22, Y+23	; 0x17
    30e8:	78 8d       	ldd	r23, Y+24	; 0x18
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	0e 94 87 18 	call	0x310e	; 0x310e <vfprintf>
    30f2:	2f 81       	ldd	r18, Y+7	; 0x07
    30f4:	38 85       	ldd	r19, Y+8	; 0x08
    30f6:	02 0f       	add	r16, r18
    30f8:	13 1f       	adc	r17, r19
    30fa:	f8 01       	movw	r30, r16
    30fc:	10 82       	st	Z, r1
    30fe:	2e 96       	adiw	r28, 0x0e	; 14
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	1f 91       	pop	r17
    310a:	0f 91       	pop	r16
    310c:	08 95       	ret

0000310e <vfprintf>:
    310e:	2f 92       	push	r2
    3110:	3f 92       	push	r3
    3112:	4f 92       	push	r4
    3114:	5f 92       	push	r5
    3116:	6f 92       	push	r6
    3118:	7f 92       	push	r7
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	2b 97       	sbiw	r28, 0x0b	; 11
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	7c 01       	movw	r14, r24
    313e:	3b 01       	movw	r6, r22
    3140:	8a 01       	movw	r16, r20
    3142:	fc 01       	movw	r30, r24
    3144:	16 82       	std	Z+6, r1	; 0x06
    3146:	17 82       	std	Z+7, r1	; 0x07
    3148:	83 81       	ldd	r24, Z+3	; 0x03
    314a:	81 ff       	sbrs	r24, 1
    314c:	da c1       	rjmp	.+948    	; 0x3502 <vfprintf+0x3f4>
    314e:	ce 01       	movw	r24, r28
    3150:	01 96       	adiw	r24, 0x01	; 1
    3152:	5c 01       	movw	r10, r24
    3154:	f7 01       	movw	r30, r14
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	f3 01       	movw	r30, r6
    315a:	93 fd       	sbrc	r25, 3
    315c:	85 91       	lpm	r24, Z+
    315e:	93 ff       	sbrs	r25, 3
    3160:	81 91       	ld	r24, Z+
    3162:	3f 01       	movw	r6, r30
    3164:	88 23       	and	r24, r24
    3166:	09 f4       	brne	.+2      	; 0x316a <vfprintf+0x5c>
    3168:	53 c1       	rjmp	.+678    	; 0x3410 <vfprintf+0x302>
    316a:	85 32       	cpi	r24, 0x25	; 37
    316c:	39 f4       	brne	.+14     	; 0x317c <vfprintf+0x6e>
    316e:	93 fd       	sbrc	r25, 3
    3170:	85 91       	lpm	r24, Z+
    3172:	93 ff       	sbrs	r25, 3
    3174:	81 91       	ld	r24, Z+
    3176:	3f 01       	movw	r6, r30
    3178:	85 32       	cpi	r24, 0x25	; 37
    317a:	29 f4       	brne	.+10     	; 0x3186 <vfprintf+0x78>
    317c:	b7 01       	movw	r22, r14
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    3184:	e7 cf       	rjmp	.-50     	; 0x3154 <vfprintf+0x46>
    3186:	91 2c       	mov	r9, r1
    3188:	21 2c       	mov	r2, r1
    318a:	31 2c       	mov	r3, r1
    318c:	ff e1       	ldi	r31, 0x1F	; 31
    318e:	f3 15       	cp	r31, r3
    3190:	38 f0       	brcs	.+14     	; 0x31a0 <vfprintf+0x92>
    3192:	8b 32       	cpi	r24, 0x2B	; 43
    3194:	11 f1       	breq	.+68     	; 0x31da <vfprintf+0xcc>
    3196:	90 f4       	brcc	.+36     	; 0x31bc <vfprintf+0xae>
    3198:	80 32       	cpi	r24, 0x20	; 32
    319a:	09 f1       	breq	.+66     	; 0x31de <vfprintf+0xd0>
    319c:	83 32       	cpi	r24, 0x23	; 35
    319e:	29 f1       	breq	.+74     	; 0x31ea <vfprintf+0xdc>
    31a0:	37 fc       	sbrc	r3, 7
    31a2:	3c c0       	rjmp	.+120    	; 0x321c <vfprintf+0x10e>
    31a4:	20 ed       	ldi	r18, 0xD0	; 208
    31a6:	28 0f       	add	r18, r24
    31a8:	2a 30       	cpi	r18, 0x0A	; 10
    31aa:	50 f5       	brcc	.+84     	; 0x3200 <vfprintf+0xf2>
    31ac:	36 fe       	sbrs	r3, 6
    31ae:	20 c0       	rjmp	.+64     	; 0x31f0 <vfprintf+0xe2>
    31b0:	8a e0       	ldi	r24, 0x0A	; 10
    31b2:	98 9e       	mul	r9, r24
    31b4:	20 0d       	add	r18, r0
    31b6:	11 24       	eor	r1, r1
    31b8:	92 2e       	mov	r9, r18
    31ba:	06 c0       	rjmp	.+12     	; 0x31c8 <vfprintf+0xba>
    31bc:	8d 32       	cpi	r24, 0x2D	; 45
    31be:	91 f0       	breq	.+36     	; 0x31e4 <vfprintf+0xd6>
    31c0:	80 33       	cpi	r24, 0x30	; 48
    31c2:	71 f7       	brne	.-36     	; 0x31a0 <vfprintf+0x92>
    31c4:	68 94       	set
    31c6:	30 f8       	bld	r3, 0
    31c8:	f3 01       	movw	r30, r6
    31ca:	93 fd       	sbrc	r25, 3
    31cc:	85 91       	lpm	r24, Z+
    31ce:	93 ff       	sbrs	r25, 3
    31d0:	81 91       	ld	r24, Z+
    31d2:	3f 01       	movw	r6, r30
    31d4:	81 11       	cpse	r24, r1
    31d6:	da cf       	rjmp	.-76     	; 0x318c <vfprintf+0x7e>
    31d8:	21 c0       	rjmp	.+66     	; 0x321c <vfprintf+0x10e>
    31da:	68 94       	set
    31dc:	31 f8       	bld	r3, 1
    31de:	68 94       	set
    31e0:	32 f8       	bld	r3, 2
    31e2:	f2 cf       	rjmp	.-28     	; 0x31c8 <vfprintf+0xba>
    31e4:	68 94       	set
    31e6:	33 f8       	bld	r3, 3
    31e8:	ef cf       	rjmp	.-34     	; 0x31c8 <vfprintf+0xba>
    31ea:	68 94       	set
    31ec:	34 f8       	bld	r3, 4
    31ee:	ec cf       	rjmp	.-40     	; 0x31c8 <vfprintf+0xba>
    31f0:	ea e0       	ldi	r30, 0x0A	; 10
    31f2:	2e 9e       	mul	r2, r30
    31f4:	20 0d       	add	r18, r0
    31f6:	11 24       	eor	r1, r1
    31f8:	22 2e       	mov	r2, r18
    31fa:	68 94       	set
    31fc:	35 f8       	bld	r3, 5
    31fe:	e4 cf       	rjmp	.-56     	; 0x31c8 <vfprintf+0xba>
    3200:	8e 32       	cpi	r24, 0x2E	; 46
    3202:	29 f4       	brne	.+10     	; 0x320e <vfprintf+0x100>
    3204:	36 fc       	sbrc	r3, 6
    3206:	04 c1       	rjmp	.+520    	; 0x3410 <vfprintf+0x302>
    3208:	68 94       	set
    320a:	36 f8       	bld	r3, 6
    320c:	dd cf       	rjmp	.-70     	; 0x31c8 <vfprintf+0xba>
    320e:	8c 36       	cpi	r24, 0x6C	; 108
    3210:	19 f4       	brne	.+6      	; 0x3218 <vfprintf+0x10a>
    3212:	68 94       	set
    3214:	37 f8       	bld	r3, 7
    3216:	d8 cf       	rjmp	.-80     	; 0x31c8 <vfprintf+0xba>
    3218:	88 36       	cpi	r24, 0x68	; 104
    321a:	b1 f2       	breq	.-84     	; 0x31c8 <vfprintf+0xba>
    321c:	98 2f       	mov	r25, r24
    321e:	9f 7d       	andi	r25, 0xDF	; 223
    3220:	95 54       	subi	r25, 0x45	; 69
    3222:	93 30       	cpi	r25, 0x03	; 3
    3224:	e0 f0       	brcs	.+56     	; 0x325e <vfprintf+0x150>
    3226:	83 36       	cpi	r24, 0x63	; 99
    3228:	a1 f1       	breq	.+104    	; 0x3292 <vfprintf+0x184>
    322a:	83 37       	cpi	r24, 0x73	; 115
    322c:	c1 f1       	breq	.+112    	; 0x329e <vfprintf+0x190>
    322e:	83 35       	cpi	r24, 0x53	; 83
    3230:	09 f0       	breq	.+2      	; 0x3234 <vfprintf+0x126>
    3232:	63 c0       	rjmp	.+198    	; 0x32fa <vfprintf+0x1ec>
    3234:	28 01       	movw	r4, r16
    3236:	f2 e0       	ldi	r31, 0x02	; 2
    3238:	4f 0e       	add	r4, r31
    323a:	51 1c       	adc	r5, r1
    323c:	f8 01       	movw	r30, r16
    323e:	c0 80       	ld	r12, Z
    3240:	d1 80       	ldd	r13, Z+1	; 0x01
    3242:	69 2d       	mov	r22, r9
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	36 fc       	sbrc	r3, 6
    3248:	02 c0       	rjmp	.+4      	; 0x324e <vfprintf+0x140>
    324a:	6f ef       	ldi	r22, 0xFF	; 255
    324c:	7f ef       	ldi	r23, 0xFF	; 255
    324e:	c6 01       	movw	r24, r12
    3250:	0e 94 84 1a 	call	0x3508	; 0x3508 <strnlen_P>
    3254:	4c 01       	movw	r8, r24
    3256:	68 94       	set
    3258:	37 f8       	bld	r3, 7
    325a:	82 01       	movw	r16, r4
    325c:	0a c0       	rjmp	.+20     	; 0x3272 <vfprintf+0x164>
    325e:	0c 5f       	subi	r16, 0xFC	; 252
    3260:	1f 4f       	sbci	r17, 0xFF	; 255
    3262:	ff e3       	ldi	r31, 0x3F	; 63
    3264:	f9 83       	std	Y+1, r31	; 0x01
    3266:	88 24       	eor	r8, r8
    3268:	83 94       	inc	r8
    326a:	91 2c       	mov	r9, r1
    326c:	65 01       	movw	r12, r10
    326e:	e8 94       	clt
    3270:	37 f8       	bld	r3, 7
    3272:	33 fe       	sbrs	r3, 3
    3274:	2d c0       	rjmp	.+90     	; 0x32d0 <vfprintf+0x1c2>
    3276:	52 2c       	mov	r5, r2
    3278:	81 14       	cp	r8, r1
    327a:	91 04       	cpc	r9, r1
    327c:	71 f5       	brne	.+92     	; 0x32da <vfprintf+0x1cc>
    327e:	55 20       	and	r5, r5
    3280:	09 f4       	brne	.+2      	; 0x3284 <vfprintf+0x176>
    3282:	68 cf       	rjmp	.-304    	; 0x3154 <vfprintf+0x46>
    3284:	b7 01       	movw	r22, r14
    3286:	80 e2       	ldi	r24, 0x20	; 32
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    328e:	5a 94       	dec	r5
    3290:	f6 cf       	rjmp	.-20     	; 0x327e <vfprintf+0x170>
    3292:	f8 01       	movw	r30, r16
    3294:	80 81       	ld	r24, Z
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	0e 5f       	subi	r16, 0xFE	; 254
    329a:	1f 4f       	sbci	r17, 0xFF	; 255
    329c:	e4 cf       	rjmp	.-56     	; 0x3266 <vfprintf+0x158>
    329e:	28 01       	movw	r4, r16
    32a0:	f2 e0       	ldi	r31, 0x02	; 2
    32a2:	4f 0e       	add	r4, r31
    32a4:	51 1c       	adc	r5, r1
    32a6:	f8 01       	movw	r30, r16
    32a8:	c0 80       	ld	r12, Z
    32aa:	d1 80       	ldd	r13, Z+1	; 0x01
    32ac:	69 2d       	mov	r22, r9
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	36 fc       	sbrc	r3, 6
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <vfprintf+0x1aa>
    32b4:	6f ef       	ldi	r22, 0xFF	; 255
    32b6:	7f ef       	ldi	r23, 0xFF	; 255
    32b8:	c6 01       	movw	r24, r12
    32ba:	0e 94 8f 1a 	call	0x351e	; 0x351e <strnlen>
    32be:	4c 01       	movw	r8, r24
    32c0:	82 01       	movw	r16, r4
    32c2:	d5 cf       	rjmp	.-86     	; 0x326e <vfprintf+0x160>
    32c4:	b7 01       	movw	r22, r14
    32c6:	80 e2       	ldi	r24, 0x20	; 32
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    32ce:	2a 94       	dec	r2
    32d0:	28 14       	cp	r2, r8
    32d2:	19 04       	cpc	r1, r9
    32d4:	09 f0       	breq	.+2      	; 0x32d8 <vfprintf+0x1ca>
    32d6:	b0 f7       	brcc	.-20     	; 0x32c4 <vfprintf+0x1b6>
    32d8:	ce cf       	rjmp	.-100    	; 0x3276 <vfprintf+0x168>
    32da:	f6 01       	movw	r30, r12
    32dc:	37 fc       	sbrc	r3, 7
    32de:	85 91       	lpm	r24, Z+
    32e0:	37 fe       	sbrs	r3, 7
    32e2:	81 91       	ld	r24, Z+
    32e4:	6f 01       	movw	r12, r30
    32e6:	b7 01       	movw	r22, r14
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    32ee:	51 10       	cpse	r5, r1
    32f0:	5a 94       	dec	r5
    32f2:	f1 e0       	ldi	r31, 0x01	; 1
    32f4:	8f 1a       	sub	r8, r31
    32f6:	91 08       	sbc	r9, r1
    32f8:	bf cf       	rjmp	.-130    	; 0x3278 <vfprintf+0x16a>
    32fa:	84 36       	cpi	r24, 0x64	; 100
    32fc:	19 f0       	breq	.+6      	; 0x3304 <vfprintf+0x1f6>
    32fe:	89 36       	cpi	r24, 0x69	; 105
    3300:	09 f0       	breq	.+2      	; 0x3304 <vfprintf+0x1f6>
    3302:	77 c0       	rjmp	.+238    	; 0x33f2 <vfprintf+0x2e4>
    3304:	f8 01       	movw	r30, r16
    3306:	37 fe       	sbrs	r3, 7
    3308:	6b c0       	rjmp	.+214    	; 0x33e0 <vfprintf+0x2d2>
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	0c 5f       	subi	r16, 0xFC	; 252
    3314:	1f 4f       	sbci	r17, 0xFF	; 255
    3316:	f3 2d       	mov	r31, r3
    3318:	ff 76       	andi	r31, 0x6F	; 111
    331a:	3f 2e       	mov	r3, r31
    331c:	97 ff       	sbrs	r25, 7
    331e:	09 c0       	rjmp	.+18     	; 0x3332 <vfprintf+0x224>
    3320:	90 95       	com	r25
    3322:	80 95       	com	r24
    3324:	70 95       	com	r23
    3326:	61 95       	neg	r22
    3328:	7f 4f       	sbci	r23, 0xFF	; 255
    332a:	8f 4f       	sbci	r24, 0xFF	; 255
    332c:	9f 4f       	sbci	r25, 0xFF	; 255
    332e:	68 94       	set
    3330:	37 f8       	bld	r3, 7
    3332:	2a e0       	ldi	r18, 0x0A	; 10
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	a5 01       	movw	r20, r10
    3338:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__ultoa_invert>
    333c:	c8 2e       	mov	r12, r24
    333e:	ca 18       	sub	r12, r10
    3340:	8c 2c       	mov	r8, r12
    3342:	43 2c       	mov	r4, r3
    3344:	36 fe       	sbrs	r3, 6
    3346:	0c c0       	rjmp	.+24     	; 0x3360 <vfprintf+0x252>
    3348:	e8 94       	clt
    334a:	40 f8       	bld	r4, 0
    334c:	c9 14       	cp	r12, r9
    334e:	40 f4       	brcc	.+16     	; 0x3360 <vfprintf+0x252>
    3350:	34 fe       	sbrs	r3, 4
    3352:	05 c0       	rjmp	.+10     	; 0x335e <vfprintf+0x250>
    3354:	32 fc       	sbrc	r3, 2
    3356:	03 c0       	rjmp	.+6      	; 0x335e <vfprintf+0x250>
    3358:	f3 2d       	mov	r31, r3
    335a:	fe 7e       	andi	r31, 0xEE	; 238
    335c:	4f 2e       	mov	r4, r31
    335e:	89 2c       	mov	r8, r9
    3360:	44 fe       	sbrs	r4, 4
    3362:	a7 c0       	rjmp	.+334    	; 0x34b2 <vfprintf+0x3a4>
    3364:	fe 01       	movw	r30, r28
    3366:	ec 0d       	add	r30, r12
    3368:	f1 1d       	adc	r31, r1
    336a:	80 81       	ld	r24, Z
    336c:	80 33       	cpi	r24, 0x30	; 48
    336e:	09 f0       	breq	.+2      	; 0x3372 <vfprintf+0x264>
    3370:	99 c0       	rjmp	.+306    	; 0x34a4 <vfprintf+0x396>
    3372:	24 2d       	mov	r18, r4
    3374:	29 7e       	andi	r18, 0xE9	; 233
    3376:	42 2e       	mov	r4, r18
    3378:	84 2d       	mov	r24, r4
    337a:	88 70       	andi	r24, 0x08	; 8
    337c:	58 2e       	mov	r5, r24
    337e:	43 fc       	sbrc	r4, 3
    3380:	a7 c0       	rjmp	.+334    	; 0x34d0 <vfprintf+0x3c2>
    3382:	40 fe       	sbrs	r4, 0
    3384:	a1 c0       	rjmp	.+322    	; 0x34c8 <vfprintf+0x3ba>
    3386:	9c 2c       	mov	r9, r12
    3388:	82 14       	cp	r8, r2
    338a:	18 f4       	brcc	.+6      	; 0x3392 <vfprintf+0x284>
    338c:	2c 0c       	add	r2, r12
    338e:	92 2c       	mov	r9, r2
    3390:	98 18       	sub	r9, r8
    3392:	44 fe       	sbrs	r4, 4
    3394:	a3 c0       	rjmp	.+326    	; 0x34dc <vfprintf+0x3ce>
    3396:	b7 01       	movw	r22, r14
    3398:	80 e3       	ldi	r24, 0x30	; 48
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    33a0:	42 fe       	sbrs	r4, 2
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <vfprintf+0x2a8>
    33a4:	88 e7       	ldi	r24, 0x78	; 120
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	41 fe       	sbrs	r4, 1
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <vfprintf+0x2a2>
    33ac:	88 e5       	ldi	r24, 0x58	; 88
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	b7 01       	movw	r22, r14
    33b2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    33b6:	c9 14       	cp	r12, r9
    33b8:	08 f4       	brcc	.+2      	; 0x33bc <vfprintf+0x2ae>
    33ba:	9c c0       	rjmp	.+312    	; 0x34f4 <vfprintf+0x3e6>
    33bc:	ca 94       	dec	r12
    33be:	d1 2c       	mov	r13, r1
    33c0:	9f ef       	ldi	r25, 0xFF	; 255
    33c2:	c9 1a       	sub	r12, r25
    33c4:	d9 0a       	sbc	r13, r25
    33c6:	ca 0c       	add	r12, r10
    33c8:	db 1c       	adc	r13, r11
    33ca:	f6 01       	movw	r30, r12
    33cc:	82 91       	ld	r24, -Z
    33ce:	6f 01       	movw	r12, r30
    33d0:	b7 01       	movw	r22, r14
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    33d8:	ac 14       	cp	r10, r12
    33da:	bd 04       	cpc	r11, r13
    33dc:	b1 f7       	brne	.-20     	; 0x33ca <vfprintf+0x2bc>
    33de:	4f cf       	rjmp	.-354    	; 0x327e <vfprintf+0x170>
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	07 2e       	mov	r0, r23
    33e6:	00 0c       	add	r0, r0
    33e8:	88 0b       	sbc	r24, r24
    33ea:	99 0b       	sbc	r25, r25
    33ec:	0e 5f       	subi	r16, 0xFE	; 254
    33ee:	1f 4f       	sbci	r17, 0xFF	; 255
    33f0:	92 cf       	rjmp	.-220    	; 0x3316 <vfprintf+0x208>
    33f2:	d3 2c       	mov	r13, r3
    33f4:	e8 94       	clt
    33f6:	d4 f8       	bld	r13, 4
    33f8:	2a e0       	ldi	r18, 0x0A	; 10
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	85 37       	cpi	r24, 0x75	; 117
    33fe:	c9 f1       	breq	.+114    	; 0x3472 <vfprintf+0x364>
    3400:	23 2d       	mov	r18, r3
    3402:	29 7f       	andi	r18, 0xF9	; 249
    3404:	d2 2e       	mov	r13, r18
    3406:	8f 36       	cpi	r24, 0x6F	; 111
    3408:	91 f1       	breq	.+100    	; 0x346e <vfprintf+0x360>
    340a:	d8 f4       	brcc	.+54     	; 0x3442 <vfprintf+0x334>
    340c:	88 35       	cpi	r24, 0x58	; 88
    340e:	39 f1       	breq	.+78     	; 0x345e <vfprintf+0x350>
    3410:	f7 01       	movw	r30, r14
    3412:	86 81       	ldd	r24, Z+6	; 0x06
    3414:	97 81       	ldd	r25, Z+7	; 0x07
    3416:	2b 96       	adiw	r28, 0x0b	; 11
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	ff 90       	pop	r15
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	bf 90       	pop	r11
    342e:	af 90       	pop	r10
    3430:	9f 90       	pop	r9
    3432:	8f 90       	pop	r8
    3434:	7f 90       	pop	r7
    3436:	6f 90       	pop	r6
    3438:	5f 90       	pop	r5
    343a:	4f 90       	pop	r4
    343c:	3f 90       	pop	r3
    343e:	2f 90       	pop	r2
    3440:	08 95       	ret
    3442:	80 37       	cpi	r24, 0x70	; 112
    3444:	49 f0       	breq	.+18     	; 0x3458 <vfprintf+0x34a>
    3446:	88 37       	cpi	r24, 0x78	; 120
    3448:	19 f7       	brne	.-58     	; 0x3410 <vfprintf+0x302>
    344a:	d4 fe       	sbrs	r13, 4
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <vfprintf+0x344>
    344e:	68 94       	set
    3450:	d2 f8       	bld	r13, 2
    3452:	20 e1       	ldi	r18, 0x10	; 16
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	0d c0       	rjmp	.+26     	; 0x3472 <vfprintf+0x364>
    3458:	68 94       	set
    345a:	d4 f8       	bld	r13, 4
    345c:	f6 cf       	rjmp	.-20     	; 0x344a <vfprintf+0x33c>
    345e:	34 fe       	sbrs	r3, 4
    3460:	03 c0       	rjmp	.+6      	; 0x3468 <vfprintf+0x35a>
    3462:	82 2f       	mov	r24, r18
    3464:	86 60       	ori	r24, 0x06	; 6
    3466:	d8 2e       	mov	r13, r24
    3468:	20 e1       	ldi	r18, 0x10	; 16
    346a:	32 e0       	ldi	r19, 0x02	; 2
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <vfprintf+0x364>
    346e:	28 e0       	ldi	r18, 0x08	; 8
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	f8 01       	movw	r30, r16
    3474:	d7 fe       	sbrs	r13, 7
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <vfprintf+0x388>
    3478:	60 81       	ld	r22, Z
    347a:	71 81       	ldd	r23, Z+1	; 0x01
    347c:	82 81       	ldd	r24, Z+2	; 0x02
    347e:	93 81       	ldd	r25, Z+3	; 0x03
    3480:	0c 5f       	subi	r16, 0xFC	; 252
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	a5 01       	movw	r20, r10
    3486:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__ultoa_invert>
    348a:	c8 2e       	mov	r12, r24
    348c:	ca 18       	sub	r12, r10
    348e:	3d 2c       	mov	r3, r13
    3490:	e8 94       	clt
    3492:	37 f8       	bld	r3, 7
    3494:	55 cf       	rjmp	.-342    	; 0x3340 <vfprintf+0x232>
    3496:	60 81       	ld	r22, Z
    3498:	71 81       	ldd	r23, Z+1	; 0x01
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	0e 5f       	subi	r16, 0xFE	; 254
    34a0:	1f 4f       	sbci	r17, 0xFF	; 255
    34a2:	f0 cf       	rjmp	.-32     	; 0x3484 <vfprintf+0x376>
    34a4:	42 fc       	sbrc	r4, 2
    34a6:	02 c0       	rjmp	.+4      	; 0x34ac <vfprintf+0x39e>
    34a8:	83 94       	inc	r8
    34aa:	66 cf       	rjmp	.-308    	; 0x3378 <vfprintf+0x26a>
    34ac:	83 94       	inc	r8
    34ae:	83 94       	inc	r8
    34b0:	63 cf       	rjmp	.-314    	; 0x3378 <vfprintf+0x26a>
    34b2:	84 2d       	mov	r24, r4
    34b4:	86 78       	andi	r24, 0x86	; 134
    34b6:	09 f4       	brne	.+2      	; 0x34ba <vfprintf+0x3ac>
    34b8:	5f cf       	rjmp	.-322    	; 0x3378 <vfprintf+0x26a>
    34ba:	f6 cf       	rjmp	.-20     	; 0x34a8 <vfprintf+0x39a>
    34bc:	b7 01       	movw	r22, r14
    34be:	80 e2       	ldi	r24, 0x20	; 32
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    34c6:	83 94       	inc	r8
    34c8:	82 14       	cp	r8, r2
    34ca:	c0 f3       	brcs	.-16     	; 0x34bc <vfprintf+0x3ae>
    34cc:	51 2c       	mov	r5, r1
    34ce:	61 cf       	rjmp	.-318    	; 0x3392 <vfprintf+0x284>
    34d0:	52 2c       	mov	r5, r2
    34d2:	58 18       	sub	r5, r8
    34d4:	82 14       	cp	r8, r2
    34d6:	08 f4       	brcc	.+2      	; 0x34da <vfprintf+0x3cc>
    34d8:	5c cf       	rjmp	.-328    	; 0x3392 <vfprintf+0x284>
    34da:	f8 cf       	rjmp	.-16     	; 0x34cc <vfprintf+0x3be>
    34dc:	84 2d       	mov	r24, r4
    34de:	86 78       	andi	r24, 0x86	; 134
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vfprintf+0x3d6>
    34e2:	69 cf       	rjmp	.-302    	; 0x33b6 <vfprintf+0x2a8>
    34e4:	8b e2       	ldi	r24, 0x2B	; 43
    34e6:	41 fe       	sbrs	r4, 1
    34e8:	80 e2       	ldi	r24, 0x20	; 32
    34ea:	47 fc       	sbrc	r4, 7
    34ec:	8d e2       	ldi	r24, 0x2D	; 45
    34ee:	b7 01       	movw	r22, r14
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	5f cf       	rjmp	.-322    	; 0x33b2 <vfprintf+0x2a4>
    34f4:	b7 01       	movw	r22, r14
    34f6:	80 e3       	ldi	r24, 0x30	; 48
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	0e 94 9a 1a 	call	0x3534	; 0x3534 <fputc>
    34fe:	9a 94       	dec	r9
    3500:	5a cf       	rjmp	.-332    	; 0x33b6 <vfprintf+0x2a8>
    3502:	8f ef       	ldi	r24, 0xFF	; 255
    3504:	9f ef       	ldi	r25, 0xFF	; 255
    3506:	87 cf       	rjmp	.-242    	; 0x3416 <vfprintf+0x308>

00003508 <strnlen_P>:
    3508:	fc 01       	movw	r30, r24
    350a:	05 90       	lpm	r0, Z+
    350c:	61 50       	subi	r22, 0x01	; 1
    350e:	70 40       	sbci	r23, 0x00	; 0
    3510:	01 10       	cpse	r0, r1
    3512:	d8 f7       	brcc	.-10     	; 0x350a <strnlen_P+0x2>
    3514:	80 95       	com	r24
    3516:	90 95       	com	r25
    3518:	8e 0f       	add	r24, r30
    351a:	9f 1f       	adc	r25, r31
    351c:	08 95       	ret

0000351e <strnlen>:
    351e:	fc 01       	movw	r30, r24
    3520:	61 50       	subi	r22, 0x01	; 1
    3522:	70 40       	sbci	r23, 0x00	; 0
    3524:	01 90       	ld	r0, Z+
    3526:	01 10       	cpse	r0, r1
    3528:	d8 f7       	brcc	.-10     	; 0x3520 <strnlen+0x2>
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	8e 0f       	add	r24, r30
    3530:	9f 1f       	adc	r25, r31
    3532:	08 95       	ret

00003534 <fputc>:
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	18 2f       	mov	r17, r24
    353e:	09 2f       	mov	r16, r25
    3540:	eb 01       	movw	r28, r22
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	81 fd       	sbrc	r24, 1
    3546:	09 c0       	rjmp	.+18     	; 0x355a <fputc+0x26>
    3548:	1f ef       	ldi	r17, 0xFF	; 255
    354a:	0f ef       	ldi	r16, 0xFF	; 255
    354c:	81 2f       	mov	r24, r17
    354e:	90 2f       	mov	r25, r16
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	08 95       	ret
    355a:	82 ff       	sbrs	r24, 2
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <fputc+0x52>
    355e:	2e 81       	ldd	r18, Y+6	; 0x06
    3560:	3f 81       	ldd	r19, Y+7	; 0x07
    3562:	8c 81       	ldd	r24, Y+4	; 0x04
    3564:	9d 81       	ldd	r25, Y+5	; 0x05
    3566:	28 17       	cp	r18, r24
    3568:	39 07       	cpc	r19, r25
    356a:	3c f4       	brge	.+14     	; 0x357a <fputc+0x46>
    356c:	e8 81       	ld	r30, Y
    356e:	f9 81       	ldd	r31, Y+1	; 0x01
    3570:	cf 01       	movw	r24, r30
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	88 83       	st	Y, r24
    3576:	99 83       	std	Y+1, r25	; 0x01
    3578:	10 83       	st	Z, r17
    357a:	8e 81       	ldd	r24, Y+6	; 0x06
    357c:	9f 81       	ldd	r25, Y+7	; 0x07
    357e:	01 96       	adiw	r24, 0x01	; 1
    3580:	8e 83       	std	Y+6, r24	; 0x06
    3582:	9f 83       	std	Y+7, r25	; 0x07
    3584:	e3 cf       	rjmp	.-58     	; 0x354c <fputc+0x18>
    3586:	e8 85       	ldd	r30, Y+8	; 0x08
    3588:	f9 85       	ldd	r31, Y+9	; 0x09
    358a:	81 2f       	mov	r24, r17
    358c:	09 95       	icall
    358e:	89 2b       	or	r24, r25
    3590:	a1 f3       	breq	.-24     	; 0x357a <fputc+0x46>
    3592:	da cf       	rjmp	.-76     	; 0x3548 <fputc+0x14>

00003594 <__ultoa_invert>:
    3594:	fa 01       	movw	r30, r20
    3596:	aa 27       	eor	r26, r26
    3598:	28 30       	cpi	r18, 0x08	; 8
    359a:	51 f1       	breq	.+84     	; 0x35f0 <__ultoa_invert+0x5c>
    359c:	20 31       	cpi	r18, 0x10	; 16
    359e:	81 f1       	breq	.+96     	; 0x3600 <__ultoa_invert+0x6c>
    35a0:	e8 94       	clt
    35a2:	6f 93       	push	r22
    35a4:	6e 7f       	andi	r22, 0xFE	; 254
    35a6:	6e 5f       	subi	r22, 0xFE	; 254
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	8f 4f       	sbci	r24, 0xFF	; 255
    35ac:	9f 4f       	sbci	r25, 0xFF	; 255
    35ae:	af 4f       	sbci	r26, 0xFF	; 255
    35b0:	b1 e0       	ldi	r27, 0x01	; 1
    35b2:	3e d0       	rcall	.+124    	; 0x3630 <__ultoa_invert+0x9c>
    35b4:	b4 e0       	ldi	r27, 0x04	; 4
    35b6:	3c d0       	rcall	.+120    	; 0x3630 <__ultoa_invert+0x9c>
    35b8:	67 0f       	add	r22, r23
    35ba:	78 1f       	adc	r23, r24
    35bc:	89 1f       	adc	r24, r25
    35be:	9a 1f       	adc	r25, r26
    35c0:	a1 1d       	adc	r26, r1
    35c2:	68 0f       	add	r22, r24
    35c4:	79 1f       	adc	r23, r25
    35c6:	8a 1f       	adc	r24, r26
    35c8:	91 1d       	adc	r25, r1
    35ca:	a1 1d       	adc	r26, r1
    35cc:	6a 0f       	add	r22, r26
    35ce:	71 1d       	adc	r23, r1
    35d0:	81 1d       	adc	r24, r1
    35d2:	91 1d       	adc	r25, r1
    35d4:	a1 1d       	adc	r26, r1
    35d6:	20 d0       	rcall	.+64     	; 0x3618 <__ultoa_invert+0x84>
    35d8:	09 f4       	brne	.+2      	; 0x35dc <__ultoa_invert+0x48>
    35da:	68 94       	set
    35dc:	3f 91       	pop	r19
    35de:	2a e0       	ldi	r18, 0x0A	; 10
    35e0:	26 9f       	mul	r18, r22
    35e2:	11 24       	eor	r1, r1
    35e4:	30 19       	sub	r19, r0
    35e6:	30 5d       	subi	r19, 0xD0	; 208
    35e8:	31 93       	st	Z+, r19
    35ea:	de f6       	brtc	.-74     	; 0x35a2 <__ultoa_invert+0xe>
    35ec:	cf 01       	movw	r24, r30
    35ee:	08 95       	ret
    35f0:	46 2f       	mov	r20, r22
    35f2:	47 70       	andi	r20, 0x07	; 7
    35f4:	40 5d       	subi	r20, 0xD0	; 208
    35f6:	41 93       	st	Z+, r20
    35f8:	b3 e0       	ldi	r27, 0x03	; 3
    35fa:	0f d0       	rcall	.+30     	; 0x361a <__ultoa_invert+0x86>
    35fc:	c9 f7       	brne	.-14     	; 0x35f0 <__ultoa_invert+0x5c>
    35fe:	f6 cf       	rjmp	.-20     	; 0x35ec <__ultoa_invert+0x58>
    3600:	46 2f       	mov	r20, r22
    3602:	4f 70       	andi	r20, 0x0F	; 15
    3604:	40 5d       	subi	r20, 0xD0	; 208
    3606:	4a 33       	cpi	r20, 0x3A	; 58
    3608:	18 f0       	brcs	.+6      	; 0x3610 <__ultoa_invert+0x7c>
    360a:	49 5d       	subi	r20, 0xD9	; 217
    360c:	31 fd       	sbrc	r19, 1
    360e:	40 52       	subi	r20, 0x20	; 32
    3610:	41 93       	st	Z+, r20
    3612:	02 d0       	rcall	.+4      	; 0x3618 <__ultoa_invert+0x84>
    3614:	a9 f7       	brne	.-22     	; 0x3600 <__ultoa_invert+0x6c>
    3616:	ea cf       	rjmp	.-44     	; 0x35ec <__ultoa_invert+0x58>
    3618:	b4 e0       	ldi	r27, 0x04	; 4
    361a:	a6 95       	lsr	r26
    361c:	97 95       	ror	r25
    361e:	87 95       	ror	r24
    3620:	77 95       	ror	r23
    3622:	67 95       	ror	r22
    3624:	ba 95       	dec	r27
    3626:	c9 f7       	brne	.-14     	; 0x361a <__ultoa_invert+0x86>
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	61 05       	cpc	r22, r1
    362c:	71 05       	cpc	r23, r1
    362e:	08 95       	ret
    3630:	9b 01       	movw	r18, r22
    3632:	ac 01       	movw	r20, r24
    3634:	0a 2e       	mov	r0, r26
    3636:	06 94       	lsr	r0
    3638:	57 95       	ror	r21
    363a:	47 95       	ror	r20
    363c:	37 95       	ror	r19
    363e:	27 95       	ror	r18
    3640:	ba 95       	dec	r27
    3642:	c9 f7       	brne	.-14     	; 0x3636 <__ultoa_invert+0xa2>
    3644:	62 0f       	add	r22, r18
    3646:	73 1f       	adc	r23, r19
    3648:	84 1f       	adc	r24, r20
    364a:	95 1f       	adc	r25, r21
    364c:	a0 1d       	adc	r26, r0
    364e:	08 95       	ret

00003650 <__do_global_dtors>:
    3650:	10 e0       	ldi	r17, 0x00	; 0
    3652:	c6 e7       	ldi	r28, 0x76	; 118
    3654:	d0 e0       	ldi	r29, 0x00	; 0
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <__do_global_dtors+0x10>
    3658:	fe 01       	movw	r30, r28
    365a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__tablejump2__>
    365e:	21 96       	adiw	r28, 0x01	; 1
    3660:	c8 37       	cpi	r28, 0x78	; 120
    3662:	d1 07       	cpc	r29, r17
    3664:	c9 f7       	brne	.-14     	; 0x3658 <__do_global_dtors+0x8>
    3666:	f8 94       	cli

00003668 <__stop_program>:
    3668:	ff cf       	rjmp	.-2      	; 0x3668 <__stop_program>
